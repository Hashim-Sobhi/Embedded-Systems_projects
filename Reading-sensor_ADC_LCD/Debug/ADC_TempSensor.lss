
ADC_TempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002abe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002abe  00002b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b0c  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ab7  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000050ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001ce  00000000  00000000  0000529f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ca  00000000  00000000  0000546d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012df  00000000  00000000  00007837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001108  00000000  00000000  00008b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032e  00000000  00000000  00009de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a52  00000000  00000000  0000a10e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ab60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 db 13 	call	0x27b6	; 0x27b6 <main>
      7a:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__muldi3>:
      82:	a0 e3       	ldi	r26, 0x30	; 48
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e7 e4       	ldi	r30, 0x47	; 71
      88:	f0 e0       	ldi	r31, 0x00	; 0
      8a:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__prologue_saves__>
      8e:	a8 e0       	ldi	r26, 0x08	; 8
      90:	4e 01       	movw	r8, r28
      92:	08 94       	sec
      94:	81 1c       	adc	r8, r1
      96:	91 1c       	adc	r9, r1
      98:	f4 01       	movw	r30, r8
      9a:	ba 2f       	mov	r27, r26
      9c:	11 92       	st	Z+, r1
      9e:	ba 95       	dec	r27
      a0:	e9 f7       	brne	.-6      	; 0x9c <__muldi3+0x1a>
      a2:	29 83       	std	Y+1, r18	; 0x01
      a4:	3a 83       	std	Y+2, r19	; 0x02
      a6:	4b 83       	std	Y+3, r20	; 0x03
      a8:	5c 83       	std	Y+4, r21	; 0x04
      aa:	6d 83       	std	Y+5, r22	; 0x05
      ac:	7e 83       	std	Y+6, r23	; 0x06
      ae:	8f 83       	std	Y+7, r24	; 0x07
      b0:	98 87       	std	Y+8, r25	; 0x08
      b2:	ce 01       	movw	r24, r28
      b4:	09 96       	adiw	r24, 0x09	; 9
      b6:	fc 01       	movw	r30, r24
      b8:	11 92       	st	Z+, r1
      ba:	aa 95       	dec	r26
      bc:	e9 f7       	brne	.-6      	; 0xb8 <__muldi3+0x36>
      be:	a9 86       	std	Y+9, r10	; 0x09
      c0:	ba 86       	std	Y+10, r11	; 0x0a
      c2:	cb 86       	std	Y+11, r12	; 0x0b
      c4:	dc 86       	std	Y+12, r13	; 0x0c
      c6:	ed 86       	std	Y+13, r14	; 0x0d
      c8:	fe 86       	std	Y+14, r15	; 0x0e
      ca:	0f 87       	std	Y+15, r16	; 0x0f
      cc:	18 8b       	std	Y+16, r17	; 0x10
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	3a 81       	ldd	r19, Y+2	; 0x02
      d2:	4b 81       	ldd	r20, Y+3	; 0x03
      d4:	5c 81       	ldd	r21, Y+4	; 0x04
      d6:	2d a7       	std	Y+45, r18	; 0x2d
      d8:	3e a7       	std	Y+46, r19	; 0x2e
      da:	4f a7       	std	Y+47, r20	; 0x2f
      dc:	58 ab       	std	Y+48, r21	; 0x30
      de:	79 01       	movw	r14, r18
      e0:	8a 01       	movw	r16, r20
      e2:	8f ef       	ldi	r24, 0xFF	; 255
      e4:	9f ef       	ldi	r25, 0xFF	; 255
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e8 22       	and	r14, r24
      ec:	f9 22       	and	r15, r25
      ee:	0a 23       	and	r16, r26
      f0:	1b 23       	and	r17, r27
      f2:	1a 01       	movw	r2, r20
      f4:	44 24       	eor	r4, r4
      f6:	55 24       	eor	r5, r5
      f8:	29 85       	ldd	r18, Y+9	; 0x09
      fa:	3a 85       	ldd	r19, Y+10	; 0x0a
      fc:	4b 85       	ldd	r20, Y+11	; 0x0b
      fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     100:	29 a7       	std	Y+41, r18	; 0x29
     102:	3a a7       	std	Y+42, r19	; 0x2a
     104:	4b a7       	std	Y+43, r20	; 0x2b
     106:	5c a7       	std	Y+44, r21	; 0x2c
     108:	59 01       	movw	r10, r18
     10a:	6a 01       	movw	r12, r20
     10c:	a8 22       	and	r10, r24
     10e:	b9 22       	and	r11, r25
     110:	ca 22       	and	r12, r26
     112:	db 22       	and	r13, r27
     114:	3a 01       	movw	r6, r20
     116:	88 24       	eor	r8, r8
     118:	99 24       	eor	r9, r9
     11a:	c6 01       	movw	r24, r12
     11c:	b5 01       	movw	r22, r10
     11e:	a8 01       	movw	r20, r16
     120:	97 01       	movw	r18, r14
     122:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
     126:	6d a3       	std	Y+37, r22	; 0x25
     128:	7e a3       	std	Y+38, r23	; 0x26
     12a:	8f a3       	std	Y+39, r24	; 0x27
     12c:	98 a7       	std	Y+40, r25	; 0x28
     12e:	c4 01       	movw	r24, r8
     130:	b3 01       	movw	r22, r6
     132:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
     136:	69 a3       	std	Y+33, r22	; 0x21
     138:	7a a3       	std	Y+34, r23	; 0x22
     13a:	8b a3       	std	Y+35, r24	; 0x23
     13c:	9c a3       	std	Y+36, r25	; 0x24
     13e:	c6 01       	movw	r24, r12
     140:	b5 01       	movw	r22, r10
     142:	a2 01       	movw	r20, r4
     144:	91 01       	movw	r18, r2
     146:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
     14a:	7b 01       	movw	r14, r22
     14c:	8c 01       	movw	r16, r24
     14e:	c4 01       	movw	r24, r8
     150:	b3 01       	movw	r22, r6
     152:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
     156:	5b 01       	movw	r10, r22
     158:	6c 01       	movw	r12, r24
     15a:	89 a1       	ldd	r24, Y+33	; 0x21
     15c:	9a a1       	ldd	r25, Y+34	; 0x22
     15e:	ab a1       	ldd	r26, Y+35	; 0x23
     160:	bc a1       	ldd	r27, Y+36	; 0x24
     162:	8e 0d       	add	r24, r14
     164:	9f 1d       	adc	r25, r15
     166:	a0 1f       	adc	r26, r16
     168:	b1 1f       	adc	r27, r17
     16a:	89 a3       	std	Y+33, r24	; 0x21
     16c:	9a a3       	std	Y+34, r25	; 0x22
     16e:	ab a3       	std	Y+35, r26	; 0x23
     170:	bc a3       	std	Y+36, r27	; 0x24
     172:	2d a1       	ldd	r18, Y+37	; 0x25
     174:	3e a1       	ldd	r19, Y+38	; 0x26
     176:	4f a1       	ldd	r20, Y+39	; 0x27
     178:	58 a5       	ldd	r21, Y+40	; 0x28
     17a:	ca 01       	movw	r24, r20
     17c:	aa 27       	eor	r26, r26
     17e:	bb 27       	eor	r27, r27
     180:	29 a1       	ldd	r18, Y+33	; 0x21
     182:	3a a1       	ldd	r19, Y+34	; 0x22
     184:	4b a1       	ldd	r20, Y+35	; 0x23
     186:	5c a1       	ldd	r21, Y+36	; 0x24
     188:	28 0f       	add	r18, r24
     18a:	39 1f       	adc	r19, r25
     18c:	4a 1f       	adc	r20, r26
     18e:	5b 1f       	adc	r21, r27
     190:	29 a3       	std	Y+33, r18	; 0x21
     192:	3a a3       	std	Y+34, r19	; 0x22
     194:	4b a3       	std	Y+35, r20	; 0x23
     196:	5c a3       	std	Y+36, r21	; 0x24
     198:	2e 15       	cp	r18, r14
     19a:	3f 05       	cpc	r19, r15
     19c:	40 07       	cpc	r20, r16
     19e:	51 07       	cpc	r21, r17
     1a0:	40 f4       	brcc	.+16     	; 0x1b2 <__muldi3+0x130>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	a1 e0       	ldi	r26, 0x01	; 1
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	a8 0e       	add	r10, r24
     1ac:	b9 1e       	adc	r11, r25
     1ae:	ca 1e       	adc	r12, r26
     1b0:	db 1e       	adc	r13, r27
     1b2:	89 a1       	ldd	r24, Y+33	; 0x21
     1b4:	9a a1       	ldd	r25, Y+34	; 0x22
     1b6:	ab a1       	ldd	r26, Y+35	; 0x23
     1b8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ba:	9d 01       	movw	r18, r26
     1bc:	44 27       	eor	r20, r20
     1be:	55 27       	eor	r21, r21
     1c0:	2a 0d       	add	r18, r10
     1c2:	3b 1d       	adc	r19, r11
     1c4:	4c 1d       	adc	r20, r12
     1c6:	5d 1d       	adc	r21, r13
     1c8:	2d 8f       	std	Y+29, r18	; 0x1d
     1ca:	3e 8f       	std	Y+30, r19	; 0x1e
     1cc:	4f 8f       	std	Y+31, r20	; 0x1f
     1ce:	58 a3       	std	Y+32, r21	; 0x20
     1d0:	6c 01       	movw	r12, r24
     1d2:	bb 24       	eor	r11, r11
     1d4:	aa 24       	eor	r10, r10
     1d6:	8d a1       	ldd	r24, Y+37	; 0x25
     1d8:	9e a1       	ldd	r25, Y+38	; 0x26
     1da:	af a1       	ldd	r26, Y+39	; 0x27
     1dc:	b8 a5       	ldd	r27, Y+40	; 0x28
     1de:	a0 70       	andi	r26, 0x00	; 0
     1e0:	b0 70       	andi	r27, 0x00	; 0
     1e2:	a8 0e       	add	r10, r24
     1e4:	b9 1e       	adc	r11, r25
     1e6:	ca 1e       	adc	r12, r26
     1e8:	db 1e       	adc	r13, r27
     1ea:	a9 8e       	std	Y+25, r10	; 0x19
     1ec:	ba 8e       	std	Y+26, r11	; 0x1a
     1ee:	cb 8e       	std	Y+27, r12	; 0x1b
     1f0:	dc 8e       	std	Y+28, r13	; 0x1c
     1f2:	9a 8c       	ldd	r9, Y+26	; 0x1a
     1f4:	8b 8c       	ldd	r8, Y+27	; 0x1b
     1f6:	7c 8c       	ldd	r7, Y+28	; 0x1c
     1f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     1fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
     1fc:	78 a1       	ldd	r23, Y+32	; 0x20
     1fe:	fe 01       	movw	r30, r28
     200:	71 96       	adiw	r30, 0x11	; 17
     202:	88 e0       	ldi	r24, 0x08	; 8
     204:	df 01       	movw	r26, r30
     206:	1d 92       	st	X+, r1
     208:	8a 95       	dec	r24
     20a:	e9 f7       	brne	.-6      	; 0x206 <__muldi3+0x184>
     20c:	2d 8b       	std	Y+21, r18	; 0x15
     20e:	9e 8b       	std	Y+22, r25	; 0x16
     210:	6f 8b       	std	Y+23, r22	; 0x17
     212:	78 8f       	std	Y+24, r23	; 0x18
     214:	2d 85       	ldd	r18, Y+13	; 0x0d
     216:	3e 85       	ldd	r19, Y+14	; 0x0e
     218:	4f 85       	ldd	r20, Y+15	; 0x0f
     21a:	58 89       	ldd	r21, Y+16	; 0x10
     21c:	6d a5       	ldd	r22, Y+45	; 0x2d
     21e:	7e a5       	ldd	r23, Y+46	; 0x2e
     220:	8f a5       	ldd	r24, Y+47	; 0x2f
     222:	98 a9       	ldd	r25, Y+48	; 0x30
     224:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
     228:	7b 01       	movw	r14, r22
     22a:	8c 01       	movw	r16, r24
     22c:	2d 81       	ldd	r18, Y+5	; 0x05
     22e:	3e 81       	ldd	r19, Y+6	; 0x06
     230:	4f 81       	ldd	r20, Y+7	; 0x07
     232:	58 85       	ldd	r21, Y+8	; 0x08
     234:	69 a5       	ldd	r22, Y+41	; 0x29
     236:	7a a5       	ldd	r23, Y+42	; 0x2a
     238:	8b a5       	ldd	r24, Y+43	; 0x2b
     23a:	9c a5       	ldd	r25, Y+44	; 0x2c
     23c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
     240:	e6 0e       	add	r14, r22
     242:	f7 1e       	adc	r15, r23
     244:	08 1f       	adc	r16, r24
     246:	19 1f       	adc	r17, r25
     248:	6d 89       	ldd	r22, Y+21	; 0x15
     24a:	7e 89       	ldd	r23, Y+22	; 0x16
     24c:	8f 89       	ldd	r24, Y+23	; 0x17
     24e:	98 8d       	ldd	r25, Y+24	; 0x18
     250:	6e 0d       	add	r22, r14
     252:	7f 1d       	adc	r23, r15
     254:	80 1f       	adc	r24, r16
     256:	91 1f       	adc	r25, r17
     258:	6d 8b       	std	Y+21, r22	; 0x15
     25a:	7e 8b       	std	Y+22, r23	; 0x16
     25c:	8f 8b       	std	Y+23, r24	; 0x17
     25e:	98 8f       	std	Y+24, r25	; 0x18
     260:	ee 89       	ldd	r30, Y+22	; 0x16
     262:	2a 2d       	mov	r18, r10
     264:	39 2d       	mov	r19, r9
     266:	48 2d       	mov	r20, r8
     268:	57 2d       	mov	r21, r7
     26a:	7e 2f       	mov	r23, r30
     26c:	8f 89       	ldd	r24, Y+23	; 0x17
     26e:	98 8d       	ldd	r25, Y+24	; 0x18
     270:	e0 96       	adiw	r28, 0x30	; 48
     272:	e2 e1       	ldi	r30, 0x12	; 18
     274:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__epilogue_restores__>

00000278 <__lshrdi3>:
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	60 97       	sbiw	r28, 0x10	; 16
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	a8 2f       	mov	r26, r24
     294:	00 23       	and	r16, r16
     296:	09 f4       	brne	.+2      	; 0x29a <__lshrdi3+0x22>
     298:	61 c0       	rjmp	.+194    	; 0x35c <__lshrdi3+0xe4>
     29a:	7e 01       	movw	r14, r28
     29c:	08 94       	sec
     29e:	e1 1c       	adc	r14, r1
     2a0:	f1 1c       	adc	r15, r1
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	f7 01       	movw	r30, r14
     2a6:	11 92       	st	Z+, r1
     2a8:	8a 95       	dec	r24
     2aa:	e9 f7       	brne	.-6      	; 0x2a6 <__lshrdi3+0x2e>
     2ac:	29 83       	std	Y+1, r18	; 0x01
     2ae:	3a 83       	std	Y+2, r19	; 0x02
     2b0:	4b 83       	std	Y+3, r20	; 0x03
     2b2:	5c 83       	std	Y+4, r21	; 0x04
     2b4:	6d 83       	std	Y+5, r22	; 0x05
     2b6:	7e 83       	std	Y+6, r23	; 0x06
     2b8:	af 83       	std	Y+7, r26	; 0x07
     2ba:	98 87       	std	Y+8, r25	; 0x08
     2bc:	80 e2       	ldi	r24, 0x20	; 32
     2be:	80 1b       	sub	r24, r16
     2c0:	e8 2f       	mov	r30, r24
     2c2:	ff 27       	eor	r31, r31
     2c4:	e7 fd       	sbrc	r30, 7
     2c6:	f0 95       	com	r31
     2c8:	4d 81       	ldd	r20, Y+5	; 0x05
     2ca:	5e 81       	ldd	r21, Y+6	; 0x06
     2cc:	6f 81       	ldd	r22, Y+7	; 0x07
     2ce:	78 85       	ldd	r23, Y+8	; 0x08
     2d0:	18 16       	cp	r1, r24
     2d2:	84 f0       	brlt	.+32     	; 0x2f4 <__lshrdi3+0x7c>
     2d4:	1d 86       	std	Y+13, r1	; 0x0d
     2d6:	1e 86       	std	Y+14, r1	; 0x0e
     2d8:	1f 86       	std	Y+15, r1	; 0x0f
     2da:	18 8a       	std	Y+16, r1	; 0x10
     2dc:	88 27       	eor	r24, r24
     2de:	99 27       	eor	r25, r25
     2e0:	8e 1b       	sub	r24, r30
     2e2:	9f 0b       	sbc	r25, r31
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <__lshrdi3+0x76>
     2e6:	76 95       	lsr	r23
     2e8:	67 95       	ror	r22
     2ea:	57 95       	ror	r21
     2ec:	47 95       	ror	r20
     2ee:	8a 95       	dec	r24
     2f0:	d2 f7       	brpl	.-12     	; 0x2e6 <__lshrdi3+0x6e>
     2f2:	28 c0       	rjmp	.+80     	; 0x344 <__lshrdi3+0xcc>
     2f4:	20 2f       	mov	r18, r16
     2f6:	33 27       	eor	r19, r19
     2f8:	27 fd       	sbrc	r18, 7
     2fa:	30 95       	com	r19
     2fc:	db 01       	movw	r26, r22
     2fe:	ca 01       	movw	r24, r20
     300:	02 2e       	mov	r0, r18
     302:	04 c0       	rjmp	.+8      	; 0x30c <__lshrdi3+0x94>
     304:	b6 95       	lsr	r27
     306:	a7 95       	ror	r26
     308:	97 95       	ror	r25
     30a:	87 95       	ror	r24
     30c:	0a 94       	dec	r0
     30e:	d2 f7       	brpl	.-12     	; 0x304 <__lshrdi3+0x8c>
     310:	8d 87       	std	Y+13, r24	; 0x0d
     312:	9e 87       	std	Y+14, r25	; 0x0e
     314:	af 87       	std	Y+15, r26	; 0x0f
     316:	b8 8b       	std	Y+16, r27	; 0x10
     318:	04 c0       	rjmp	.+8      	; 0x322 <__lshrdi3+0xaa>
     31a:	44 0f       	add	r20, r20
     31c:	55 1f       	adc	r21, r21
     31e:	66 1f       	adc	r22, r22
     320:	77 1f       	adc	r23, r23
     322:	ea 95       	dec	r30
     324:	d2 f7       	brpl	.-12     	; 0x31a <__lshrdi3+0xa2>
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	9a 81       	ldd	r25, Y+2	; 0x02
     32a:	ab 81       	ldd	r26, Y+3	; 0x03
     32c:	bc 81       	ldd	r27, Y+4	; 0x04
     32e:	04 c0       	rjmp	.+8      	; 0x338 <__lshrdi3+0xc0>
     330:	b6 95       	lsr	r27
     332:	a7 95       	ror	r26
     334:	97 95       	ror	r25
     336:	87 95       	ror	r24
     338:	2a 95       	dec	r18
     33a:	d2 f7       	brpl	.-12     	; 0x330 <__lshrdi3+0xb8>
     33c:	48 2b       	or	r20, r24
     33e:	59 2b       	or	r21, r25
     340:	6a 2b       	or	r22, r26
     342:	7b 2b       	or	r23, r27
     344:	49 87       	std	Y+9, r20	; 0x09
     346:	5a 87       	std	Y+10, r21	; 0x0a
     348:	6b 87       	std	Y+11, r22	; 0x0b
     34a:	7c 87       	std	Y+12, r23	; 0x0c
     34c:	29 85       	ldd	r18, Y+9	; 0x09
     34e:	3a 85       	ldd	r19, Y+10	; 0x0a
     350:	4b 85       	ldd	r20, Y+11	; 0x0b
     352:	5c 85       	ldd	r21, Y+12	; 0x0c
     354:	6d 85       	ldd	r22, Y+13	; 0x0d
     356:	7e 85       	ldd	r23, Y+14	; 0x0e
     358:	af 85       	ldd	r26, Y+15	; 0x0f
     35a:	98 89       	ldd	r25, Y+16	; 0x10
     35c:	8a 2f       	mov	r24, r26
     35e:	60 96       	adiw	r28, 0x10	; 16
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	cf 91       	pop	r28
     36c:	df 91       	pop	r29
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <__fixunssfsi>:
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	7b 01       	movw	r14, r22
     380:	8c 01       	movw	r16, r24
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	5f e4       	ldi	r21, 0x4F	; 79
     38a:	0e 94 67 05 	call	0xace	; 0xace <__gesf2>
     38e:	88 23       	and	r24, r24
     390:	8c f0       	brlt	.+34     	; 0x3b4 <__fixunssfsi+0x3e>
     392:	c8 01       	movw	r24, r16
     394:	b7 01       	movw	r22, r14
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	5f e4       	ldi	r21, 0x4F	; 79
     39e:	0e 94 33 03 	call	0x666	; 0x666 <__subsf3>
     3a2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixsfsi>
     3a6:	9b 01       	movw	r18, r22
     3a8:	ac 01       	movw	r20, r24
     3aa:	20 50       	subi	r18, 0x00	; 0
     3ac:	30 40       	sbci	r19, 0x00	; 0
     3ae:	40 40       	sbci	r20, 0x00	; 0
     3b0:	50 48       	sbci	r21, 0x80	; 128
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <__fixunssfsi+0x4a>
     3b4:	c8 01       	movw	r24, r16
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fixsfsi>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	b9 01       	movw	r22, r18
     3c2:	ca 01       	movw	r24, r20
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <_fpadd_parts>:
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	ed ee       	ldi	r30, 0xED	; 237
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__prologue_saves__>
     3da:	dc 01       	movw	r26, r24
     3dc:	2b 01       	movw	r4, r22
     3de:	fa 01       	movw	r30, r20
     3e0:	9c 91       	ld	r25, X
     3e2:	92 30       	cpi	r25, 0x02	; 2
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <_fpadd_parts+0x1a>
     3e6:	39 c1       	rjmp	.+626    	; 0x65a <_fpadd_parts+0x28c>
     3e8:	eb 01       	movw	r28, r22
     3ea:	88 81       	ld	r24, Y
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	08 f4       	brcc	.+2      	; 0x3f2 <_fpadd_parts+0x24>
     3f0:	33 c1       	rjmp	.+614    	; 0x658 <_fpadd_parts+0x28a>
     3f2:	94 30       	cpi	r25, 0x04	; 4
     3f4:	69 f4       	brne	.+26     	; 0x410 <_fpadd_parts+0x42>
     3f6:	84 30       	cpi	r24, 0x04	; 4
     3f8:	09 f0       	breq	.+2      	; 0x3fc <_fpadd_parts+0x2e>
     3fa:	2f c1       	rjmp	.+606    	; 0x65a <_fpadd_parts+0x28c>
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	9c 91       	ld	r25, X
     400:	11 97       	sbiw	r26, 0x01	; 1
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	98 17       	cp	r25, r24
     406:	09 f4       	brne	.+2      	; 0x40a <_fpadd_parts+0x3c>
     408:	28 c1       	rjmp	.+592    	; 0x65a <_fpadd_parts+0x28c>
     40a:	a0 e6       	ldi	r26, 0x60	; 96
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	25 c1       	rjmp	.+586    	; 0x65a <_fpadd_parts+0x28c>
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	09 f4       	brne	.+2      	; 0x416 <_fpadd_parts+0x48>
     414:	21 c1       	rjmp	.+578    	; 0x658 <_fpadd_parts+0x28a>
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	a9 f4       	brne	.+42     	; 0x444 <_fpadd_parts+0x76>
     41a:	92 30       	cpi	r25, 0x02	; 2
     41c:	09 f0       	breq	.+2      	; 0x420 <_fpadd_parts+0x52>
     41e:	1d c1       	rjmp	.+570    	; 0x65a <_fpadd_parts+0x28c>
     420:	9a 01       	movw	r18, r20
     422:	ad 01       	movw	r20, r26
     424:	88 e0       	ldi	r24, 0x08	; 8
     426:	ea 01       	movw	r28, r20
     428:	09 90       	ld	r0, Y+
     42a:	ae 01       	movw	r20, r28
     42c:	e9 01       	movw	r28, r18
     42e:	09 92       	st	Y+, r0
     430:	9e 01       	movw	r18, r28
     432:	81 50       	subi	r24, 0x01	; 1
     434:	c1 f7       	brne	.-16     	; 0x426 <_fpadd_parts+0x58>
     436:	e2 01       	movw	r28, r4
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	9c 91       	ld	r25, X
     43e:	89 23       	and	r24, r25
     440:	81 83       	std	Z+1, r24	; 0x01
     442:	08 c1       	rjmp	.+528    	; 0x654 <_fpadd_parts+0x286>
     444:	92 30       	cpi	r25, 0x02	; 2
     446:	09 f4       	brne	.+2      	; 0x44a <_fpadd_parts+0x7c>
     448:	07 c1       	rjmp	.+526    	; 0x658 <_fpadd_parts+0x28a>
     44a:	12 96       	adiw	r26, 0x02	; 2
     44c:	2d 90       	ld	r2, X+
     44e:	3c 90       	ld	r3, X
     450:	13 97       	sbiw	r26, 0x03	; 3
     452:	eb 01       	movw	r28, r22
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	14 96       	adiw	r26, 0x04	; 4
     45a:	ad 90       	ld	r10, X+
     45c:	bd 90       	ld	r11, X+
     45e:	cd 90       	ld	r12, X+
     460:	dc 90       	ld	r13, X
     462:	17 97       	sbiw	r26, 0x07	; 7
     464:	ec 80       	ldd	r14, Y+4	; 0x04
     466:	fd 80       	ldd	r15, Y+5	; 0x05
     468:	0e 81       	ldd	r16, Y+6	; 0x06
     46a:	1f 81       	ldd	r17, Y+7	; 0x07
     46c:	91 01       	movw	r18, r2
     46e:	28 1b       	sub	r18, r24
     470:	39 0b       	sbc	r19, r25
     472:	b9 01       	movw	r22, r18
     474:	37 ff       	sbrs	r19, 7
     476:	04 c0       	rjmp	.+8      	; 0x480 <_fpadd_parts+0xb2>
     478:	66 27       	eor	r22, r22
     47a:	77 27       	eor	r23, r23
     47c:	62 1b       	sub	r22, r18
     47e:	73 0b       	sbc	r23, r19
     480:	60 32       	cpi	r22, 0x20	; 32
     482:	71 05       	cpc	r23, r1
     484:	0c f0       	brlt	.+2      	; 0x488 <_fpadd_parts+0xba>
     486:	61 c0       	rjmp	.+194    	; 0x54a <_fpadd_parts+0x17c>
     488:	12 16       	cp	r1, r18
     48a:	13 06       	cpc	r1, r19
     48c:	6c f5       	brge	.+90     	; 0x4e8 <_fpadd_parts+0x11a>
     48e:	37 01       	movw	r6, r14
     490:	48 01       	movw	r8, r16
     492:	06 2e       	mov	r0, r22
     494:	04 c0       	rjmp	.+8      	; 0x49e <_fpadd_parts+0xd0>
     496:	96 94       	lsr	r9
     498:	87 94       	ror	r8
     49a:	77 94       	ror	r7
     49c:	67 94       	ror	r6
     49e:	0a 94       	dec	r0
     4a0:	d2 f7       	brpl	.-12     	; 0x496 <_fpadd_parts+0xc8>
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <_fpadd_parts+0xe6>
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	44 1f       	adc	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	6a 95       	dec	r22
     4b6:	d2 f7       	brpl	.-12     	; 0x4ac <_fpadd_parts+0xde>
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	30 40       	sbci	r19, 0x00	; 0
     4bc:	40 40       	sbci	r20, 0x00	; 0
     4be:	50 40       	sbci	r21, 0x00	; 0
     4c0:	2e 21       	and	r18, r14
     4c2:	3f 21       	and	r19, r15
     4c4:	40 23       	and	r20, r16
     4c6:	51 23       	and	r21, r17
     4c8:	21 15       	cp	r18, r1
     4ca:	31 05       	cpc	r19, r1
     4cc:	41 05       	cpc	r20, r1
     4ce:	51 05       	cpc	r21, r1
     4d0:	21 f0       	breq	.+8      	; 0x4da <_fpadd_parts+0x10c>
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	79 01       	movw	r14, r18
     4dc:	8a 01       	movw	r16, r20
     4de:	e6 28       	or	r14, r6
     4e0:	f7 28       	or	r15, r7
     4e2:	08 29       	or	r16, r8
     4e4:	19 29       	or	r17, r9
     4e6:	3c c0       	rjmp	.+120    	; 0x560 <_fpadd_parts+0x192>
     4e8:	23 2b       	or	r18, r19
     4ea:	d1 f1       	breq	.+116    	; 0x560 <_fpadd_parts+0x192>
     4ec:	26 0e       	add	r2, r22
     4ee:	37 1e       	adc	r3, r23
     4f0:	35 01       	movw	r6, r10
     4f2:	46 01       	movw	r8, r12
     4f4:	06 2e       	mov	r0, r22
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <_fpadd_parts+0x132>
     4f8:	96 94       	lsr	r9
     4fa:	87 94       	ror	r8
     4fc:	77 94       	ror	r7
     4fe:	67 94       	ror	r6
     500:	0a 94       	dec	r0
     502:	d2 f7       	brpl	.-12     	; 0x4f8 <_fpadd_parts+0x12a>
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	04 c0       	rjmp	.+8      	; 0x516 <_fpadd_parts+0x148>
     50e:	22 0f       	add	r18, r18
     510:	33 1f       	adc	r19, r19
     512:	44 1f       	adc	r20, r20
     514:	55 1f       	adc	r21, r21
     516:	6a 95       	dec	r22
     518:	d2 f7       	brpl	.-12     	; 0x50e <_fpadd_parts+0x140>
     51a:	21 50       	subi	r18, 0x01	; 1
     51c:	30 40       	sbci	r19, 0x00	; 0
     51e:	40 40       	sbci	r20, 0x00	; 0
     520:	50 40       	sbci	r21, 0x00	; 0
     522:	2a 21       	and	r18, r10
     524:	3b 21       	and	r19, r11
     526:	4c 21       	and	r20, r12
     528:	5d 21       	and	r21, r13
     52a:	21 15       	cp	r18, r1
     52c:	31 05       	cpc	r19, r1
     52e:	41 05       	cpc	r20, r1
     530:	51 05       	cpc	r21, r1
     532:	21 f0       	breq	.+8      	; 0x53c <_fpadd_parts+0x16e>
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	59 01       	movw	r10, r18
     53e:	6a 01       	movw	r12, r20
     540:	a6 28       	or	r10, r6
     542:	b7 28       	or	r11, r7
     544:	c8 28       	or	r12, r8
     546:	d9 28       	or	r13, r9
     548:	0b c0       	rjmp	.+22     	; 0x560 <_fpadd_parts+0x192>
     54a:	82 15       	cp	r24, r2
     54c:	93 05       	cpc	r25, r3
     54e:	2c f0       	brlt	.+10     	; 0x55a <_fpadd_parts+0x18c>
     550:	1c 01       	movw	r2, r24
     552:	aa 24       	eor	r10, r10
     554:	bb 24       	eor	r11, r11
     556:	65 01       	movw	r12, r10
     558:	03 c0       	rjmp	.+6      	; 0x560 <_fpadd_parts+0x192>
     55a:	ee 24       	eor	r14, r14
     55c:	ff 24       	eor	r15, r15
     55e:	87 01       	movw	r16, r14
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	9c 91       	ld	r25, X
     564:	d2 01       	movw	r26, r4
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	8c 91       	ld	r24, X
     56a:	98 17       	cp	r25, r24
     56c:	09 f4       	brne	.+2      	; 0x570 <_fpadd_parts+0x1a2>
     56e:	45 c0       	rjmp	.+138    	; 0x5fa <_fpadd_parts+0x22c>
     570:	99 23       	and	r25, r25
     572:	39 f0       	breq	.+14     	; 0x582 <_fpadd_parts+0x1b4>
     574:	a8 01       	movw	r20, r16
     576:	97 01       	movw	r18, r14
     578:	2a 19       	sub	r18, r10
     57a:	3b 09       	sbc	r19, r11
     57c:	4c 09       	sbc	r20, r12
     57e:	5d 09       	sbc	r21, r13
     580:	06 c0       	rjmp	.+12     	; 0x58e <_fpadd_parts+0x1c0>
     582:	a6 01       	movw	r20, r12
     584:	95 01       	movw	r18, r10
     586:	2e 19       	sub	r18, r14
     588:	3f 09       	sbc	r19, r15
     58a:	40 0b       	sbc	r20, r16
     58c:	51 0b       	sbc	r21, r17
     58e:	57 fd       	sbrc	r21, 7
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <_fpadd_parts+0x1d4>
     592:	11 82       	std	Z+1, r1	; 0x01
     594:	33 82       	std	Z+3, r3	; 0x03
     596:	22 82       	std	Z+2, r2	; 0x02
     598:	24 83       	std	Z+4, r18	; 0x04
     59a:	35 83       	std	Z+5, r19	; 0x05
     59c:	46 83       	std	Z+6, r20	; 0x06
     59e:	57 83       	std	Z+7, r21	; 0x07
     5a0:	1d c0       	rjmp	.+58     	; 0x5dc <_fpadd_parts+0x20e>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	81 83       	std	Z+1, r24	; 0x01
     5a6:	33 82       	std	Z+3, r3	; 0x03
     5a8:	22 82       	std	Z+2, r2	; 0x02
     5aa:	88 27       	eor	r24, r24
     5ac:	99 27       	eor	r25, r25
     5ae:	dc 01       	movw	r26, r24
     5b0:	82 1b       	sub	r24, r18
     5b2:	93 0b       	sbc	r25, r19
     5b4:	a4 0b       	sbc	r26, r20
     5b6:	b5 0b       	sbc	r27, r21
     5b8:	84 83       	std	Z+4, r24	; 0x04
     5ba:	95 83       	std	Z+5, r25	; 0x05
     5bc:	a6 83       	std	Z+6, r26	; 0x06
     5be:	b7 83       	std	Z+7, r27	; 0x07
     5c0:	0d c0       	rjmp	.+26     	; 0x5dc <_fpadd_parts+0x20e>
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	44 1f       	adc	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	24 83       	std	Z+4, r18	; 0x04
     5cc:	35 83       	std	Z+5, r19	; 0x05
     5ce:	46 83       	std	Z+6, r20	; 0x06
     5d0:	57 83       	std	Z+7, r21	; 0x07
     5d2:	82 81       	ldd	r24, Z+2	; 0x02
     5d4:	93 81       	ldd	r25, Z+3	; 0x03
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	93 83       	std	Z+3, r25	; 0x03
     5da:	82 83       	std	Z+2, r24	; 0x02
     5dc:	24 81       	ldd	r18, Z+4	; 0x04
     5de:	35 81       	ldd	r19, Z+5	; 0x05
     5e0:	46 81       	ldd	r20, Z+6	; 0x06
     5e2:	57 81       	ldd	r21, Z+7	; 0x07
     5e4:	da 01       	movw	r26, r20
     5e6:	c9 01       	movw	r24, r18
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	a1 09       	sbc	r26, r1
     5ec:	b1 09       	sbc	r27, r1
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	af 4f       	sbci	r26, 0xFF	; 255
     5f4:	bf 43       	sbci	r27, 0x3F	; 63
     5f6:	28 f3       	brcs	.-54     	; 0x5c2 <_fpadd_parts+0x1f4>
     5f8:	0b c0       	rjmp	.+22     	; 0x610 <_fpadd_parts+0x242>
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	33 82       	std	Z+3, r3	; 0x03
     5fe:	22 82       	std	Z+2, r2	; 0x02
     600:	ea 0c       	add	r14, r10
     602:	fb 1c       	adc	r15, r11
     604:	0c 1d       	adc	r16, r12
     606:	1d 1d       	adc	r17, r13
     608:	e4 82       	std	Z+4, r14	; 0x04
     60a:	f5 82       	std	Z+5, r15	; 0x05
     60c:	06 83       	std	Z+6, r16	; 0x06
     60e:	17 83       	std	Z+7, r17	; 0x07
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	80 83       	st	Z, r24
     614:	24 81       	ldd	r18, Z+4	; 0x04
     616:	35 81       	ldd	r19, Z+5	; 0x05
     618:	46 81       	ldd	r20, Z+6	; 0x06
     61a:	57 81       	ldd	r21, Z+7	; 0x07
     61c:	57 ff       	sbrs	r21, 7
     61e:	1a c0       	rjmp	.+52     	; 0x654 <_fpadd_parts+0x286>
     620:	c9 01       	movw	r24, r18
     622:	aa 27       	eor	r26, r26
     624:	97 fd       	sbrc	r25, 7
     626:	a0 95       	com	r26
     628:	ba 2f       	mov	r27, r26
     62a:	81 70       	andi	r24, 0x01	; 1
     62c:	90 70       	andi	r25, 0x00	; 0
     62e:	a0 70       	andi	r26, 0x00	; 0
     630:	b0 70       	andi	r27, 0x00	; 0
     632:	56 95       	lsr	r21
     634:	47 95       	ror	r20
     636:	37 95       	ror	r19
     638:	27 95       	ror	r18
     63a:	82 2b       	or	r24, r18
     63c:	93 2b       	or	r25, r19
     63e:	a4 2b       	or	r26, r20
     640:	b5 2b       	or	r27, r21
     642:	84 83       	std	Z+4, r24	; 0x04
     644:	95 83       	std	Z+5, r25	; 0x05
     646:	a6 83       	std	Z+6, r26	; 0x06
     648:	b7 83       	std	Z+7, r27	; 0x07
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	93 81       	ldd	r25, Z+3	; 0x03
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	93 83       	std	Z+3, r25	; 0x03
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	df 01       	movw	r26, r30
     656:	01 c0       	rjmp	.+2      	; 0x65a <_fpadd_parts+0x28c>
     658:	d2 01       	movw	r26, r4
     65a:	cd 01       	movw	r24, r26
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	e2 e1       	ldi	r30, 0x12	; 18
     662:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__epilogue_restores__>

00000666 <__subsf3>:
     666:	a0 e2       	ldi	r26, 0x20	; 32
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e9 e3       	ldi	r30, 0x39	; 57
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x18>
     672:	69 83       	std	Y+1, r22	; 0x01
     674:	7a 83       	std	Y+2, r23	; 0x02
     676:	8b 83       	std	Y+3, r24	; 0x03
     678:	9c 83       	std	Y+4, r25	; 0x04
     67a:	2d 83       	std	Y+5, r18	; 0x05
     67c:	3e 83       	std	Y+6, r19	; 0x06
     67e:	4f 83       	std	Y+7, r20	; 0x07
     680:	58 87       	std	Y+8, r21	; 0x08
     682:	e9 e0       	ldi	r30, 0x09	; 9
     684:	ee 2e       	mov	r14, r30
     686:	f1 2c       	mov	r15, r1
     688:	ec 0e       	add	r14, r28
     68a:	fd 1e       	adc	r15, r29
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	b7 01       	movw	r22, r14
     692:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     696:	8e 01       	movw	r16, r28
     698:	0f 5e       	subi	r16, 0xEF	; 239
     69a:	1f 4f       	sbci	r17, 0xFF	; 255
     69c:	ce 01       	movw	r24, r28
     69e:	05 96       	adiw	r24, 0x05	; 5
     6a0:	b8 01       	movw	r22, r16
     6a2:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     6a6:	8a 89       	ldd	r24, Y+18	; 0x12
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	89 27       	eor	r24, r25
     6ac:	8a 8b       	std	Y+18, r24	; 0x12
     6ae:	c7 01       	movw	r24, r14
     6b0:	b8 01       	movw	r22, r16
     6b2:	ae 01       	movw	r20, r28
     6b4:	47 5e       	subi	r20, 0xE7	; 231
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_fpadd_parts>
     6bc:	0e 94 1b 06 	call	0xc36	; 0xc36 <__pack_f>
     6c0:	a0 96       	adiw	r28, 0x20	; 32
     6c2:	e6 e0       	ldi	r30, 0x06	; 6
     6c4:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x18>

000006c8 <__addsf3>:
     6c8:	a0 e2       	ldi	r26, 0x20	; 32
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	ea e6       	ldi	r30, 0x6A	; 106
     6ce:	f3 e0       	ldi	r31, 0x03	; 3
     6d0:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x18>
     6d4:	69 83       	std	Y+1, r22	; 0x01
     6d6:	7a 83       	std	Y+2, r23	; 0x02
     6d8:	8b 83       	std	Y+3, r24	; 0x03
     6da:	9c 83       	std	Y+4, r25	; 0x04
     6dc:	2d 83       	std	Y+5, r18	; 0x05
     6de:	3e 83       	std	Y+6, r19	; 0x06
     6e0:	4f 83       	std	Y+7, r20	; 0x07
     6e2:	58 87       	std	Y+8, r21	; 0x08
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	ef 2e       	mov	r14, r31
     6e8:	f1 2c       	mov	r15, r1
     6ea:	ec 0e       	add	r14, r28
     6ec:	fd 1e       	adc	r15, r29
     6ee:	ce 01       	movw	r24, r28
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	b7 01       	movw	r22, r14
     6f4:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5e       	subi	r16, 0xEF	; 239
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	ce 01       	movw	r24, r28
     700:	05 96       	adiw	r24, 0x05	; 5
     702:	b8 01       	movw	r22, r16
     704:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     708:	c7 01       	movw	r24, r14
     70a:	b8 01       	movw	r22, r16
     70c:	ae 01       	movw	r20, r28
     70e:	47 5e       	subi	r20, 0xE7	; 231
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_fpadd_parts>
     716:	0e 94 1b 06 	call	0xc36	; 0xc36 <__pack_f>
     71a:	a0 96       	adiw	r28, 0x20	; 32
     71c:	e6 e0       	ldi	r30, 0x06	; 6
     71e:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x18>

00000722 <__mulsf3>:
     722:	a0 e2       	ldi	r26, 0x20	; 32
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e7 e9       	ldi	r30, 0x97	; 151
     728:	f3 e0       	ldi	r31, 0x03	; 3
     72a:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__prologue_saves__>
     72e:	69 83       	std	Y+1, r22	; 0x01
     730:	7a 83       	std	Y+2, r23	; 0x02
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	9c 83       	std	Y+4, r25	; 0x04
     736:	2d 83       	std	Y+5, r18	; 0x05
     738:	3e 83       	std	Y+6, r19	; 0x06
     73a:	4f 83       	std	Y+7, r20	; 0x07
     73c:	58 87       	std	Y+8, r21	; 0x08
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	be 01       	movw	r22, r28
     744:	67 5f       	subi	r22, 0xF7	; 247
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     74c:	ce 01       	movw	r24, r28
     74e:	05 96       	adiw	r24, 0x05	; 5
     750:	be 01       	movw	r22, r28
     752:	6f 5e       	subi	r22, 0xEF	; 239
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     75a:	99 85       	ldd	r25, Y+9	; 0x09
     75c:	92 30       	cpi	r25, 0x02	; 2
     75e:	88 f0       	brcs	.+34     	; 0x782 <__mulsf3+0x60>
     760:	89 89       	ldd	r24, Y+17	; 0x11
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	c8 f0       	brcs	.+50     	; 0x798 <__mulsf3+0x76>
     766:	94 30       	cpi	r25, 0x04	; 4
     768:	19 f4       	brne	.+6      	; 0x770 <__mulsf3+0x4e>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	51 f4       	brne	.+20     	; 0x782 <__mulsf3+0x60>
     76e:	04 c0       	rjmp	.+8      	; 0x778 <__mulsf3+0x56>
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	29 f4       	brne	.+10     	; 0x77e <__mulsf3+0x5c>
     774:	92 30       	cpi	r25, 0x02	; 2
     776:	81 f4       	brne	.+32     	; 0x798 <__mulsf3+0x76>
     778:	80 e6       	ldi	r24, 0x60	; 96
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	c6 c0       	rjmp	.+396    	; 0x90a <__stack+0xab>
     77e:	92 30       	cpi	r25, 0x02	; 2
     780:	49 f4       	brne	.+18     	; 0x794 <__mulsf3+0x72>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	9a 85       	ldd	r25, Y+10	; 0x0a
     786:	8a 89       	ldd	r24, Y+18	; 0x12
     788:	98 13       	cpse	r25, r24
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	2a 87       	std	Y+10, r18	; 0x0a
     78e:	ce 01       	movw	r24, r28
     790:	09 96       	adiw	r24, 0x09	; 9
     792:	bb c0       	rjmp	.+374    	; 0x90a <__stack+0xab>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	49 f4       	brne	.+18     	; 0x7aa <__mulsf3+0x88>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	9a 85       	ldd	r25, Y+10	; 0x0a
     79c:	8a 89       	ldd	r24, Y+18	; 0x12
     79e:	98 13       	cpse	r25, r24
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	2a 8b       	std	Y+18, r18	; 0x12
     7a4:	ce 01       	movw	r24, r28
     7a6:	41 96       	adiw	r24, 0x11	; 17
     7a8:	b0 c0       	rjmp	.+352    	; 0x90a <__stack+0xab>
     7aa:	2d 84       	ldd	r2, Y+13	; 0x0d
     7ac:	3e 84       	ldd	r3, Y+14	; 0x0e
     7ae:	4f 84       	ldd	r4, Y+15	; 0x0f
     7b0:	58 88       	ldd	r5, Y+16	; 0x10
     7b2:	6d 88       	ldd	r6, Y+21	; 0x15
     7b4:	7e 88       	ldd	r7, Y+22	; 0x16
     7b6:	8f 88       	ldd	r8, Y+23	; 0x17
     7b8:	98 8c       	ldd	r9, Y+24	; 0x18
     7ba:	ee 24       	eor	r14, r14
     7bc:	ff 24       	eor	r15, r15
     7be:	87 01       	movw	r16, r14
     7c0:	aa 24       	eor	r10, r10
     7c2:	bb 24       	eor	r11, r11
     7c4:	65 01       	movw	r12, r10
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	e0 e0       	ldi	r30, 0x00	; 0
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	c1 01       	movw	r24, r2
     7d4:	81 70       	andi	r24, 0x01	; 1
     7d6:	90 70       	andi	r25, 0x00	; 0
     7d8:	89 2b       	or	r24, r25
     7da:	e9 f0       	breq	.+58     	; 0x816 <__mulsf3+0xf4>
     7dc:	e6 0c       	add	r14, r6
     7de:	f7 1c       	adc	r15, r7
     7e0:	08 1d       	adc	r16, r8
     7e2:	19 1d       	adc	r17, r9
     7e4:	9a 01       	movw	r18, r20
     7e6:	ab 01       	movw	r20, r22
     7e8:	2a 0d       	add	r18, r10
     7ea:	3b 1d       	adc	r19, r11
     7ec:	4c 1d       	adc	r20, r12
     7ee:	5d 1d       	adc	r21, r13
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	e6 14       	cp	r14, r6
     7fa:	f7 04       	cpc	r15, r7
     7fc:	08 05       	cpc	r16, r8
     7fe:	19 05       	cpc	r17, r9
     800:	20 f4       	brcc	.+8      	; 0x80a <__mulsf3+0xe8>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e0       	ldi	r26, 0x00	; 0
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	ba 01       	movw	r22, r20
     80c:	a9 01       	movw	r20, r18
     80e:	48 0f       	add	r20, r24
     810:	59 1f       	adc	r21, r25
     812:	6a 1f       	adc	r22, r26
     814:	7b 1f       	adc	r23, r27
     816:	aa 0c       	add	r10, r10
     818:	bb 1c       	adc	r11, r11
     81a:	cc 1c       	adc	r12, r12
     81c:	dd 1c       	adc	r13, r13
     81e:	97 fe       	sbrs	r9, 7
     820:	08 c0       	rjmp	.+16     	; 0x832 <__mulsf3+0x110>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	a8 2a       	or	r10, r24
     82c:	b9 2a       	or	r11, r25
     82e:	ca 2a       	or	r12, r26
     830:	db 2a       	or	r13, r27
     832:	31 96       	adiw	r30, 0x01	; 1
     834:	e0 32       	cpi	r30, 0x20	; 32
     836:	f1 05       	cpc	r31, r1
     838:	49 f0       	breq	.+18     	; 0x84c <__mulsf3+0x12a>
     83a:	66 0c       	add	r6, r6
     83c:	77 1c       	adc	r7, r7
     83e:	88 1c       	adc	r8, r8
     840:	99 1c       	adc	r9, r9
     842:	56 94       	lsr	r5
     844:	47 94       	ror	r4
     846:	37 94       	ror	r3
     848:	27 94       	ror	r2
     84a:	c3 cf       	rjmp	.-122    	; 0x7d2 <__mulsf3+0xb0>
     84c:	fa 85       	ldd	r31, Y+10	; 0x0a
     84e:	ea 89       	ldd	r30, Y+18	; 0x12
     850:	2b 89       	ldd	r18, Y+19	; 0x13
     852:	3c 89       	ldd	r19, Y+20	; 0x14
     854:	8b 85       	ldd	r24, Y+11	; 0x0b
     856:	9c 85       	ldd	r25, Y+12	; 0x0c
     858:	28 0f       	add	r18, r24
     85a:	39 1f       	adc	r19, r25
     85c:	2e 5f       	subi	r18, 0xFE	; 254
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
     862:	ca 01       	movw	r24, r20
     864:	81 70       	andi	r24, 0x01	; 1
     866:	90 70       	andi	r25, 0x00	; 0
     868:	89 2b       	or	r24, r25
     86a:	61 f0       	breq	.+24     	; 0x884 <__stack+0x25>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e8       	ldi	r27, 0x80	; 128
     87c:	e8 2a       	or	r14, r24
     87e:	f9 2a       	or	r15, r25
     880:	0a 2b       	or	r16, r26
     882:	1b 2b       	or	r17, r27
     884:	76 95       	lsr	r23
     886:	67 95       	ror	r22
     888:	57 95       	ror	r21
     88a:	47 95       	ror	r20
     88c:	2f 5f       	subi	r18, 0xFF	; 255
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	77 fd       	sbrc	r23, 7
     892:	e7 cf       	rjmp	.-50     	; 0x862 <__stack+0x3>
     894:	0c c0       	rjmp	.+24     	; 0x8ae <__stack+0x4f>
     896:	44 0f       	add	r20, r20
     898:	55 1f       	adc	r21, r21
     89a:	66 1f       	adc	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	17 fd       	sbrc	r17, 7
     8a0:	41 60       	ori	r20, 0x01	; 1
     8a2:	ee 0c       	add	r14, r14
     8a4:	ff 1c       	adc	r15, r15
     8a6:	00 1f       	adc	r16, r16
     8a8:	11 1f       	adc	r17, r17
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	30 40       	sbci	r19, 0x00	; 0
     8ae:	40 30       	cpi	r20, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	59 07       	cpc	r21, r25
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	69 07       	cpc	r22, r25
     8b8:	90 e4       	ldi	r25, 0x40	; 64
     8ba:	79 07       	cpc	r23, r25
     8bc:	60 f3       	brcs	.-40     	; 0x896 <__stack+0x37>
     8be:	2b 8f       	std	Y+27, r18	; 0x1b
     8c0:	3c 8f       	std	Y+28, r19	; 0x1c
     8c2:	db 01       	movw	r26, r22
     8c4:	ca 01       	movw	r24, r20
     8c6:	8f 77       	andi	r24, 0x7F	; 127
     8c8:	90 70       	andi	r25, 0x00	; 0
     8ca:	a0 70       	andi	r26, 0x00	; 0
     8cc:	b0 70       	andi	r27, 0x00	; 0
     8ce:	80 34       	cpi	r24, 0x40	; 64
     8d0:	91 05       	cpc	r25, r1
     8d2:	a1 05       	cpc	r26, r1
     8d4:	b1 05       	cpc	r27, r1
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <__stack+0x91>
     8d8:	47 fd       	sbrc	r20, 7
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <__stack+0x91>
     8dc:	e1 14       	cp	r14, r1
     8de:	f1 04       	cpc	r15, r1
     8e0:	01 05       	cpc	r16, r1
     8e2:	11 05       	cpc	r17, r1
     8e4:	29 f0       	breq	.+10     	; 0x8f0 <__stack+0x91>
     8e6:	40 5c       	subi	r20, 0xC0	; 192
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	6f 4f       	sbci	r22, 0xFF	; 255
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	40 78       	andi	r20, 0x80	; 128
     8f0:	1a 8e       	std	Y+26, r1	; 0x1a
     8f2:	fe 17       	cp	r31, r30
     8f4:	11 f0       	breq	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	8a 8f       	std	Y+26, r24	; 0x1a
     8fa:	4d 8f       	std	Y+29, r20	; 0x1d
     8fc:	5e 8f       	std	Y+30, r21	; 0x1e
     8fe:	6f 8f       	std	Y+31, r22	; 0x1f
     900:	78 a3       	std	Y+32, r23	; 0x20
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	89 8f       	std	Y+25, r24	; 0x19
     906:	ce 01       	movw	r24, r28
     908:	49 96       	adiw	r24, 0x19	; 25
     90a:	0e 94 1b 06 	call	0xc36	; 0xc36 <__pack_f>
     90e:	a0 96       	adiw	r28, 0x20	; 32
     910:	e2 e1       	ldi	r30, 0x12	; 18
     912:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__epilogue_restores__>

00000916 <__divsf3>:
     916:	a8 e1       	ldi	r26, 0x18	; 24
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__prologue_saves__+0x10>
     922:	69 83       	std	Y+1, r22	; 0x01
     924:	7a 83       	std	Y+2, r23	; 0x02
     926:	8b 83       	std	Y+3, r24	; 0x03
     928:	9c 83       	std	Y+4, r25	; 0x04
     92a:	2d 83       	std	Y+5, r18	; 0x05
     92c:	3e 83       	std	Y+6, r19	; 0x06
     92e:	4f 83       	std	Y+7, r20	; 0x07
     930:	58 87       	std	Y+8, r21	; 0x08
     932:	b9 e0       	ldi	r27, 0x09	; 9
     934:	eb 2e       	mov	r14, r27
     936:	f1 2c       	mov	r15, r1
     938:	ec 0e       	add	r14, r28
     93a:	fd 1e       	adc	r15, r29
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	b7 01       	movw	r22, r14
     942:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     946:	8e 01       	movw	r16, r28
     948:	0f 5e       	subi	r16, 0xEF	; 239
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	ce 01       	movw	r24, r28
     94e:	05 96       	adiw	r24, 0x05	; 5
     950:	b8 01       	movw	r22, r16
     952:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     956:	29 85       	ldd	r18, Y+9	; 0x09
     958:	22 30       	cpi	r18, 0x02	; 2
     95a:	08 f4       	brcc	.+2      	; 0x95e <__divsf3+0x48>
     95c:	7e c0       	rjmp	.+252    	; 0xa5a <__divsf3+0x144>
     95e:	39 89       	ldd	r19, Y+17	; 0x11
     960:	32 30       	cpi	r19, 0x02	; 2
     962:	10 f4       	brcc	.+4      	; 0x968 <__divsf3+0x52>
     964:	b8 01       	movw	r22, r16
     966:	7c c0       	rjmp	.+248    	; 0xa60 <__divsf3+0x14a>
     968:	8a 85       	ldd	r24, Y+10	; 0x0a
     96a:	9a 89       	ldd	r25, Y+18	; 0x12
     96c:	89 27       	eor	r24, r25
     96e:	8a 87       	std	Y+10, r24	; 0x0a
     970:	24 30       	cpi	r18, 0x04	; 4
     972:	11 f0       	breq	.+4      	; 0x978 <__divsf3+0x62>
     974:	22 30       	cpi	r18, 0x02	; 2
     976:	31 f4       	brne	.+12     	; 0x984 <__divsf3+0x6e>
     978:	23 17       	cp	r18, r19
     97a:	09 f0       	breq	.+2      	; 0x97e <__divsf3+0x68>
     97c:	6e c0       	rjmp	.+220    	; 0xa5a <__divsf3+0x144>
     97e:	60 e6       	ldi	r22, 0x60	; 96
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	6e c0       	rjmp	.+220    	; 0xa60 <__divsf3+0x14a>
     984:	34 30       	cpi	r19, 0x04	; 4
     986:	39 f4       	brne	.+14     	; 0x996 <__divsf3+0x80>
     988:	1d 86       	std	Y+13, r1	; 0x0d
     98a:	1e 86       	std	Y+14, r1	; 0x0e
     98c:	1f 86       	std	Y+15, r1	; 0x0f
     98e:	18 8a       	std	Y+16, r1	; 0x10
     990:	1c 86       	std	Y+12, r1	; 0x0c
     992:	1b 86       	std	Y+11, r1	; 0x0b
     994:	04 c0       	rjmp	.+8      	; 0x99e <__divsf3+0x88>
     996:	32 30       	cpi	r19, 0x02	; 2
     998:	21 f4       	brne	.+8      	; 0x9a2 <__divsf3+0x8c>
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	89 87       	std	Y+9, r24	; 0x09
     99e:	b7 01       	movw	r22, r14
     9a0:	5f c0       	rjmp	.+190    	; 0xa60 <__divsf3+0x14a>
     9a2:	2b 85       	ldd	r18, Y+11	; 0x0b
     9a4:	3c 85       	ldd	r19, Y+12	; 0x0c
     9a6:	8b 89       	ldd	r24, Y+19	; 0x13
     9a8:	9c 89       	ldd	r25, Y+20	; 0x14
     9aa:	28 1b       	sub	r18, r24
     9ac:	39 0b       	sbc	r19, r25
     9ae:	3c 87       	std	Y+12, r19	; 0x0c
     9b0:	2b 87       	std	Y+11, r18	; 0x0b
     9b2:	ed 84       	ldd	r14, Y+13	; 0x0d
     9b4:	fe 84       	ldd	r15, Y+14	; 0x0e
     9b6:	0f 85       	ldd	r16, Y+15	; 0x0f
     9b8:	18 89       	ldd	r17, Y+16	; 0x10
     9ba:	ad 88       	ldd	r10, Y+21	; 0x15
     9bc:	be 88       	ldd	r11, Y+22	; 0x16
     9be:	cf 88       	ldd	r12, Y+23	; 0x17
     9c0:	d8 8c       	ldd	r13, Y+24	; 0x18
     9c2:	ea 14       	cp	r14, r10
     9c4:	fb 04       	cpc	r15, r11
     9c6:	0c 05       	cpc	r16, r12
     9c8:	1d 05       	cpc	r17, r13
     9ca:	40 f4       	brcc	.+16     	; 0x9dc <__divsf3+0xc6>
     9cc:	ee 0c       	add	r14, r14
     9ce:	ff 1c       	adc	r15, r15
     9d0:	00 1f       	adc	r16, r16
     9d2:	11 1f       	adc	r17, r17
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	30 40       	sbci	r19, 0x00	; 0
     9d8:	3c 87       	std	Y+12, r19	; 0x0c
     9da:	2b 87       	std	Y+11, r18	; 0x0b
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	a0 e0       	ldi	r26, 0x00	; 0
     9ea:	b0 e4       	ldi	r27, 0x40	; 64
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	ea 14       	cp	r14, r10
     9f2:	fb 04       	cpc	r15, r11
     9f4:	0c 05       	cpc	r16, r12
     9f6:	1d 05       	cpc	r17, r13
     9f8:	40 f0       	brcs	.+16     	; 0xa0a <__divsf3+0xf4>
     9fa:	28 2b       	or	r18, r24
     9fc:	39 2b       	or	r19, r25
     9fe:	4a 2b       	or	r20, r26
     a00:	5b 2b       	or	r21, r27
     a02:	ea 18       	sub	r14, r10
     a04:	fb 08       	sbc	r15, r11
     a06:	0c 09       	sbc	r16, r12
     a08:	1d 09       	sbc	r17, r13
     a0a:	b6 95       	lsr	r27
     a0c:	a7 95       	ror	r26
     a0e:	97 95       	ror	r25
     a10:	87 95       	ror	r24
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	6f 31       	cpi	r22, 0x1F	; 31
     a20:	71 05       	cpc	r23, r1
     a22:	31 f7       	brne	.-52     	; 0x9f0 <__divsf3+0xda>
     a24:	da 01       	movw	r26, r20
     a26:	c9 01       	movw	r24, r18
     a28:	8f 77       	andi	r24, 0x7F	; 127
     a2a:	90 70       	andi	r25, 0x00	; 0
     a2c:	a0 70       	andi	r26, 0x00	; 0
     a2e:	b0 70       	andi	r27, 0x00	; 0
     a30:	80 34       	cpi	r24, 0x40	; 64
     a32:	91 05       	cpc	r25, r1
     a34:	a1 05       	cpc	r26, r1
     a36:	b1 05       	cpc	r27, r1
     a38:	61 f4       	brne	.+24     	; 0xa52 <__divsf3+0x13c>
     a3a:	27 fd       	sbrc	r18, 7
     a3c:	0a c0       	rjmp	.+20     	; 0xa52 <__divsf3+0x13c>
     a3e:	e1 14       	cp	r14, r1
     a40:	f1 04       	cpc	r15, r1
     a42:	01 05       	cpc	r16, r1
     a44:	11 05       	cpc	r17, r1
     a46:	29 f0       	breq	.+10     	; 0xa52 <__divsf3+0x13c>
     a48:	20 5c       	subi	r18, 0xC0	; 192
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	4f 4f       	sbci	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	20 78       	andi	r18, 0x80	; 128
     a52:	2d 87       	std	Y+13, r18	; 0x0d
     a54:	3e 87       	std	Y+14, r19	; 0x0e
     a56:	4f 87       	std	Y+15, r20	; 0x0f
     a58:	58 8b       	std	Y+16, r21	; 0x10
     a5a:	be 01       	movw	r22, r28
     a5c:	67 5f       	subi	r22, 0xF7	; 247
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	cb 01       	movw	r24, r22
     a62:	0e 94 1b 06 	call	0xc36	; 0xc36 <__pack_f>
     a66:	68 96       	adiw	r28, 0x18	; 24
     a68:	ea e0       	ldi	r30, 0x0A	; 10
     a6a:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__epilogue_restores__+0x10>

00000a6e <__gtsf2>:
     a6e:	a8 e1       	ldi	r26, 0x18	; 24
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x18>
     a7a:	69 83       	std	Y+1, r22	; 0x01
     a7c:	7a 83       	std	Y+2, r23	; 0x02
     a7e:	8b 83       	std	Y+3, r24	; 0x03
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	2d 83       	std	Y+5, r18	; 0x05
     a84:	3e 83       	std	Y+6, r19	; 0x06
     a86:	4f 83       	std	Y+7, r20	; 0x07
     a88:	58 87       	std	Y+8, r21	; 0x08
     a8a:	89 e0       	ldi	r24, 0x09	; 9
     a8c:	e8 2e       	mov	r14, r24
     a8e:	f1 2c       	mov	r15, r1
     a90:	ec 0e       	add	r14, r28
     a92:	fd 1e       	adc	r15, r29
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	b7 01       	movw	r22, r14
     a9a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     a9e:	8e 01       	movw	r16, r28
     aa0:	0f 5e       	subi	r16, 0xEF	; 239
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
     aa4:	ce 01       	movw	r24, r28
     aa6:	05 96       	adiw	r24, 0x05	; 5
     aa8:	b8 01       	movw	r22, r16
     aaa:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     aae:	89 85       	ldd	r24, Y+9	; 0x09
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	40 f0       	brcs	.+16     	; 0xac4 <__gtsf2+0x56>
     ab4:	89 89       	ldd	r24, Y+17	; 0x11
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	28 f0       	brcs	.+10     	; 0xac4 <__gtsf2+0x56>
     aba:	c7 01       	movw	r24, r14
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 68 07 	call	0xed0	; 0xed0 <__fpcmp_parts_f>
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__gtsf2+0x58>
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	68 96       	adiw	r28, 0x18	; 24
     ac8:	e6 e0       	ldi	r30, 0x06	; 6
     aca:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x18>

00000ace <__gesf2>:
     ace:	a8 e1       	ldi	r26, 0x18	; 24
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x18>
     ada:	69 83       	std	Y+1, r22	; 0x01
     adc:	7a 83       	std	Y+2, r23	; 0x02
     ade:	8b 83       	std	Y+3, r24	; 0x03
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	2d 83       	std	Y+5, r18	; 0x05
     ae4:	3e 83       	std	Y+6, r19	; 0x06
     ae6:	4f 83       	std	Y+7, r20	; 0x07
     ae8:	58 87       	std	Y+8, r21	; 0x08
     aea:	89 e0       	ldi	r24, 0x09	; 9
     aec:	e8 2e       	mov	r14, r24
     aee:	f1 2c       	mov	r15, r1
     af0:	ec 0e       	add	r14, r28
     af2:	fd 1e       	adc	r15, r29
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	b7 01       	movw	r22, r14
     afa:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     afe:	8e 01       	movw	r16, r28
     b00:	0f 5e       	subi	r16, 0xEF	; 239
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	ce 01       	movw	r24, r28
     b06:	05 96       	adiw	r24, 0x05	; 5
     b08:	b8 01       	movw	r22, r16
     b0a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     b0e:	89 85       	ldd	r24, Y+9	; 0x09
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	40 f0       	brcs	.+16     	; 0xb24 <__gesf2+0x56>
     b14:	89 89       	ldd	r24, Y+17	; 0x11
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	28 f0       	brcs	.+10     	; 0xb24 <__gesf2+0x56>
     b1a:	c7 01       	movw	r24, r14
     b1c:	b8 01       	movw	r22, r16
     b1e:	0e 94 68 07 	call	0xed0	; 0xed0 <__fpcmp_parts_f>
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <__gesf2+0x58>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	68 96       	adiw	r28, 0x18	; 24
     b28:	e6 e0       	ldi	r30, 0x06	; 6
     b2a:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x18>

00000b2e <__ltsf2>:
     b2e:	a8 e1       	ldi	r26, 0x18	; 24
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x18>
     b3a:	69 83       	std	Y+1, r22	; 0x01
     b3c:	7a 83       	std	Y+2, r23	; 0x02
     b3e:	8b 83       	std	Y+3, r24	; 0x03
     b40:	9c 83       	std	Y+4, r25	; 0x04
     b42:	2d 83       	std	Y+5, r18	; 0x05
     b44:	3e 83       	std	Y+6, r19	; 0x06
     b46:	4f 83       	std	Y+7, r20	; 0x07
     b48:	58 87       	std	Y+8, r21	; 0x08
     b4a:	89 e0       	ldi	r24, 0x09	; 9
     b4c:	e8 2e       	mov	r14, r24
     b4e:	f1 2c       	mov	r15, r1
     b50:	ec 0e       	add	r14, r28
     b52:	fd 1e       	adc	r15, r29
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	b7 01       	movw	r22, r14
     b5a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     b5e:	8e 01       	movw	r16, r28
     b60:	0f 5e       	subi	r16, 0xEF	; 239
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
     b64:	ce 01       	movw	r24, r28
     b66:	05 96       	adiw	r24, 0x05	; 5
     b68:	b8 01       	movw	r22, r16
     b6a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	40 f0       	brcs	.+16     	; 0xb84 <__ltsf2+0x56>
     b74:	89 89       	ldd	r24, Y+17	; 0x11
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	28 f0       	brcs	.+10     	; 0xb84 <__ltsf2+0x56>
     b7a:	c7 01       	movw	r24, r14
     b7c:	b8 01       	movw	r22, r16
     b7e:	0e 94 68 07 	call	0xed0	; 0xed0 <__fpcmp_parts_f>
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <__ltsf2+0x58>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	68 96       	adiw	r28, 0x18	; 24
     b88:	e6 e0       	ldi	r30, 0x06	; 6
     b8a:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x18>

00000b8e <__fixsfsi>:
     b8e:	ac e0       	ldi	r26, 0x0C	; 12
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ed ec       	ldi	r30, 0xCD	; 205
     b94:	f5 e0       	ldi	r31, 0x05	; 5
     b96:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x20>
     b9a:	69 83       	std	Y+1, r22	; 0x01
     b9c:	7a 83       	std	Y+2, r23	; 0x02
     b9e:	8b 83       	std	Y+3, r24	; 0x03
     ba0:	9c 83       	std	Y+4, r25	; 0x04
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	be 01       	movw	r22, r28
     ba8:	6b 5f       	subi	r22, 0xFB	; 251
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	0e 94 f0 06 	call	0xde0	; 0xde0 <__unpack_f>
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	61 f1       	breq	.+88     	; 0xc0e <__fixsfsi+0x80>
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	50 f1       	brcs	.+84     	; 0xc0e <__fixsfsi+0x80>
     bba:	84 30       	cpi	r24, 0x04	; 4
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <__fixsfsi+0x38>
     bbe:	8e 81       	ldd	r24, Y+6	; 0x06
     bc0:	88 23       	and	r24, r24
     bc2:	51 f1       	breq	.+84     	; 0xc18 <__fixsfsi+0x8a>
     bc4:	2e c0       	rjmp	.+92     	; 0xc22 <__fixsfsi+0x94>
     bc6:	2f 81       	ldd	r18, Y+7	; 0x07
     bc8:	38 85       	ldd	r19, Y+8	; 0x08
     bca:	37 fd       	sbrc	r19, 7
     bcc:	20 c0       	rjmp	.+64     	; 0xc0e <__fixsfsi+0x80>
     bce:	6e 81       	ldd	r22, Y+6	; 0x06
     bd0:	2f 31       	cpi	r18, 0x1F	; 31
     bd2:	31 05       	cpc	r19, r1
     bd4:	1c f0       	brlt	.+6      	; 0xbdc <__fixsfsi+0x4e>
     bd6:	66 23       	and	r22, r22
     bd8:	f9 f0       	breq	.+62     	; 0xc18 <__fixsfsi+0x8a>
     bda:	23 c0       	rjmp	.+70     	; 0xc22 <__fixsfsi+0x94>
     bdc:	8e e1       	ldi	r24, 0x1E	; 30
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	82 1b       	sub	r24, r18
     be2:	93 0b       	sbc	r25, r19
     be4:	29 85       	ldd	r18, Y+9	; 0x09
     be6:	3a 85       	ldd	r19, Y+10	; 0x0a
     be8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bea:	5c 85       	ldd	r21, Y+12	; 0x0c
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <__fixsfsi+0x68>
     bee:	56 95       	lsr	r21
     bf0:	47 95       	ror	r20
     bf2:	37 95       	ror	r19
     bf4:	27 95       	ror	r18
     bf6:	8a 95       	dec	r24
     bf8:	d2 f7       	brpl	.-12     	; 0xbee <__fixsfsi+0x60>
     bfa:	66 23       	and	r22, r22
     bfc:	b1 f0       	breq	.+44     	; 0xc2a <__fixsfsi+0x9c>
     bfe:	50 95       	com	r21
     c00:	40 95       	com	r20
     c02:	30 95       	com	r19
     c04:	21 95       	neg	r18
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	4f 4f       	sbci	r20, 0xFF	; 255
     c0a:	5f 4f       	sbci	r21, 0xFF	; 255
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <__fixsfsi+0x9c>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	09 c0       	rjmp	.+18     	; 0xc2a <__fixsfsi+0x9c>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f ef       	ldi	r20, 0xFF	; 255
     c1e:	5f e7       	ldi	r21, 0x7F	; 127
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__fixsfsi+0x9c>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e8       	ldi	r21, 0x80	; 128
     c2a:	b9 01       	movw	r22, r18
     c2c:	ca 01       	movw	r24, r20
     c2e:	2c 96       	adiw	r28, 0x0c	; 12
     c30:	e2 e0       	ldi	r30, 0x02	; 2
     c32:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x20>

00000c36 <__pack_f>:
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	fc 01       	movw	r30, r24
     c42:	e4 80       	ldd	r14, Z+4	; 0x04
     c44:	f5 80       	ldd	r15, Z+5	; 0x05
     c46:	06 81       	ldd	r16, Z+6	; 0x06
     c48:	17 81       	ldd	r17, Z+7	; 0x07
     c4a:	d1 80       	ldd	r13, Z+1	; 0x01
     c4c:	80 81       	ld	r24, Z
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	48 f4       	brcc	.+18     	; 0xc64 <__pack_f+0x2e>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a0 e1       	ldi	r26, 0x10	; 16
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e8 2a       	or	r14, r24
     c5c:	f9 2a       	or	r15, r25
     c5e:	0a 2b       	or	r16, r26
     c60:	1b 2b       	or	r17, r27
     c62:	a5 c0       	rjmp	.+330    	; 0xdae <__pack_f+0x178>
     c64:	84 30       	cpi	r24, 0x04	; 4
     c66:	09 f4       	brne	.+2      	; 0xc6a <__pack_f+0x34>
     c68:	9f c0       	rjmp	.+318    	; 0xda8 <__pack_f+0x172>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	21 f4       	brne	.+8      	; 0xc76 <__pack_f+0x40>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <__pack_f+0x4a>
     c76:	e1 14       	cp	r14, r1
     c78:	f1 04       	cpc	r15, r1
     c7a:	01 05       	cpc	r16, r1
     c7c:	11 05       	cpc	r17, r1
     c7e:	19 f4       	brne	.+6      	; 0xc86 <__pack_f+0x50>
     c80:	e0 e0       	ldi	r30, 0x00	; 0
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	96 c0       	rjmp	.+300    	; 0xdb2 <__pack_f+0x17c>
     c86:	62 81       	ldd	r22, Z+2	; 0x02
     c88:	73 81       	ldd	r23, Z+3	; 0x03
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	62 38       	cpi	r22, 0x82	; 130
     c8e:	79 07       	cpc	r23, r25
     c90:	0c f0       	brlt	.+2      	; 0xc94 <__pack_f+0x5e>
     c92:	5b c0       	rjmp	.+182    	; 0xd4a <__pack_f+0x114>
     c94:	22 e8       	ldi	r18, 0x82	; 130
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	26 1b       	sub	r18, r22
     c9a:	37 0b       	sbc	r19, r23
     c9c:	2a 31       	cpi	r18, 0x1A	; 26
     c9e:	31 05       	cpc	r19, r1
     ca0:	2c f0       	brlt	.+10     	; 0xcac <__pack_f+0x76>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	2a c0       	rjmp	.+84     	; 0xd00 <__pack_f+0xca>
     cac:	b8 01       	movw	r22, r16
     cae:	a7 01       	movw	r20, r14
     cb0:	02 2e       	mov	r0, r18
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <__pack_f+0x86>
     cb4:	76 95       	lsr	r23
     cb6:	67 95       	ror	r22
     cb8:	57 95       	ror	r21
     cba:	47 95       	ror	r20
     cbc:	0a 94       	dec	r0
     cbe:	d2 f7       	brpl	.-12     	; 0xcb4 <__pack_f+0x7e>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0x9c>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	2a 95       	dec	r18
     cd4:	d2 f7       	brpl	.-12     	; 0xcca <__pack_f+0x94>
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	a1 09       	sbc	r26, r1
     cda:	b1 09       	sbc	r27, r1
     cdc:	8e 21       	and	r24, r14
     cde:	9f 21       	and	r25, r15
     ce0:	a0 23       	and	r26, r16
     ce2:	b1 23       	and	r27, r17
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	a1 05       	cpc	r26, r1
     ce8:	b1 05       	cpc	r27, r1
     cea:	21 f0       	breq	.+8      	; 0xcf4 <__pack_f+0xbe>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	28 2b       	or	r18, r24
     cfa:	39 2b       	or	r19, r25
     cfc:	4a 2b       	or	r20, r26
     cfe:	5b 2b       	or	r21, r27
     d00:	da 01       	movw	r26, r20
     d02:	c9 01       	movw	r24, r18
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	a0 70       	andi	r26, 0x00	; 0
     d0a:	b0 70       	andi	r27, 0x00	; 0
     d0c:	80 34       	cpi	r24, 0x40	; 64
     d0e:	91 05       	cpc	r25, r1
     d10:	a1 05       	cpc	r26, r1
     d12:	b1 05       	cpc	r27, r1
     d14:	39 f4       	brne	.+14     	; 0xd24 <__pack_f+0xee>
     d16:	27 ff       	sbrs	r18, 7
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <__pack_f+0xf6>
     d1a:	20 5c       	subi	r18, 0xC0	; 192
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	4f 4f       	sbci	r20, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__pack_f+0xf6>
     d24:	21 5c       	subi	r18, 0xC1	; 193
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	4f 4f       	sbci	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	e0 e0       	ldi	r30, 0x00	; 0
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	20 30       	cpi	r18, 0x00	; 0
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	3a 07       	cpc	r19, r26
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	4a 07       	cpc	r20, r26
     d3a:	a0 e4       	ldi	r26, 0x40	; 64
     d3c:	5a 07       	cpc	r21, r26
     d3e:	10 f0       	brcs	.+4      	; 0xd44 <__pack_f+0x10e>
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	79 01       	movw	r14, r18
     d46:	8a 01       	movw	r16, r20
     d48:	27 c0       	rjmp	.+78     	; 0xd98 <__pack_f+0x162>
     d4a:	60 38       	cpi	r22, 0x80	; 128
     d4c:	71 05       	cpc	r23, r1
     d4e:	64 f5       	brge	.+88     	; 0xda8 <__pack_f+0x172>
     d50:	fb 01       	movw	r30, r22
     d52:	e1 58       	subi	r30, 0x81	; 129
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	d8 01       	movw	r26, r16
     d58:	c7 01       	movw	r24, r14
     d5a:	8f 77       	andi	r24, 0x7F	; 127
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	a0 70       	andi	r26, 0x00	; 0
     d60:	b0 70       	andi	r27, 0x00	; 0
     d62:	80 34       	cpi	r24, 0x40	; 64
     d64:	91 05       	cpc	r25, r1
     d66:	a1 05       	cpc	r26, r1
     d68:	b1 05       	cpc	r27, r1
     d6a:	39 f4       	brne	.+14     	; 0xd7a <__pack_f+0x144>
     d6c:	e7 fe       	sbrs	r14, 7
     d6e:	0d c0       	rjmp	.+26     	; 0xd8a <__pack_f+0x154>
     d70:	80 e4       	ldi	r24, 0x40	; 64
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <__pack_f+0x14c>
     d7a:	8f e3       	ldi	r24, 0x3F	; 63
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a0 e0       	ldi	r26, 0x00	; 0
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e8 0e       	add	r14, r24
     d84:	f9 1e       	adc	r15, r25
     d86:	0a 1f       	adc	r16, r26
     d88:	1b 1f       	adc	r17, r27
     d8a:	17 ff       	sbrs	r17, 7
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <__pack_f+0x162>
     d8e:	16 95       	lsr	r17
     d90:	07 95       	ror	r16
     d92:	f7 94       	ror	r15
     d94:	e7 94       	ror	r14
     d96:	31 96       	adiw	r30, 0x01	; 1
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	16 95       	lsr	r17
     d9c:	07 95       	ror	r16
     d9e:	f7 94       	ror	r15
     da0:	e7 94       	ror	r14
     da2:	8a 95       	dec	r24
     da4:	d1 f7       	brne	.-12     	; 0xd9a <__pack_f+0x164>
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <__pack_f+0x17c>
     da8:	ee 24       	eor	r14, r14
     daa:	ff 24       	eor	r15, r15
     dac:	87 01       	movw	r16, r14
     dae:	ef ef       	ldi	r30, 0xFF	; 255
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	6e 2f       	mov	r22, r30
     db4:	67 95       	ror	r22
     db6:	66 27       	eor	r22, r22
     db8:	67 95       	ror	r22
     dba:	90 2f       	mov	r25, r16
     dbc:	9f 77       	andi	r25, 0x7F	; 127
     dbe:	d7 94       	ror	r13
     dc0:	dd 24       	eor	r13, r13
     dc2:	d7 94       	ror	r13
     dc4:	8e 2f       	mov	r24, r30
     dc6:	86 95       	lsr	r24
     dc8:	49 2f       	mov	r20, r25
     dca:	46 2b       	or	r20, r22
     dcc:	58 2f       	mov	r21, r24
     dce:	5d 29       	or	r21, r13
     dd0:	b7 01       	movw	r22, r14
     dd2:	ca 01       	movw	r24, r20
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	08 95       	ret

00000de0 <__unpack_f>:
     de0:	fc 01       	movw	r30, r24
     de2:	db 01       	movw	r26, r22
     de4:	40 81       	ld	r20, Z
     de6:	51 81       	ldd	r21, Z+1	; 0x01
     de8:	22 81       	ldd	r18, Z+2	; 0x02
     dea:	62 2f       	mov	r22, r18
     dec:	6f 77       	andi	r22, 0x7F	; 127
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	22 1f       	adc	r18, r18
     df2:	22 27       	eor	r18, r18
     df4:	22 1f       	adc	r18, r18
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	89 2f       	mov	r24, r25
     dfa:	88 0f       	add	r24, r24
     dfc:	82 2b       	or	r24, r18
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	99 1f       	adc	r25, r25
     e04:	99 27       	eor	r25, r25
     e06:	99 1f       	adc	r25, r25
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	9c 93       	st	X, r25
     e0c:	11 97       	sbiw	r26, 0x01	; 1
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	a9 f5       	brne	.+106    	; 0xe7e <__unpack_f+0x9e>
     e14:	41 15       	cp	r20, r1
     e16:	51 05       	cpc	r21, r1
     e18:	61 05       	cpc	r22, r1
     e1a:	71 05       	cpc	r23, r1
     e1c:	11 f4       	brne	.+4      	; 0xe22 <__unpack_f+0x42>
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	37 c0       	rjmp	.+110    	; 0xe90 <__unpack_f+0xb0>
     e22:	82 e8       	ldi	r24, 0x82	; 130
     e24:	9f ef       	ldi	r25, 0xFF	; 255
     e26:	13 96       	adiw	r26, 0x03	; 3
     e28:	9c 93       	st	X, r25
     e2a:	8e 93       	st	-X, r24
     e2c:	12 97       	sbiw	r26, 0x02	; 2
     e2e:	9a 01       	movw	r18, r20
     e30:	ab 01       	movw	r20, r22
     e32:	67 e0       	ldi	r22, 0x07	; 7
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	6a 95       	dec	r22
     e3e:	d1 f7       	brne	.-12     	; 0xe34 <__unpack_f+0x54>
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	8c 93       	st	X, r24
     e44:	0d c0       	rjmp	.+26     	; 0xe60 <__unpack_f+0x80>
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	44 1f       	adc	r20, r20
     e4c:	55 1f       	adc	r21, r21
     e4e:	12 96       	adiw	r26, 0x02	; 2
     e50:	8d 91       	ld	r24, X+
     e52:	9c 91       	ld	r25, X
     e54:	13 97       	sbiw	r26, 0x03	; 3
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	9c 93       	st	X, r25
     e5c:	8e 93       	st	-X, r24
     e5e:	12 97       	sbiw	r26, 0x02	; 2
     e60:	20 30       	cpi	r18, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	38 07       	cpc	r19, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	48 07       	cpc	r20, r24
     e6a:	80 e4       	ldi	r24, 0x40	; 64
     e6c:	58 07       	cpc	r21, r24
     e6e:	58 f3       	brcs	.-42     	; 0xe46 <__unpack_f+0x66>
     e70:	14 96       	adiw	r26, 0x04	; 4
     e72:	2d 93       	st	X+, r18
     e74:	3d 93       	st	X+, r19
     e76:	4d 93       	st	X+, r20
     e78:	5c 93       	st	X, r21
     e7a:	17 97       	sbiw	r26, 0x07	; 7
     e7c:	08 95       	ret
     e7e:	2f 3f       	cpi	r18, 0xFF	; 255
     e80:	31 05       	cpc	r19, r1
     e82:	79 f4       	brne	.+30     	; 0xea2 <__unpack_f+0xc2>
     e84:	41 15       	cp	r20, r1
     e86:	51 05       	cpc	r21, r1
     e88:	61 05       	cpc	r22, r1
     e8a:	71 05       	cpc	r23, r1
     e8c:	19 f4       	brne	.+6      	; 0xe94 <__unpack_f+0xb4>
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	8c 93       	st	X, r24
     e92:	08 95       	ret
     e94:	64 ff       	sbrs	r22, 4
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <__unpack_f+0xbe>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	8c 93       	st	X, r24
     e9c:	12 c0       	rjmp	.+36     	; 0xec2 <__unpack_f+0xe2>
     e9e:	1c 92       	st	X, r1
     ea0:	10 c0       	rjmp	.+32     	; 0xec2 <__unpack_f+0xe2>
     ea2:	2f 57       	subi	r18, 0x7F	; 127
     ea4:	30 40       	sbci	r19, 0x00	; 0
     ea6:	13 96       	adiw	r26, 0x03	; 3
     ea8:	3c 93       	st	X, r19
     eaa:	2e 93       	st	-X, r18
     eac:	12 97       	sbiw	r26, 0x02	; 2
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	8c 93       	st	X, r24
     eb2:	87 e0       	ldi	r24, 0x07	; 7
     eb4:	44 0f       	add	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	66 1f       	adc	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	8a 95       	dec	r24
     ebe:	d1 f7       	brne	.-12     	; 0xeb4 <__unpack_f+0xd4>
     ec0:	70 64       	ori	r23, 0x40	; 64
     ec2:	14 96       	adiw	r26, 0x04	; 4
     ec4:	4d 93       	st	X+, r20
     ec6:	5d 93       	st	X+, r21
     ec8:	6d 93       	st	X+, r22
     eca:	7c 93       	st	X, r23
     ecc:	17 97       	sbiw	r26, 0x07	; 7
     ece:	08 95       	ret

00000ed0 <__fpcmp_parts_f>:
     ed0:	1f 93       	push	r17
     ed2:	dc 01       	movw	r26, r24
     ed4:	fb 01       	movw	r30, r22
     ed6:	9c 91       	ld	r25, X
     ed8:	92 30       	cpi	r25, 0x02	; 2
     eda:	08 f4       	brcc	.+2      	; 0xede <__fpcmp_parts_f+0xe>
     edc:	47 c0       	rjmp	.+142    	; 0xf6c <__fpcmp_parts_f+0x9c>
     ede:	80 81       	ld	r24, Z
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	08 f4       	brcc	.+2      	; 0xee6 <__fpcmp_parts_f+0x16>
     ee4:	43 c0       	rjmp	.+134    	; 0xf6c <__fpcmp_parts_f+0x9c>
     ee6:	94 30       	cpi	r25, 0x04	; 4
     ee8:	51 f4       	brne	.+20     	; 0xefe <__fpcmp_parts_f+0x2e>
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	1c 91       	ld	r17, X
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	99 f5       	brne	.+102    	; 0xf58 <__fpcmp_parts_f+0x88>
     ef2:	81 81       	ldd	r24, Z+1	; 0x01
     ef4:	68 2f       	mov	r22, r24
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	61 1b       	sub	r22, r17
     efa:	71 09       	sbc	r23, r1
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <__fpcmp_parts_f+0xac>
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	21 f0       	breq	.+8      	; 0xf0a <__fpcmp_parts_f+0x3a>
     f02:	92 30       	cpi	r25, 0x02	; 2
     f04:	31 f4       	brne	.+12     	; 0xf12 <__fpcmp_parts_f+0x42>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	b9 f1       	breq	.+110    	; 0xf78 <__fpcmp_parts_f+0xa8>
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	88 23       	and	r24, r24
     f0e:	89 f1       	breq	.+98     	; 0xf72 <__fpcmp_parts_f+0xa2>
     f10:	2d c0       	rjmp	.+90     	; 0xf6c <__fpcmp_parts_f+0x9c>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	11 97       	sbiw	r26, 0x01	; 1
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	f1 f0       	breq	.+60     	; 0xf58 <__fpcmp_parts_f+0x88>
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	18 17       	cp	r17, r24
     f20:	d9 f4       	brne	.+54     	; 0xf58 <__fpcmp_parts_f+0x88>
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	2d 91       	ld	r18, X+
     f26:	3c 91       	ld	r19, X
     f28:	13 97       	sbiw	r26, 0x03	; 3
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	94 f0       	brlt	.+36     	; 0xf58 <__fpcmp_parts_f+0x88>
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	bc f0       	brlt	.+46     	; 0xf68 <__fpcmp_parts_f+0x98>
     f3a:	14 96       	adiw	r26, 0x04	; 4
     f3c:	8d 91       	ld	r24, X+
     f3e:	9d 91       	ld	r25, X+
     f40:	0d 90       	ld	r0, X+
     f42:	bc 91       	ld	r27, X
     f44:	a0 2d       	mov	r26, r0
     f46:	24 81       	ldd	r18, Z+4	; 0x04
     f48:	35 81       	ldd	r19, Z+5	; 0x05
     f4a:	46 81       	ldd	r20, Z+6	; 0x06
     f4c:	57 81       	ldd	r21, Z+7	; 0x07
     f4e:	28 17       	cp	r18, r24
     f50:	39 07       	cpc	r19, r25
     f52:	4a 07       	cpc	r20, r26
     f54:	5b 07       	cpc	r21, r27
     f56:	18 f4       	brcc	.+6      	; 0xf5e <__fpcmp_parts_f+0x8e>
     f58:	11 23       	and	r17, r17
     f5a:	41 f0       	breq	.+16     	; 0xf6c <__fpcmp_parts_f+0x9c>
     f5c:	0a c0       	rjmp	.+20     	; 0xf72 <__fpcmp_parts_f+0xa2>
     f5e:	82 17       	cp	r24, r18
     f60:	93 07       	cpc	r25, r19
     f62:	a4 07       	cpc	r26, r20
     f64:	b5 07       	cpc	r27, r21
     f66:	40 f4       	brcc	.+16     	; 0xf78 <__fpcmp_parts_f+0xa8>
     f68:	11 23       	and	r17, r17
     f6a:	19 f0       	breq	.+6      	; 0xf72 <__fpcmp_parts_f+0xa2>
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <__fpcmp_parts_f+0xac>
     f72:	6f ef       	ldi	r22, 0xFF	; 255
     f74:	7f ef       	ldi	r23, 0xFF	; 255
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <__fpcmp_parts_f+0xac>
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	cb 01       	movw	r24, r22
     f7e:	1f 91       	pop	r17
     f80:	08 95       	ret

00000f82 <ADC_ViodInit>:
/************************************************************/
#include "STD_TYPES.h"
#include "BIT_MATHS.h"
#include "ADC_Register.h"
void ADC_ViodInit(void)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	//select Vref = Avcc =5v
	SET_BIT(ADMUX,REFS0);
     f8a:	a7 e2       	ldi	r26, 0x27	; 39
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e2       	ldi	r30, 0x27	; 39
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 64       	ori	r24, 0x40	; 64
     f96:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     f98:	a7 e2       	ldi	r26, 0x27	; 39
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e7 e2       	ldi	r30, 0x27	; 39
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	8c 93       	st	X, r24
	
	// ADC Data Right Adjustment
	CLR_BIT(ADMUX,ADLAR);
     fa6:	a7 e2       	ldi	r26, 0x27	; 39
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7d       	andi	r24, 0xDF	; 223
     fb2:	8c 93       	st	X, r24
	
	//Enable ADC
	SET_BIT(ADCSRA,ADEN);
     fb4:	a6 e2       	ldi	r26, 0x26	; 38
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e6 e2       	ldi	r30, 0x26	; 38
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 68       	ori	r24, 0x80	; 128
     fc0:	8c 93       	st	X, r24
	
	//Single conversion
	SET_BIT(ADCSRA,ADATE);
     fc2:	a6 e2       	ldi	r26, 0x26	; 38
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e6 e2       	ldi	r30, 0x26	; 38
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	8c 93       	st	X, r24
	
	//Disable ADC enable
	CLR_BIT(ADCSRA,ADIE);
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	8c 93       	st	X, r24
	
	//Prescaller 64
	CLR_BIT(ADCSRA,ADPS0);
     fde:	a6 e2       	ldi	r26, 0x26	; 38
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e6 e2       	ldi	r30, 0x26	; 38
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8e 7f       	andi	r24, 0xFE	; 254
     fea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     fec:	a6 e2       	ldi	r26, 0x26	; 38
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e6 e2       	ldi	r30, 0x26	; 38
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     ffa:	a6 e2       	ldi	r26, 0x26	; 38
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e6 e2       	ldi	r30, 0x26	; 38
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	84 60       	ori	r24, 0x04	; 4
    1006:	8c 93       	st	X, r24
	
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <ADC_U16ReadValue>:
u16 ADC_U16ReadValue(u8 channel)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
	// ADC Channel Selection
	ADMUX &= 0xE0;
    101a:	a7 e2       	ldi	r26, 0x27	; 39
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e7 e2       	ldi	r30, 0x27	; 39
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 7e       	andi	r24, 0xE0	; 224
    1026:	8c 93       	st	X, r24
	ADMUX |=channel;
    1028:	a7 e2       	ldi	r26, 0x27	; 39
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e7 e2       	ldi	r30, 0x27	; 39
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	90 81       	ld	r25, Z
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	89 2b       	or	r24, r25
    1036:	8c 93       	st	X, r24
	
	// Start Single Convertion
	SET_BIT(ADCSRA,ADSC);
    1038:	a6 e2       	ldi	r26, 0x26	; 38
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e6 e2       	ldi	r30, 0x26	; 38
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 64       	ori	r24, 0x40	; 64
    1044:	8c 93       	st	X, r24
	
	//wait for the conversion
	while (GET_BIT(ADCSRA,ADIF)==0)
    1046:	e6 e2       	ldi	r30, 0x26	; 38
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	82 95       	swap	r24
    104e:	8f 70       	andi	r24, 0x0F	; 15
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	a9 f3       	breq	.-22     	; 0x1046 <ADC_U16ReadValue+0x38>
	{
		
	}
	
	// clear flag
	CLR_BIT(ADCSRA,ADIF);
    105c:	a6 e2       	ldi	r26, 0x26	; 38
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e6 e2       	ldi	r30, 0x26	; 38
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7e       	andi	r24, 0xEF	; 239
    1068:	8c 93       	st	X, r24
	return ADC_D;
    106a:	e4 e2       	ldi	r30, 0x24	; 36
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <DIO_VoidSetPinDirection>:
#include "BIT_MATHS.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

void DIO_VoidSetPinDirection(u8 Port,u8 Pin,u8 Direction)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	27 97       	sbiw	r28, 0x07	; 7
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6a 83       	std	Y+2, r22	; 0x02
    1092:	4b 83       	std	Y+3, r20	; 0x03
	if (OUTPUT_PIN == Direction)//output
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	09 f0       	breq	.+2      	; 0x109c <DIO_VoidSetPinDirection+0x22>
    109a:	6f c0       	rjmp	.+222    	; 0x117a <DIO_VoidSetPinDirection+0x100>
	{
		switch(Port)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3f 83       	std	Y+7, r19	; 0x07
    10a4:	2e 83       	std	Y+6, r18	; 0x06
    10a6:	8e 81       	ldd	r24, Y+6	; 0x06
    10a8:	9f 81       	ldd	r25, Y+7	; 0x07
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	49 f1       	breq	.+82     	; 0x1102 <DIO_VoidSetPinDirection+0x88>
    10b0:	2e 81       	ldd	r18, Y+6	; 0x06
    10b2:	3f 81       	ldd	r19, Y+7	; 0x07
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <DIO_VoidSetPinDirection+0x4a>
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	61 f0       	breq	.+24     	; 0x10da <DIO_VoidSetPinDirection+0x60>
    10c2:	d2 c0       	rjmp	.+420    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	71 f1       	breq	.+92     	; 0x112a <DIO_VoidSetPinDirection+0xb0>
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	e9 f1       	breq	.+122    	; 0x1152 <DIO_VoidSetPinDirection+0xd8>
    10d8:	c7 c0       	rjmp	.+398    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
		{
			case PORT_A: SET_BIT(DDRA,Pin); break;
    10da:	aa e3       	ldi	r26, 0x3A	; 58
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ea e3       	ldi	r30, 0x3A	; 58
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_VoidSetPinDirection+0x7e>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_VoidSetPinDirection+0x7a>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	b3 c0       	rjmp	.+358    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
			case PORT_B: SET_BIT(DDRB,Pin); break;
    1102:	a7 e3       	ldi	r26, 0x37	; 55
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e7 e3       	ldi	r30, 0x37	; 55
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_VoidSetPinDirection+0xa6>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_VoidSetPinDirection+0xa2>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	9f c0       	rjmp	.+318    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
			case PORT_C: SET_BIT(DDRC,Pin); break;
    112a:	a4 e3       	ldi	r26, 0x34	; 52
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e4 e3       	ldi	r30, 0x34	; 52
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_VoidSetPinDirection+0xce>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_VoidSetPinDirection+0xca>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	8b c0       	rjmp	.+278    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
			case PORT_D: SET_BIT(DDRD,Pin); break;
    1152:	a1 e3       	ldi	r26, 0x31	; 49
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e1 e3       	ldi	r30, 0x31	; 49
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_VoidSetPinDirection+0xf6>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_VoidSetPinDirection+0xf2>
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	77 c0       	rjmp	.+238    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
		}
	}
	else if(INPUT_PIN == Direction) //input
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 23       	and	r24, r24
    117e:	09 f0       	breq	.+2      	; 0x1182 <DIO_VoidSetPinDirection+0x108>
    1180:	73 c0       	rjmp	.+230    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
	{
		switch(Port)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3d 83       	std	Y+5, r19	; 0x05
    118a:	2c 83       	std	Y+4, r18	; 0x04
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	59 f1       	breq	.+86     	; 0x11ec <DIO_VoidSetPinDirection+0x172>
    1196:	2c 81       	ldd	r18, Y+4	; 0x04
    1198:	3d 81       	ldd	r19, Y+5	; 0x05
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	2c f4       	brge	.+10     	; 0x11aa <DIO_VoidSetPinDirection+0x130>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	69 f0       	breq	.+26     	; 0x11c2 <DIO_VoidSetPinDirection+0x148>
    11a8:	5f c0       	rjmp	.+190    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
    11aa:	2c 81       	ldd	r18, Y+4	; 0x04
    11ac:	3d 81       	ldd	r19, Y+5	; 0x05
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	89 f1       	breq	.+98     	; 0x1216 <DIO_VoidSetPinDirection+0x19c>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <DIO_VoidSetPinDirection+0x146>
    11be:	40 c0       	rjmp	.+128    	; 0x1240 <DIO_VoidSetPinDirection+0x1c6>
    11c0:	53 c0       	rjmp	.+166    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
		{
			case PORT_A: CLR_BIT(DDRA,Pin); break;
    11c2:	aa e3       	ldi	r26, 0x3A	; 58
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	ea e3       	ldi	r30, 0x3A	; 58
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_VoidSetPinDirection+0x166>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_VoidSetPinDirection+0x162>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	3e c0       	rjmp	.+124    	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
			case PORT_B: CLR_BIT(DDRB,Pin); break;
    11ec:	a7 e3       	ldi	r26, 0x37	; 55
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e7 e3       	ldi	r30, 0x37	; 55
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_VoidSetPinDirection+0x190>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_VoidSetPinDirection+0x18c>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	29 c0       	rjmp	.+82     	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
			case PORT_C: CLR_BIT(DDRC,Pin); break;
    1216:	a4 e3       	ldi	r26, 0x34	; 52
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_VoidSetPinDirection+0x1ba>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_VoidSetPinDirection+0x1b6>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <DIO_VoidSetPinDirection+0x1ee>
			case PORT_D: CLR_BIT(DDRD,Pin); break;
    1240:	a1 e3       	ldi	r26, 0x31	; 49
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e1 e3       	ldi	r30, 0x31	; 49
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_VoidSetPinDirection+0x1e4>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_VoidSetPinDirection+0x1e0>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
			
		}
	}
}
    1268:	27 96       	adiw	r28, 0x07	; 7
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Port,u8 Direction)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_VoidSetPortDirection+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_VoidSetPortDirection+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	d1 f0       	breq	.+52     	; 0x12d2 <DIO_VoidSetPortDirection+0x58>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <DIO_VoidSetPortDirection+0x38>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <DIO_VoidSetPortDirection+0x4e>
    12b0:	1e c0       	rjmp	.+60     	; 0x12ee <DIO_VoidSetPortDirection+0x74>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <DIO_VoidSetPortDirection+0x62>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_VoidSetPortDirection+0x6c>
    12c6:	13 c0       	rjmp	.+38     	; 0x12ee <DIO_VoidSetPortDirection+0x74>
	{
		case PORT_A: DDRA=Direction; break;
    12c8:	ea e3       	ldi	r30, 0x3A	; 58
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <DIO_VoidSetPortDirection+0x74>
		case PORT_B: DDRB=Direction; break;
    12d2:	e7 e3       	ldi	r30, 0x37	; 55
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <DIO_VoidSetPortDirection+0x74>
		case PORT_C: DDRC=Direction; break;
    12dc:	e4 e3       	ldi	r30, 0x34	; 52
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <DIO_VoidSetPortDirection+0x74>
		case PORT_D: DDRD=Direction; break;
    12e6:	e1 e3       	ldi	r30, 0x31	; 49
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
	}
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DIO_VoidSetPinValue>:


void DIO_VoidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	27 97       	sbiw	r28, 0x07	; 7
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	6a 83       	std	Y+2, r22	; 0x02
    1314:	4b 83       	std	Y+3, r20	; 0x03
	if (HIGH==Value)//set
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	09 f0       	breq	.+2      	; 0x131e <DIO_VoidSetPinValue+0x22>
    131c:	6f c0       	rjmp	.+222    	; 0x13fc <DIO_VoidSetPinValue+0x100>
	{
		switch(Port)
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3f 83       	std	Y+7, r19	; 0x07
    1326:	2e 83       	std	Y+6, r18	; 0x06
    1328:	8e 81       	ldd	r24, Y+6	; 0x06
    132a:	9f 81       	ldd	r25, Y+7	; 0x07
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	49 f1       	breq	.+82     	; 0x1384 <DIO_VoidSetPinValue+0x88>
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	3f 81       	ldd	r19, Y+7	; 0x07
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	2c f4       	brge	.+10     	; 0x1346 <DIO_VoidSetPinValue+0x4a>
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	61 f0       	breq	.+24     	; 0x135c <DIO_VoidSetPinValue+0x60>
    1344:	d2 c0       	rjmp	.+420    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
    1346:	2e 81       	ldd	r18, Y+6	; 0x06
    1348:	3f 81       	ldd	r19, Y+7	; 0x07
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	71 f1       	breq	.+92     	; 0x13ac <DIO_VoidSetPinValue+0xb0>
    1350:	8e 81       	ldd	r24, Y+6	; 0x06
    1352:	9f 81       	ldd	r25, Y+7	; 0x07
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	e9 f1       	breq	.+122    	; 0x13d4 <DIO_VoidSetPinValue+0xd8>
    135a:	c7 c0       	rjmp	.+398    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
		{
			case PORT_A: SET_BIT(PORTA,Pin); break;
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_VoidSetPinValue+0x7e>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_VoidSetPinValue+0x7a>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	b3 c0       	rjmp	.+358    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
			case PORT_B: SET_BIT(PORTB,Pin); break;
    1384:	a8 e3       	ldi	r26, 0x38	; 56
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e8 e3       	ldi	r30, 0x38	; 56
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_VoidSetPinValue+0xa6>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_VoidSetPinValue+0xa2>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	9f c0       	rjmp	.+318    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
			case PORT_C: SET_BIT(PORTC,Pin); break;
    13ac:	a5 e3       	ldi	r26, 0x35	; 53
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_VoidSetPinValue+0xce>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_VoidSetPinValue+0xca>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	8b c0       	rjmp	.+278    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
			case PORT_D: SET_BIT(PORTD,Pin); break;
    13d4:	a2 e3       	ldi	r26, 0x32	; 50
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_VoidSetPinValue+0xf6>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_VoidSetPinValue+0xf2>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	77 c0       	rjmp	.+238    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
		}
	}
	else if(LOW == Value) //clr
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	88 23       	and	r24, r24
    1400:	09 f0       	breq	.+2      	; 0x1404 <DIO_VoidSetPinValue+0x108>
    1402:	73 c0       	rjmp	.+230    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
	{
		switch(Port)
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	3d 83       	std	Y+5, r19	; 0x05
    140c:	2c 83       	std	Y+4, r18	; 0x04
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	91 05       	cpc	r25, r1
    1416:	59 f1       	breq	.+86     	; 0x146e <DIO_VoidSetPinValue+0x172>
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	3d 81       	ldd	r19, Y+5	; 0x05
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	2c f4       	brge	.+10     	; 0x142c <DIO_VoidSetPinValue+0x130>
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f0       	breq	.+26     	; 0x1444 <DIO_VoidSetPinValue+0x148>
    142a:	5f c0       	rjmp	.+190    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
    142c:	2c 81       	ldd	r18, Y+4	; 0x04
    142e:	3d 81       	ldd	r19, Y+5	; 0x05
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	89 f1       	breq	.+98     	; 0x1498 <DIO_VoidSetPinValue+0x19c>
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <DIO_VoidSetPinValue+0x146>
    1440:	40 c0       	rjmp	.+128    	; 0x14c2 <DIO_VoidSetPinValue+0x1c6>
    1442:	53 c0       	rjmp	.+166    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
		{
			case PORT_A: CLR_BIT(PORTA,Pin); break;
    1444:	ab e3       	ldi	r26, 0x3B	; 59
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	eb e3       	ldi	r30, 0x3B	; 59
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_VoidSetPinValue+0x166>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_VoidSetPinValue+0x162>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	3e c0       	rjmp	.+124    	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
			case PORT_B: CLR_BIT(PORTB,Pin); break;
    146e:	a8 e3       	ldi	r26, 0x38	; 56
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_VoidSetPinValue+0x190>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_VoidSetPinValue+0x18c>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	29 c0       	rjmp	.+82     	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
			case PORT_C: CLR_BIT(PORTC,Pin); break;
    1498:	a5 e3       	ldi	r26, 0x35	; 53
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e3       	ldi	r30, 0x35	; 53
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_VoidSetPinValue+0x1ba>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_VoidSetPinValue+0x1b6>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <DIO_VoidSetPinValue+0x1ee>
			case PORT_D: CLR_BIT(PORTD,Pin); break;
    14c2:	a2 e3       	ldi	r26, 0x32	; 50
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e2 e3       	ldi	r30, 0x32	; 50
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_VoidSetPinValue+0x1e4>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_VoidSetPinValue+0x1e0>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
		}
	}
}
    14ea:	27 96       	adiw	r28, 0x07	; 7
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Port,u8 Value)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <DIO_VoidSetPortValue+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_VoidSetPortValue+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3c 83       	std	Y+4, r19	; 0x04
    1514:	2b 83       	std	Y+3, r18	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	d1 f0       	breq	.+52     	; 0x1554 <DIO_VoidSetPortValue+0x58>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <DIO_VoidSetPortValue+0x38>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <DIO_VoidSetPortValue+0x4e>
    1532:	1e c0       	rjmp	.+60     	; 0x1570 <DIO_VoidSetPortValue+0x74>
    1534:	2b 81       	ldd	r18, Y+3	; 0x03
    1536:	3c 81       	ldd	r19, Y+4	; 0x04
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <DIO_VoidSetPortValue+0x62>
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	81 f0       	breq	.+32     	; 0x1568 <DIO_VoidSetPortValue+0x6c>
    1548:	13 c0       	rjmp	.+38     	; 0x1570 <DIO_VoidSetPortValue+0x74>
	{
		case PORT_A: PORTA=Value; break;
    154a:	eb e3       	ldi	r30, 0x3B	; 59
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
    1552:	0e c0       	rjmp	.+28     	; 0x1570 <DIO_VoidSetPortValue+0x74>
		case PORT_B: PORTB=Value; break;
    1554:	e8 e3       	ldi	r30, 0x38	; 56
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 83       	st	Z, r24
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <DIO_VoidSetPortValue+0x74>
		case PORT_C: PORTC=Value; break;
    155e:	e5 e3       	ldi	r30, 0x35	; 53
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	80 83       	st	Z, r24
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <DIO_VoidSetPortValue+0x74>
		case PORT_D: PORTD=Value; break;			
    1568:	e2 e3       	ldi	r30, 0x32	; 50
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	80 83       	st	Z, r24
	}
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Port,u8 Pin)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_U8GetPinValue+0x6>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_U8GetPinValue+0x8>
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	8a 83       	std	Y+2, r24	; 0x02
    158e:	6b 83       	std	Y+3, r22	; 0x03
	u8 x;
	switch(Port)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3d 83       	std	Y+5, r19	; 0x05
    1598:	2c 83       	std	Y+4, r18	; 0x04
    159a:	4c 81       	ldd	r20, Y+4	; 0x04
    159c:	5d 81       	ldd	r21, Y+5	; 0x05
    159e:	41 30       	cpi	r20, 0x01	; 1
    15a0:	51 05       	cpc	r21, r1
    15a2:	41 f1       	breq	.+80     	; 0x15f4 <DIO_U8GetPinValue+0x76>
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	9d 81       	ldd	r25, Y+5	; 0x05
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	91 05       	cpc	r25, r1
    15ac:	34 f4       	brge	.+12     	; 0x15ba <DIO_U8GetPinValue+0x3c>
    15ae:	2c 81       	ldd	r18, Y+4	; 0x04
    15b0:	3d 81       	ldd	r19, Y+5	; 0x05
    15b2:	21 15       	cp	r18, r1
    15b4:	31 05       	cpc	r19, r1
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <DIO_U8GetPinValue+0x52>
    15b8:	52 c0       	rjmp	.+164    	; 0x165e <DIO_U8GetPinValue+0xe0>
    15ba:	4c 81       	ldd	r20, Y+4	; 0x04
    15bc:	5d 81       	ldd	r21, Y+5	; 0x05
    15be:	42 30       	cpi	r20, 0x02	; 2
    15c0:	51 05       	cpc	r21, r1
    15c2:	51 f1       	breq	.+84     	; 0x1618 <DIO_U8GetPinValue+0x9a>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	b9 f1       	breq	.+110    	; 0x163c <DIO_U8GetPinValue+0xbe>
    15ce:	47 c0       	rjmp	.+142    	; 0x165e <DIO_U8GetPinValue+0xe0>
	{
		case PORT_A: x = GET_BIT(PINA,Pin); break;
    15d0:	e9 e3       	ldi	r30, 0x39	; 57
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_U8GetPinValue+0x6a>
    15e4:	55 95       	asr	r21
    15e6:	47 95       	ror	r20
    15e8:	8a 95       	dec	r24
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_U8GetPinValue+0x66>
    15ec:	ca 01       	movw	r24, r20
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	35 c0       	rjmp	.+106    	; 0x165e <DIO_U8GetPinValue+0xe0>
		case PORT_B: x = GET_BIT(PINB,Pin); break;
    15f4:	e6 e3       	ldi	r30, 0x36	; 54
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_U8GetPinValue+0x8e>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_U8GetPinValue+0x8a>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	23 c0       	rjmp	.+70     	; 0x165e <DIO_U8GetPinValue+0xe0>
		case PORT_C: x = GET_BIT(PINC,Pin); break;
    1618:	e3 e3       	ldi	r30, 0x33	; 51
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a9 01       	movw	r20, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_U8GetPinValue+0xb2>
    162c:	55 95       	asr	r21
    162e:	47 95       	ror	r20
    1630:	8a 95       	dec	r24
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_U8GetPinValue+0xae>
    1634:	ca 01       	movw	r24, r20
    1636:	81 70       	andi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	11 c0       	rjmp	.+34     	; 0x165e <DIO_U8GetPinValue+0xe0>
		case PORT_D: x = GET_BIT(PIND,Pin); break;
    163c:	e0 e3       	ldi	r30, 0x30	; 48
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a9 01       	movw	r20, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <DIO_U8GetPinValue+0xd6>
    1650:	55 95       	asr	r21
    1652:	47 95       	ror	r20
    1654:	8a 95       	dec	r24
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <DIO_U8GetPinValue+0xd2>
    1658:	ca 01       	movw	r24, r20
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
	}
	return x;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO_VoidTogglePin>:
void DIO_VoidTogglePin(u8 Port,u8 Pin)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_VoidTogglePin+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_VoidTogglePin+0x8>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3c 83       	std	Y+4, r19	; 0x04
    1688:	2b 83       	std	Y+3, r18	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	49 f1       	breq	.+82     	; 0x16e6 <DIO_VoidTogglePin+0x76>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <DIO_VoidTogglePin+0x38>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	61 f0       	breq	.+24     	; 0x16be <DIO_VoidTogglePin+0x4e>
    16a6:	5a c0       	rjmp	.+180    	; 0x175c <DIO_VoidTogglePin+0xec>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	71 f1       	breq	.+92     	; 0x170e <DIO_VoidTogglePin+0x9e>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	e9 f1       	breq	.+122    	; 0x1736 <DIO_VoidTogglePin+0xc6>
    16bc:	4f c0       	rjmp	.+158    	; 0x175c <DIO_VoidTogglePin+0xec>
	{
		case PORT_A: TOG_BIT(PORTA,Pin); break;
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_VoidTogglePin+0x6c>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_VoidTogglePin+0x68>
    16e0:	84 27       	eor	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	3b c0       	rjmp	.+118    	; 0x175c <DIO_VoidTogglePin+0xec>
		case PORT_B: TOG_BIT(PORTB,Pin); break;
    16e6:	a8 e3       	ldi	r26, 0x38	; 56
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e8 e3       	ldi	r30, 0x38	; 56
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_VoidTogglePin+0x94>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_VoidTogglePin+0x90>
    1708:	84 27       	eor	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	27 c0       	rjmp	.+78     	; 0x175c <DIO_VoidTogglePin+0xec>
		case PORT_C: TOG_BIT(PORTC,Pin); break;
    170e:	a5 e3       	ldi	r26, 0x35	; 53
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e5 e3       	ldi	r30, 0x35	; 53
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_VoidTogglePin+0xbc>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_VoidTogglePin+0xb8>
    1730:	84 27       	eor	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	13 c0       	rjmp	.+38     	; 0x175c <DIO_VoidTogglePin+0xec>
		case PORT_D: TOG_BIT(PORTD,Pin); break;
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_VoidTogglePin+0xe4>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_VoidTogglePin+0xe0>
    1758:	84 27       	eor	r24, r20
    175a:	8c 93       	st	X, r24
	}
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <LCD_VoidInit>:
#include "LCD_Config.h"
#include <avr/delay.h>
#include "BIT_MATHS.h"

void LCD_VoidInit(void)
{
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	cd 54       	subi	r28, 0x4D	; 77
    1778:	d0 40       	sbci	r29, 0x00	; 0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
	//POWER ON
	//ENABLE PORT DATA
	DIO_VoidSetPortDirection(PORT_C,0xFF);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	6f ef       	ldi	r22, 0xFF	; 255
    1788:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_VoidSetPortDirection>
	//ENABLE RS 
	DIO_VoidSetPinDirection(PORT_D,PIN_7,OUTPUT_PIN);
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	67 e0       	ldi	r22, 0x07	; 7
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_VoidSetPinDirection>
	//ENABLE R/W
	DIO_VoidSetPinDirection(PORT_D,PIN_6,OUTPUT_PIN);
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	66 e0       	ldi	r22, 0x06	; 6
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_VoidSetPinDirection>
	//ENABLE E
	DIO_VoidSetPinDirection(PORT_D,PIN_5,OUTPUT_PIN);
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	65 e0       	ldi	r22, 0x05	; 5
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_VoidSetPinDirection>
    17aa:	fe 01       	movw	r30, r28
    17ac:	e7 5b       	subi	r30, 0xB7	; 183
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e2       	ldi	r26, 0x20	; 32
    17b6:	b2 e4       	ldi	r27, 0x42	; 66
    17b8:	80 83       	st	Z, r24
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	a2 83       	std	Z+2, r26	; 0x02
    17be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	8e 01       	movw	r16, r28
    17c2:	0b 5b       	subi	r16, 0xBB	; 187
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	fe 01       	movw	r30, r28
    17c8:	e7 5b       	subi	r30, 0xB7	; 183
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a ef       	ldi	r20, 0xFA	; 250
    17da:	54 e4       	ldi	r21, 0x44	; 68
    17dc:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	f8 01       	movw	r30, r16
    17e6:	80 83       	st	Z, r24
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	a2 83       	std	Z+2, r26	; 0x02
    17ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ee:	fe 01       	movw	r30, r28
    17f0:	eb 5b       	subi	r30, 0xBB	; 187
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	44 f4       	brge	.+16     	; 0x181c <LCD_VoidInit+0xb2>
		__ticks = 1;
    180c:	fe 01       	movw	r30, r28
    180e:	ed 5b       	subi	r30, 0xBD	; 189
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	64 c0       	rjmp	.+200    	; 0x18e4 <LCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    181c:	fe 01       	movw	r30, r28
    181e:	eb 5b       	subi	r30, 0xBB	; 187
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	57 e4       	ldi	r21, 0x47	; 71
    1832:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	0c f0       	brlt	.+2      	; 0x183c <LCD_VoidInit+0xd2>
    183a:	43 c0       	rjmp	.+134    	; 0x18c2 <LCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8e 01       	movw	r16, r28
    185c:	0d 5b       	subi	r16, 0xBD	; 189
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	f8 01       	movw	r30, r16
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <LCD_VoidInit+0x148>
    1874:	fe 01       	movw	r30, r28
    1876:	ef 5b       	subi	r30, 0xBF	; 191
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	88 ec       	ldi	r24, 0xC8	; 200
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1882:	fe 01       	movw	r30, r28
    1884:	ef 5b       	subi	r30, 0xBF	; 191
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_VoidInit+0x122>
    1890:	fe 01       	movw	r30, r28
    1892:	ef 5b       	subi	r30, 0xBF	; 191
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	de 01       	movw	r26, r28
    189c:	ad 5b       	subi	r26, 0xBD	; 189
    189e:	bf 4f       	sbci	r27, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	ed 5b       	subi	r30, 0xBD	; 189
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	11 96       	adiw	r26, 0x01	; 1
    18ae:	9c 93       	st	X, r25
    18b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	fe 01       	movw	r30, r28
    18b4:	ed 5b       	subi	r30, 0xBD	; 189
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	d1 f6       	brne	.-76     	; 0x1874 <LCD_VoidInit+0x10a>
    18c0:	24 c0       	rjmp	.+72     	; 0x190a <LCD_VoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c2:	8e 01       	movw	r16, r28
    18c4:	0d 5b       	subi	r16, 0xBD	; 189
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	fe 01       	movw	r30, r28
    18ca:	eb 5b       	subi	r30, 0xBB	; 187
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	f8 01       	movw	r30, r16
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	fe 01       	movw	r30, r28
    18e6:	ed 5b       	subi	r30, 0xBD	; 189
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	fe 01       	movw	r30, r28
    18f0:	ff 96       	adiw	r30, 0x3f	; 63
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	fe 01       	movw	r30, r28
    18f8:	ff 96       	adiw	r30, 0x3f	; 63
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_VoidInit+0x194>
    1902:	fe 01       	movw	r30, r28
    1904:	ff 96       	adiw	r30, 0x3f	; 63
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
	_delay_ms(40);
	// function set 
	LCD_VoidSendCommand(LCD_FUNSET8BIT);
    190a:	88 e3       	ldi	r24, 0x38	; 56
    190c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a8 ec       	ldi	r26, 0xC8	; 200
    1916:	b2 e4       	ldi	r27, 0x42	; 66
    1918:	8b af       	std	Y+59, r24	; 0x3b
    191a:	9c af       	std	Y+60, r25	; 0x3c
    191c:	ad af       	std	Y+61, r26	; 0x3d
    191e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1920:	6b ad       	ldd	r22, Y+59	; 0x3b
    1922:	7c ad       	ldd	r23, Y+60	; 0x3c
    1924:	8d ad       	ldd	r24, Y+61	; 0x3d
    1926:	9e ad       	ldd	r25, Y+62	; 0x3e
    1928:	2b ea       	ldi	r18, 0xAB	; 171
    192a:	3a ea       	ldi	r19, 0xAA	; 170
    192c:	4a e2       	ldi	r20, 0x2A	; 42
    192e:	50 e4       	ldi	r21, 0x40	; 64
    1930:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8f ab       	std	Y+55, r24	; 0x37
    193a:	98 af       	std	Y+56, r25	; 0x38
    193c:	a9 af       	std	Y+57, r26	; 0x39
    193e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1940:	6f a9       	ldd	r22, Y+55	; 0x37
    1942:	78 ad       	ldd	r23, Y+56	; 0x38
    1944:	89 ad       	ldd	r24, Y+57	; 0x39
    1946:	9a ad       	ldd	r25, Y+58	; 0x3a
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1954:	88 23       	and	r24, r24
    1956:	1c f4       	brge	.+6      	; 0x195e <LCD_VoidInit+0x1f4>
		__ticks = 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	8e ab       	std	Y+54, r24	; 0x36
    195c:	91 c0       	rjmp	.+290    	; 0x1a80 <LCD_VoidInit+0x316>
	else if (__tmp > 255)
    195e:	6f a9       	ldd	r22, Y+55	; 0x37
    1960:	78 ad       	ldd	r23, Y+56	; 0x38
    1962:	89 ad       	ldd	r24, Y+57	; 0x39
    1964:	9a ad       	ldd	r25, Y+58	; 0x3a
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	53 e4       	ldi	r21, 0x43	; 67
    196e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	0c f0       	brlt	.+2      	; 0x1978 <LCD_VoidInit+0x20e>
    1976:	7b c0       	rjmp	.+246    	; 0x1a6e <LCD_VoidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1978:	6b ad       	ldd	r22, Y+59	; 0x3b
    197a:	7c ad       	ldd	r23, Y+60	; 0x3c
    197c:	8d ad       	ldd	r24, Y+61	; 0x3d
    197e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a e7       	ldi	r20, 0x7A	; 122
    1986:	54 e4       	ldi	r21, 0x44	; 68
    1988:	0e 94 8b 04 	call	0x916	; 0x916 <__divsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8a ab       	std	Y+50, r24	; 0x32
    1992:	9b ab       	std	Y+51, r25	; 0x33
    1994:	ac ab       	std	Y+52, r26	; 0x34
    1996:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1998:	6a a9       	ldd	r22, Y+50	; 0x32
    199a:	7b a9       	ldd	r23, Y+51	; 0x33
    199c:	8c a9       	ldd	r24, Y+52	; 0x34
    199e:	9d a9       	ldd	r25, Y+53	; 0x35
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a ef       	ldi	r20, 0xFA	; 250
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8e a7       	std	Y+46, r24	; 0x2e
    19b2:	9f a7       	std	Y+47, r25	; 0x2f
    19b4:	a8 ab       	std	Y+48, r26	; 0x30
    19b6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19b8:	6e a5       	ldd	r22, Y+46	; 0x2e
    19ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    19bc:	88 a9       	ldd	r24, Y+48	; 0x30
    19be:	99 a9       	ldd	r25, Y+49	; 0x31
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	2c f4       	brge	.+10     	; 0x19da <LCD_VoidInit+0x270>
		__ticks = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9d a7       	std	Y+45, r25	; 0x2d
    19d6:	8c a7       	std	Y+44, r24	; 0x2c
    19d8:	3f c0       	rjmp	.+126    	; 0x1a58 <LCD_VoidInit+0x2ee>
	else if (__tmp > 65535)
    19da:	6e a5       	ldd	r22, Y+46	; 0x2e
    19dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    19de:	88 a9       	ldd	r24, Y+48	; 0x30
    19e0:	99 a9       	ldd	r25, Y+49	; 0x31
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	4c f5       	brge	.+82     	; 0x1a44 <LCD_VoidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	6a a9       	ldd	r22, Y+50	; 0x32
    19f4:	7b a9       	ldd	r23, Y+51	; 0x33
    19f6:	8c a9       	ldd	r24, Y+52	; 0x34
    19f8:	9d a9       	ldd	r25, Y+53	; 0x35
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9d a7       	std	Y+45, r25	; 0x2d
    1a18:	8c a7       	std	Y+44, r24	; 0x2c
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <LCD_VoidInit+0x2d0>
    1a1c:	88 ec       	ldi	r24, 0xC8	; 200
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9b a7       	std	Y+43, r25	; 0x2b
    1a22:	8a a7       	std	Y+42, r24	; 0x2a
    1a24:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a26:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_VoidInit+0x2be>
    1a2c:	9b a7       	std	Y+43, r25	; 0x2b
    1a2e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a32:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9d a7       	std	Y+45, r25	; 0x2d
    1a38:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <LCD_VoidInit+0x2b2>
    1a42:	24 c0       	rjmp	.+72     	; 0x1a8c <LCD_VoidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a46:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a48:	88 a9       	ldd	r24, Y+48	; 0x30
    1a4a:	99 a9       	ldd	r25, Y+49	; 0x31
    1a4c:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9d a7       	std	Y+45, r25	; 0x2d
    1a56:	8c a7       	std	Y+44, r24	; 0x2c
    1a58:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a5a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a5c:	99 a7       	std	Y+41, r25	; 0x29
    1a5e:	88 a7       	std	Y+40, r24	; 0x28
    1a60:	88 a5       	ldd	r24, Y+40	; 0x28
    1a62:	99 a5       	ldd	r25, Y+41	; 0x29
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_VoidInit+0x2fa>
    1a68:	99 a7       	std	Y+41, r25	; 0x29
    1a6a:	88 a7       	std	Y+40, r24	; 0x28
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_VoidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a6e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a70:	78 ad       	ldd	r23, Y+56	; 0x38
    1a72:	89 ad       	ldd	r24, Y+57	; 0x39
    1a74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a76:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8e ab       	std	Y+54, r24	; 0x36
    1a80:	8e a9       	ldd	r24, Y+54	; 0x36
    1a82:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a84:	8f a1       	ldd	r24, Y+39	; 0x27
    1a86:	8a 95       	dec	r24
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_VoidInit+0x31c>
    1a8a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	//display On/off control
	u8 Display_Control=LCD_DISPLAYON;
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e3 5b       	subi	r30, 0xB3	; 179
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	8c e0       	ldi	r24, 0x0C	; 12
    1a94:	80 83       	st	Z, r24
	//CURSOR DISPLAY 
	#if CURSOR_DISPLAY == ON 
	SET_BIT(Display_Control,BIT_1);
    1a96:	de 01       	movw	r26, r28
    1a98:	a3 5b       	subi	r26, 0xB3	; 179
    1a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e3 5b       	subi	r30, 0xB3	; 179
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	82 60       	ori	r24, 0x02	; 2
    1aa6:	8c 93       	st	X, r24
	#elif CURSOR_DISPLAY == OFF
	CLR_BIT(Display_Control,BIT_1);
	#endif
	//CURSOR BLINK
	#if CURSOR_BLINK == ON 
	SET_BIT(Display_Control,BIT_0);
    1aa8:	de 01       	movw	r26, r28
    1aaa:	a3 5b       	subi	r26, 0xB3	; 179
    1aac:	bf 4f       	sbci	r27, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e3 5b       	subi	r30, 0xB3	; 179
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 60       	ori	r24, 0x01	; 1
    1ab8:	8c 93       	st	X, r24
	#elif CURSOR_BLINK == OFF
	CLR_BIT(Display_Control,BIT_0);
	#endif
	LCD_VoidSendCommand(Display_Control);
    1aba:	fe 01       	movw	r30, r28
    1abc:	e3 5b       	subi	r30, 0xB3	; 179
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a8 ec       	ldi	r26, 0xC8	; 200
    1acc:	b2 e4       	ldi	r27, 0x42	; 66
    1ace:	8b a3       	std	Y+35, r24	; 0x23
    1ad0:	9c a3       	std	Y+36, r25	; 0x24
    1ad2:	ad a3       	std	Y+37, r26	; 0x25
    1ad4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ada:	8d a1       	ldd	r24, Y+37	; 0x25
    1adc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ade:	2b ea       	ldi	r18, 0xAB	; 171
    1ae0:	3a ea       	ldi	r19, 0xAA	; 170
    1ae2:	4a e2       	ldi	r20, 0x2A	; 42
    1ae4:	50 e4       	ldi	r21, 0x40	; 64
    1ae6:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8f 8f       	std	Y+31, r24	; 0x1f
    1af0:	98 a3       	std	Y+32, r25	; 0x20
    1af2:	a9 a3       	std	Y+33, r26	; 0x21
    1af4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1af6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1af8:	78 a1       	ldd	r23, Y+32	; 0x20
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	9a a1       	ldd	r25, Y+34	; 0x22
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	1c f4       	brge	.+6      	; 0x1b14 <LCD_VoidInit+0x3aa>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	8e 8f       	std	Y+30, r24	; 0x1e
    1b12:	91 c0       	rjmp	.+290    	; 0x1c36 <LCD_VoidInit+0x4cc>
	else if (__tmp > 255)
    1b14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b16:	78 a1       	ldd	r23, Y+32	; 0x20
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	53 e4       	ldi	r21, 0x43	; 67
    1b24:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	0c f0       	brlt	.+2      	; 0x1b2e <LCD_VoidInit+0x3c4>
    1b2c:	7b c0       	rjmp	.+246    	; 0x1c24 <LCD_VoidInit+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    1b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b30:	7c a1       	ldd	r23, Y+36	; 0x24
    1b32:	8d a1       	ldd	r24, Y+37	; 0x25
    1b34:	9e a1       	ldd	r25, Y+38	; 0x26
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	54 e4       	ldi	r21, 0x44	; 68
    1b3e:	0e 94 8b 04 	call	0x916	; 0x916 <__divsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8a 8f       	std	Y+26, r24	; 0x1a
    1b48:	9b 8f       	std	Y+27, r25	; 0x1b
    1b4a:	ac 8f       	std	Y+28, r26	; 0x1c
    1b4c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b50:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a ef       	ldi	r20, 0xFA	; 250
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8e 8b       	std	Y+22, r24	; 0x16
    1b68:	9f 8b       	std	Y+23, r25	; 0x17
    1b6a:	a8 8f       	std	Y+24, r26	; 0x18
    1b6c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b6e:	6e 89       	ldd	r22, Y+22	; 0x16
    1b70:	7f 89       	ldd	r23, Y+23	; 0x17
    1b72:	88 8d       	ldd	r24, Y+24	; 0x18
    1b74:	99 8d       	ldd	r25, Y+25	; 0x19
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LCD_VoidInit+0x426>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9d 8b       	std	Y+21, r25	; 0x15
    1b8c:	8c 8b       	std	Y+20, r24	; 0x14
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LCD_VoidInit+0x4a4>
	else if (__tmp > 65535)
    1b90:	6e 89       	ldd	r22, Y+22	; 0x16
    1b92:	7f 89       	ldd	r23, Y+23	; 0x17
    1b94:	88 8d       	ldd	r24, Y+24	; 0x18
    1b96:	99 8d       	ldd	r25, Y+25	; 0x19
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LCD_VoidInit+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1baa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9d 8b       	std	Y+21, r25	; 0x15
    1bce:	8c 8b       	std	Y+20, r24	; 0x14
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_VoidInit+0x486>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9b 8b       	std	Y+19, r25	; 0x13
    1bd8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bda:	8a 89       	ldd	r24, Y+18	; 0x12
    1bdc:	9b 89       	ldd	r25, Y+19	; 0x13
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_VoidInit+0x474>
    1be2:	9b 8b       	std	Y+19, r25	; 0x13
    1be4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8c 89       	ldd	r24, Y+20	; 0x14
    1be8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9d 8b       	std	Y+21, r25	; 0x15
    1bee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf2:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LCD_VoidInit+0x468>
    1bf8:	24 c0       	rjmp	.+72     	; 0x1c42 <LCD_VoidInit+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6e 89       	ldd	r22, Y+22	; 0x16
    1bfc:	7f 89       	ldd	r23, Y+23	; 0x17
    1bfe:	88 8d       	ldd	r24, Y+24	; 0x18
    1c00:	99 8d       	ldd	r25, Y+25	; 0x19
    1c02:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9d 8b       	std	Y+21, r25	; 0x15
    1c0c:	8c 8b       	std	Y+20, r24	; 0x14
    1c0e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c10:	9d 89       	ldd	r25, Y+21	; 0x15
    1c12:	99 8b       	std	Y+17, r25	; 0x11
    1c14:	88 8b       	std	Y+16, r24	; 0x10
    1c16:	88 89       	ldd	r24, Y+16	; 0x10
    1c18:	99 89       	ldd	r25, Y+17	; 0x11
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_VoidInit+0x4b0>
    1c1e:	99 8b       	std	Y+17, r25	; 0x11
    1c20:	88 8b       	std	Y+16, r24	; 0x10
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_VoidInit+0x4d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c24:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c26:	78 a1       	ldd	r23, Y+32	; 0x20
    1c28:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2c:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8e 8f       	std	Y+30, r24	; 0x1e
    1c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3c:	8a 95       	dec	r24
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_VoidInit+0x4d2>
    1c40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	// display clear
	LCD_VoidSendCommand(LCD_CLEAR);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e4       	ldi	r27, 0x40	; 64
    1c50:	8b 87       	std	Y+11, r24	; 0x0b
    1c52:	9c 87       	std	Y+12, r25	; 0x0c
    1c54:	ad 87       	std	Y+13, r26	; 0x0d
    1c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a ef       	ldi	r20, 0xFA	; 250
    1c66:	54 e4       	ldi	r21, 0x44	; 68
    1c68:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8f 83       	std	Y+7, r24	; 0x07
    1c72:	98 87       	std	Y+8, r25	; 0x08
    1c74:	a9 87       	std	Y+9, r26	; 0x09
    1c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <LCD_VoidInit+0x530>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <LCD_VoidInit+0x5ae>
	else if (__tmp > 65535)
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <LCD_VoidInit+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <LCD_VoidInit+0x590>
    1cdc:	88 ec       	ldi	r24, 0xC8	; 200
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_VoidInit+0x57e>
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <LCD_VoidInit+0x572>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <LCD_VoidInit+0x5c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_VoidInit+0x5ba>
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	
}
    1d2c:	c3 5b       	subi	r28, 0xB3	; 179
    1d2e:	df 4f       	sbci	r29, 0xFF	; 255
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	08 95       	ret

00001d44 <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Data)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	6d 97       	sbiw	r28, 0x1d	; 29
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	8d 8f       	std	Y+29, r24	; 0x1d
	//  Rs =1 to write data
	DIO_VoidSetPinValue(PORT_D,PIN_7,SET);
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	67 e0       	ldi	r22, 0x07	; 7
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
	// R/W =0 to write
	DIO_VoidSetPinValue(PORT_D,PIN_6,CLR);
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	66 e0       	ldi	r22, 0x06	; 6
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
	// send command to data port
	DIO_VoidSetPortValue(PORT_C,Data);
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d72:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_VoidSetPortValue>
	//Enable sequence
	DIO_VoidSetPinValue(PORT_D,PIN_5,SET);
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	65 e0       	ldi	r22, 0x05	; 5
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e8       	ldi	r26, 0x80	; 128
    1d86:	bf e3       	ldi	r27, 0x3F	; 63
    1d88:	89 8f       	std	Y+25, r24	; 0x19
    1d8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	69 8d       	ldd	r22, Y+25	; 0x19
    1d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a ef       	ldi	r20, 0xFA	; 250
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
    1daa:	9e 8b       	std	Y+22, r25	; 0x16
    1dac:	af 8b       	std	Y+23, r26	; 0x17
    1dae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <LCD_VoidSendData+0x8e>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    1dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	69 8d       	ldd	r22, Y+25	; 0x19
    1dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <LCD_VoidSendData+0xee>
    1e14:	88 ec       	ldi	r24, 0xC8	; 200
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
    1e1c:	89 89       	ldd	r24, Y+17	; 0x11
    1e1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_VoidSendData+0xdc>
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <LCD_VoidSendData+0xd0>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	98 8b       	std	Y+16, r25	; 0x10
    1e56:	8f 87       	std	Y+15, r24	; 0x0f
    1e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5a:	98 89       	ldd	r25, Y+16	; 0x10
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_VoidSendData+0x118>
    1e60:	98 8b       	std	Y+16, r25	; 0x10
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(PORT_D,PIN_5,CLR);
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	65 e0       	ldi	r22, 0x05	; 5
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e0       	ldi	r26, 0x00	; 0
    1e74:	b0 e4       	ldi	r27, 0x40	; 64
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_VoidSendData+0x17c>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <LCD_VoidSendData+0x1fa>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <LCD_VoidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <LCD_VoidSendData+0x1dc>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_VoidSendData+0x1ca>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <LCD_VoidSendData+0x1be>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <LCD_VoidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_VoidSendData+0x206>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    1f52:	6d 96       	adiw	r28, 0x1d	; 29
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 Command)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	6d 97       	sbiw	r28, 0x1d	; 29
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	8d 8f       	std	Y+29, r24	; 0x1d
	//  Rs =0 to write command
	DIO_VoidSetPinValue(PORT_D,PIN_7,CLR);
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	67 e0       	ldi	r22, 0x07	; 7
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
	// R/W =0 to write
	DIO_VoidSetPinValue(PORT_D,PIN_6,CLR);
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	66 e0       	ldi	r22, 0x06	; 6
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
	// send command to data port
	DIO_VoidSetPortValue(PORT_C,Command);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f92:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_VoidSetPortValue>
	//Enable sequence
	DIO_VoidSetPinValue(PORT_D,PIN_5,SET);
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	65 e0       	ldi	r22, 0x05	; 5
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e8       	ldi	r26, 0x80	; 128
    1fa6:	bf e3       	ldi	r27, 0x3F	; 63
    1fa8:	89 8f       	std	Y+25, r24	; 0x19
    1faa:	9a 8f       	std	Y+26, r25	; 0x1a
    1fac:	ab 8f       	std	Y+27, r26	; 0x1b
    1fae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a ef       	ldi	r20, 0xFA	; 250
    1fbe:	54 e4       	ldi	r21, 0x44	; 68
    1fc0:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8d 8b       	std	Y+21, r24	; 0x15
    1fca:	9e 8b       	std	Y+22, r25	; 0x16
    1fcc:	af 8b       	std	Y+23, r26	; 0x17
    1fce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9c 8b       	std	Y+20, r25	; 0x14
    1fee:	8b 8b       	std	Y+19, r24	; 0x13
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	69 8d       	ldd	r22, Y+25	; 0x19
    200c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    200e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2010:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9c 8b       	std	Y+20, r25	; 0x14
    2030:	8b 8b       	std	Y+19, r24	; 0x13
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_VoidSendCommand+0xee>
    2034:	88 ec       	ldi	r24, 0xC8	; 200
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9a 8b       	std	Y+18, r25	; 0x12
    203a:	89 8b       	std	Y+17, r24	; 0x11
    203c:	89 89       	ldd	r24, Y+17	; 0x11
    203e:	9a 89       	ldd	r25, Y+18	; 0x12
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_VoidSendCommand+0xdc>
    2044:	9a 8b       	std	Y+18, r25	; 0x12
    2046:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	8b 89       	ldd	r24, Y+19	; 0x13
    204a:	9c 89       	ldd	r25, Y+20	; 0x14
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	8b 89       	ldd	r24, Y+19	; 0x13
    2054:	9c 89       	ldd	r25, Y+20	; 0x14
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <LCD_VoidSendCommand+0xd0>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6d 89       	ldd	r22, Y+21	; 0x15
    205e:	7e 89       	ldd	r23, Y+22	; 0x16
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9c 8b       	std	Y+20, r25	; 0x14
    206e:	8b 8b       	std	Y+19, r24	; 0x13
    2070:	8b 89       	ldd	r24, Y+19	; 0x13
    2072:	9c 89       	ldd	r25, Y+20	; 0x14
    2074:	98 8b       	std	Y+16, r25	; 0x10
    2076:	8f 87       	std	Y+15, r24	; 0x0f
    2078:	8f 85       	ldd	r24, Y+15	; 0x0f
    207a:	98 89       	ldd	r25, Y+16	; 0x10
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_VoidSendCommand+0x118>
    2080:	98 8b       	std	Y+16, r25	; 0x10
    2082:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(PORT_D,PIN_5,CLR);
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	65 e0       	ldi	r22, 0x05	; 5
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinValue>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e0       	ldi	r26, 0x00	; 0
    2094:	b0 e4       	ldi	r27, 0x40	; 64
    2096:	8b 87       	std	Y+11, r24	; 0x0b
    2098:	9c 87       	std	Y+12, r25	; 0x0c
    209a:	ad 87       	std	Y+13, r26	; 0x0d
    209c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a ef       	ldi	r20, 0xFA	; 250
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8f 83       	std	Y+7, r24	; 0x07
    20b8:	98 87       	std	Y+8, r25	; 0x08
    20ba:	a9 87       	std	Y+9, r26	; 0x09
    20bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <LCD_VoidSendCommand+0x17c>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	3f c0       	rjmp	.+126    	; 0x215e <LCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <LCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <LCD_VoidSendCommand+0x1dc>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_VoidSendCommand+0x1ca>
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <LCD_VoidSendCommand+0x1be>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <LCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_VoidSendCommand+0x206>
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2172:	6d 96       	adiw	r28, 0x1d	; 29
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <LCD_VoidSendString>:
void LCD_VoidSendString(u8 *String)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <LCD_VoidSendString+0x6>
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9b 83       	std	Y+3, r25	; 0x03
    2192:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2194:	19 82       	std	Y+1, r1	; 0x01
    2196:	0e c0       	rjmp	.+28     	; 0x21b4 <LCD_VoidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_VoidSendData(String[i]);
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	9b 81       	ldd	r25, Y+3	; 0x03
    21a2:	fc 01       	movw	r30, r24
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	80 81       	ld	r24, Z
    21aa:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_VoidSendData>
		i++;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void LCD_VoidSendString(u8 *String)
{
	u8 i=0;
	while(String[i]!='\0')
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	fc 01       	movw	r30, r24
    21c0:	e2 0f       	add	r30, r18
    21c2:	f3 1f       	adc	r31, r19
    21c4:	80 81       	ld	r24, Z
    21c6:	88 23       	and	r24, r24
    21c8:	39 f7       	brne	.-50     	; 0x2198 <LCD_VoidSendString+0x14>
	{
		LCD_VoidSendData(String[i]);
		i++;
	}
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <LCD_VoidSendNum>:
void LCD_VoidSendNum(u32 Num)
{
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	29 97       	sbiw	r28, 0x09	; 9
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	6e 83       	std	Y+6, r22	; 0x06
    21f4:	7f 83       	std	Y+7, r23	; 0x07
    21f6:	88 87       	std	Y+8, r24	; 0x08
    21f8:	99 87       	std	Y+9, r25	; 0x09
	u8 x=0;
    21fa:	1d 82       	std	Y+5, r1	; 0x05
	u32 rev=1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	ab 83       	std	Y+3, r26	; 0x03
    220a:	bc 83       	std	Y+4, r27	; 0x04
	if (Num ==0)
    220c:	8e 81       	ldd	r24, Y+6	; 0x06
    220e:	9f 81       	ldd	r25, Y+7	; 0x07
    2210:	a8 85       	ldd	r26, Y+8	; 0x08
    2212:	b9 85       	ldd	r27, Y+9	; 0x09
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	a1 05       	cpc	r26, r1
    2218:	b1 05       	cpc	r27, r1
    221a:	d1 f5       	brne	.+116    	; 0x2290 <LCD_VoidSendNum+0xba>
	{
		LCD_VoidSendData('0');
    221c:	80 e3       	ldi	r24, 0x30	; 48
    221e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_VoidSendData>
    2222:	6d c0       	rjmp	.+218    	; 0x22fe <LCD_VoidSendNum+0x128>
	}
	else
	{
		while(Num!=0)
		{
			rev=(rev*10) + (Num%10);
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	ab 81       	ldd	r26, Y+3	; 0x03
    222a:	bc 81       	ldd	r27, Y+4	; 0x04
    222c:	2a e0       	ldi	r18, 0x0A	; 10
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__mulsi3>
    223c:	7b 01       	movw	r14, r22
    223e:	8c 01       	movw	r16, r24
    2240:	8e 81       	ldd	r24, Y+6	; 0x06
    2242:	9f 81       	ldd	r25, Y+7	; 0x07
    2244:	a8 85       	ldd	r26, Y+8	; 0x08
    2246:	b9 85       	ldd	r27, Y+9	; 0x09
    2248:	2a e0       	ldi	r18, 0x0A	; 10
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__udivmodsi4>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8e 0d       	add	r24, r14
    225e:	9f 1d       	adc	r25, r15
    2260:	a0 1f       	adc	r26, r16
    2262:	b1 1f       	adc	r27, r17
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	ab 83       	std	Y+3, r26	; 0x03
    226a:	bc 83       	std	Y+4, r27	; 0x04
			Num/=10;
    226c:	8e 81       	ldd	r24, Y+6	; 0x06
    226e:	9f 81       	ldd	r25, Y+7	; 0x07
    2270:	a8 85       	ldd	r26, Y+8	; 0x08
    2272:	b9 85       	ldd	r27, Y+9	; 0x09
    2274:	2a e0       	ldi	r18, 0x0A	; 10
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__udivmodsi4>
    2284:	da 01       	movw	r26, r20
    2286:	c9 01       	movw	r24, r18
    2288:	8e 83       	std	Y+6, r24	; 0x06
    228a:	9f 83       	std	Y+7, r25	; 0x07
    228c:	a8 87       	std	Y+8, r26	; 0x08
    228e:	b9 87       	std	Y+9, r27	; 0x09
	{
		LCD_VoidSendData('0');
	}
	else
	{
		while(Num!=0)
    2290:	8e 81       	ldd	r24, Y+6	; 0x06
    2292:	9f 81       	ldd	r25, Y+7	; 0x07
    2294:	a8 85       	ldd	r26, Y+8	; 0x08
    2296:	b9 85       	ldd	r27, Y+9	; 0x09
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	a1 05       	cpc	r26, r1
    229c:	b1 05       	cpc	r27, r1
    229e:	11 f6       	brne	.-124    	; 0x2224 <LCD_VoidSendNum+0x4e>
    22a0:	25 c0       	rjmp	.+74     	; 0x22ec <LCD_VoidSendNum+0x116>
			Num/=10;
		}

		while (rev!=1)
		{
			x= rev%10;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	9a 81       	ldd	r25, Y+2	; 0x02
    22a6:	ab 81       	ldd	r26, Y+3	; 0x03
    22a8:	bc 81       	ldd	r27, Y+4	; 0x04
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__udivmodsi4>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8d 83       	std	Y+5, r24	; 0x05
			rev=rev/10;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	ab 81       	ldd	r26, Y+3	; 0x03
    22c6:	bc 81       	ldd	r27, Y+4	; 0x04
    22c8:	2a e0       	ldi	r18, 0x0A	; 10
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__udivmodsi4>
    22d8:	da 01       	movw	r26, r20
    22da:	c9 01       	movw	r24, r18
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	ab 83       	std	Y+3, r26	; 0x03
    22e2:	bc 83       	std	Y+4, r27	; 0x04
			LCD_VoidSendData(x+48);
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	80 5d       	subi	r24, 0xD0	; 208
    22e8:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_VoidSendData>
		{
			rev=(rev*10) + (Num%10);
			Num/=10;
		}

		while (rev!=1)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	ab 81       	ldd	r26, Y+3	; 0x03
    22f2:	bc 81       	ldd	r27, Y+4	; 0x04
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	a1 05       	cpc	r26, r1
    22fa:	b1 05       	cpc	r27, r1
    22fc:	91 f6       	brne	.-92     	; 0x22a2 <LCD_VoidSendNum+0xcc>
			x= rev%10;
			rev=rev/10;
			LCD_VoidSendData(x+48);
		}
	}
}
    22fe:	29 96       	adiw	r28, 0x09	; 9
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	08 95       	ret

00002318 <LCD_VoidShiftRightString>:
void LCD_VoidShiftRightString(u8 *String)
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	a3 97       	sbiw	r28, 0x23	; 35
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	9b a3       	std	Y+35, r25	; 0x23
    232e:	8a a3       	std	Y+34, r24	; 0x22

	u8 size_of_String=0;
    2330:	19 a2       	std	Y+33, r1	; 0x21
    2332:	03 c0       	rjmp	.+6      	; 0x233a <LCD_VoidShiftRightString+0x22>
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
    2334:	89 a1       	ldd	r24, Y+33	; 0x21
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	89 a3       	std	Y+33, r24	; 0x21
}
void LCD_VoidShiftRightString(u8 *String)
{

	u8 size_of_String=0;
	while(String[size_of_String]!='\0')
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	8a a1       	ldd	r24, Y+34	; 0x22
    2342:	9b a1       	ldd	r25, Y+35	; 0x23
    2344:	fc 01       	movw	r30, r24
    2346:	e2 0f       	add	r30, r18
    2348:	f3 1f       	adc	r31, r19
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	91 f7       	brne	.-28     	; 0x2334 <LCD_VoidShiftRightString+0x1c>
	{
		size_of_String++;
	}
	// ShOW CHARS FROM LEFT TO RIGHT
	for (u8 i=size_of_String-1;i>=0;i--)
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	81 50       	subi	r24, 0x01	; 1
    2354:	88 a3       	std	Y+32, r24	; 0x20
	{
		for (u8 j=i;String[j]!='\0';j++)
    2356:	88 a1       	ldd	r24, Y+32	; 0x20
    2358:	8f 8f       	std	Y+31, r24	; 0x1f
    235a:	0e c0       	rjmp	.+28     	; 0x2378 <LCD_VoidShiftRightString+0x60>
		{
			LCD_VoidSendData(String[j]);
    235c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	8a a1       	ldd	r24, Y+34	; 0x22
    2364:	9b a1       	ldd	r25, Y+35	; 0x23
    2366:	fc 01       	movw	r30, r24
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	80 81       	ld	r24, Z
    236e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_VoidSendData>
		size_of_String++;
	}
	// ShOW CHARS FROM LEFT TO RIGHT
	for (u8 i=size_of_String-1;i>=0;i--)
	{
		for (u8 j=i;String[j]!='\0';j++)
    2372:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2374:	8f 5f       	subi	r24, 0xFF	; 255
    2376:	8f 8f       	std	Y+31, r24	; 0x1f
    2378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	8a a1       	ldd	r24, Y+34	; 0x22
    2380:	9b a1       	ldd	r25, Y+35	; 0x23
    2382:	fc 01       	movw	r30, r24
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	80 81       	ld	r24, Z
    238a:	88 23       	and	r24, r24
    238c:	39 f7       	brne	.-50     	; 0x235c <LCD_VoidShiftRightString+0x44>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	aa ef       	ldi	r26, 0xFA	; 250
    2394:	b3 e4       	ldi	r27, 0x43	; 67
    2396:	89 8f       	std	Y+25, r24	; 0x19
    2398:	9a 8f       	std	Y+26, r25	; 0x1a
    239a:	ab 8f       	std	Y+27, r26	; 0x1b
    239c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	69 8d       	ldd	r22, Y+25	; 0x19
    23a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a ef       	ldi	r20, 0xFA	; 250
    23ac:	54 e4       	ldi	r21, 0x44	; 68
    23ae:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8d 8b       	std	Y+21, r24	; 0x15
    23b8:	9e 8b       	std	Y+22, r25	; 0x16
    23ba:	af 8b       	std	Y+23, r26	; 0x17
    23bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <LCD_VoidShiftRightString+0xc8>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	3f c0       	rjmp	.+126    	; 0x245e <LCD_VoidShiftRightString+0x146>
	else if (__tmp > 65535)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <LCD_VoidShiftRightString+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <LCD_VoidShiftRightString+0x128>
    2422:	88 ec       	ldi	r24, 0xC8	; 200
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_VoidShiftRightString+0x116>
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <LCD_VoidShiftRightString+0x10a>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <LCD_VoidShiftRightString+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f
    2466:	8f 85       	ldd	r24, Y+15	; 0x0f
    2468:	98 89       	ldd	r25, Y+16	; 0x10
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_VoidShiftRightString+0x152>
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
		{
			LCD_VoidSendData(String[j]);
		}
		_delay_ms(500);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
		if (0==i)
    2478:	88 a1       	ldd	r24, Y+32	; 0x20
    247a:	88 23       	and	r24, r24
    247c:	21 f0       	breq	.+8      	; 0x2486 <LCD_VoidShiftRightString+0x16e>
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
	}
	// ShOW CHARS FROM LEFT TO RIGHT
	for (u8 i=size_of_String-1;i>=0;i--)
    247e:	88 a1       	ldd	r24, Y+32	; 0x20
    2480:	81 50       	subi	r24, 0x01	; 1
    2482:	88 a3       	std	Y+32, r24	; 0x20
    2484:	68 cf       	rjmp	.-304    	; 0x2356 <LCD_VoidShiftRightString+0x3e>
		LCD_VoidSendCommand(LCD_CLEAR);
		if (0==i)
			break;
	}
	// SHIFTING STRING
	for (u8 i=1;i<17;i++)
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	8e 8f       	std	Y+30, r24	; 0x1e
    248a:	97 c0       	rjmp	.+302    	; 0x25ba <LCD_VoidShiftRightString+0x2a2>
	{
		LCD_VoidSetPositin(ROW_0,i);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2490:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_VoidSetPositin>

		for (u8 j=0;String[j]!='\0';j++)
    2494:	1d 8e       	std	Y+29, r1	; 0x1d
    2496:	0e c0       	rjmp	.+28     	; 0x24b4 <LCD_VoidShiftRightString+0x19c>
		{
			LCD_VoidSendData(String[j]);
    2498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	8a a1       	ldd	r24, Y+34	; 0x22
    24a0:	9b a1       	ldd	r25, Y+35	; 0x23
    24a2:	fc 01       	movw	r30, r24
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	80 81       	ld	r24, Z
    24aa:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_VoidSendData>
	// SHIFTING STRING
	for (u8 i=1;i<17;i++)
	{
		LCD_VoidSetPositin(ROW_0,i);

		for (u8 j=0;String[j]!='\0';j++)
    24ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8a a1       	ldd	r24, Y+34	; 0x22
    24bc:	9b a1       	ldd	r25, Y+35	; 0x23
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	80 81       	ld	r24, Z
    24c6:	88 23       	and	r24, r24
    24c8:	39 f7       	brne	.-50     	; 0x2498 <LCD_VoidShiftRightString+0x180>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	aa ef       	ldi	r26, 0xFA	; 250
    24d0:	b3 e4       	ldi	r27, 0x43	; 67
    24d2:	8b 87       	std	Y+11, r24	; 0x0b
    24d4:	9c 87       	std	Y+12, r25	; 0x0c
    24d6:	ad 87       	std	Y+13, r26	; 0x0d
    24d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	6b 85       	ldd	r22, Y+11	; 0x0b
    24dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8f 83       	std	Y+7, r24	; 0x07
    24f4:	98 87       	std	Y+8, r25	; 0x08
    24f6:	a9 87       	std	Y+9, r26	; 0x09
    24f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    250e:	88 23       	and	r24, r24
    2510:	2c f4       	brge	.+10     	; 0x251c <LCD_VoidShiftRightString+0x204>
		__ticks = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	3f c0       	rjmp	.+126    	; 0x259a <LCD_VoidShiftRightString+0x282>
	else if (__tmp > 65535)
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	4c f5       	brge	.+82     	; 0x2586 <LCD_VoidShiftRightString+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_VoidShiftRightString+0x264>
    255e:	88 ec       	ldi	r24, 0xC8	; 200
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_VoidShiftRightString+0x252>
    256e:	9c 83       	std	Y+4, r25	; 0x04
    2570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <LCD_VoidShiftRightString+0x246>
    2584:	14 c0       	rjmp	.+40     	; 0x25ae <LCD_VoidShiftRightString+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	6f 81       	ldd	r22, Y+7	; 0x07
    2588:	78 85       	ldd	r23, Y+8	; 0x08
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	9a 81       	ldd	r25, Y+2	; 0x02
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_VoidShiftRightString+0x28e>
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
		{
			LCD_VoidSendData(String[j]);
		}
		_delay_ms(500);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
		LCD_VoidSendCommand(LCD_CLEAR);
		if (0==i)
			break;
	}
	// SHIFTING STRING
	for (u8 i=1;i<17;i++)
    25b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	8e 8f       	std	Y+30, r24	; 0x1e
    25ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25bc:	81 31       	cpi	r24, 0x11	; 17
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <LCD_VoidShiftRightString+0x2aa>
    25c0:	65 cf       	rjmp	.-310    	; 0x248c <LCD_VoidShiftRightString+0x174>
		}
		_delay_ms(500);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
	}
}
    25c2:	a3 96       	adiw	r28, 0x23	; 35
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <LCD_VoidSetPositin>:
void LCD_VoidSetPositin(u8 Row,u8 Col)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	00 d0       	rcall	.+0      	; 0x25da <LCD_VoidSetPositin+0x6>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	6a 83       	std	Y+2, r22	; 0x02
	if (ROW_0 == Row)
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	88 23       	and	r24, r24
    25e6:	29 f4       	brne	.+10     	; 0x25f2 <LCD_VoidSetPositin+0x1e>
	{
		LCD_VoidSendCommand(128+Col);
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	80 58       	subi	r24, 0x80	; 128
    25ec:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
    25f0:	07 c0       	rjmp	.+14     	; 0x2600 <LCD_VoidSetPositin+0x2c>
	}
	else if(ROW_1 == Row)
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	21 f4       	brne	.+8      	; 0x2600 <LCD_VoidSetPositin+0x2c>
	{
		LCD_VoidSendCommand(128+64+Col);
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	80 54       	subi	r24, 0x40	; 64
    25fc:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
	}
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <LCD_VoidZigzag>:
void LCD_VoidZigzag(u8 *String)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	64 97       	sbiw	r28, 0x14	; 20
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	8b 8b       	std	Y+19, r24	; 0x13
	u8 row=0;
    2622:	1a 8a       	std	Y+18, r1	; 0x12

	u8 size_of_String=0;
    2624:	19 8a       	std	Y+17, r1	; 0x11
    2626:	03 c0       	rjmp	.+6      	; 0x262e <LCD_VoidZigzag+0x24>
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
    2628:	89 89       	ldd	r24, Y+17	; 0x11
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	89 8b       	std	Y+17, r24	; 0x11
void LCD_VoidZigzag(u8 *String)
{
	u8 row=0;

	u8 size_of_String=0;
	while(String[size_of_String]!='\0')
    262e:	89 89       	ldd	r24, Y+17	; 0x11
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	80 81       	ld	r24, Z
    2640:	88 23       	and	r24, r24
    2642:	91 f7       	brne	.-28     	; 0x2628 <LCD_VoidZigzag+0x1e>
	{
		size_of_String++;
	}
	for(u8 i=0;16-i>=size_of_String;i+=(size_of_String/2))
    2644:	18 8a       	std	Y+16, r1	; 0x10
    2646:	9e c0       	rjmp	.+316    	; 0x2784 <LCD_VoidZigzag+0x17a>
	{
		LCD_VoidSetPositin(row,i);
    2648:	8a 89       	ldd	r24, Y+18	; 0x12
    264a:	68 89       	ldd	r22, Y+16	; 0x10
    264c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_VoidSetPositin>
		for (u8 j=0;String[j]!='\0';j++)
    2650:	1f 86       	std	Y+15, r1	; 0x0f
    2652:	0e c0       	rjmp	.+28     	; 0x2670 <LCD_VoidZigzag+0x66>
			{
				LCD_VoidSendData(String[j]);
    2654:	8f 85       	ldd	r24, Y+15	; 0x0f
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	8b 89       	ldd	r24, Y+19	; 0x13
    265c:	9c 89       	ldd	r25, Y+20	; 0x14
    265e:	fc 01       	movw	r30, r24
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	80 81       	ld	r24, Z
    2666:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_VoidSendData>
		size_of_String++;
	}
	for(u8 i=0;16-i>=size_of_String;i+=(size_of_String/2))
	{
		LCD_VoidSetPositin(row,i);
		for (u8 j=0;String[j]!='\0';j++)
    266a:	8f 85       	ldd	r24, Y+15	; 0x0f
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	8f 87       	std	Y+15, r24	; 0x0f
    2670:	8f 85       	ldd	r24, Y+15	; 0x0f
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	39 f7       	brne	.-50     	; 0x2654 <LCD_VoidZigzag+0x4a>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	aa ef       	ldi	r26, 0xFA	; 250
    268c:	b3 e4       	ldi	r27, 0x43	; 67
    268e:	8b 87       	std	Y+11, r24	; 0x0b
    2690:	9c 87       	std	Y+12, r25	; 0x0c
    2692:	ad 87       	std	Y+13, r26	; 0x0d
    2694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	6b 85       	ldd	r22, Y+11	; 0x0b
    2698:	7c 85       	ldd	r23, Y+12	; 0x0c
    269a:	8d 85       	ldd	r24, Y+13	; 0x0d
    269c:	9e 85       	ldd	r25, Y+14	; 0x0e
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a ef       	ldi	r20, 0xFA	; 250
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8f 83       	std	Y+7, r24	; 0x07
    26b0:	98 87       	std	Y+8, r25	; 0x08
    26b2:	a9 87       	std	Y+9, r26	; 0x09
    26b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b6:	6f 81       	ldd	r22, Y+7	; 0x07
    26b8:	78 85       	ldd	r23, Y+8	; 0x08
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <LCD_VoidZigzag+0xce>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <LCD_VoidZigzag+0x14c>
	else if (__tmp > 65535)
    26d8:	6f 81       	ldd	r22, Y+7	; 0x07
    26da:	78 85       	ldd	r23, Y+8	; 0x08
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <LCD_VoidZigzag+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <LCD_VoidZigzag+0x12e>
    271a:	88 ec       	ldi	r24, 0xC8	; 200
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_VoidZigzag+0x11c>
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <LCD_VoidZigzag+0x110>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <LCD_VoidZigzag+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_VoidZigzag+0x158>
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
			{
				LCD_VoidSendData(String[j]);
			}
		_delay_ms(500);
		TOG_BIT(row,BIT_0);
    276a:	9a 89       	ldd	r25, Y+18	; 0x12
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	89 27       	eor	r24, r25
    2770:	8a 8b       	std	Y+18, r24	; 0x12
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_VoidSendCommand>
	u8 size_of_String=0;
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
	}
	for(u8 i=0;16-i>=size_of_String;i+=(size_of_String/2))
    2778:	89 89       	ldd	r24, Y+17	; 0x11
    277a:	98 2f       	mov	r25, r24
    277c:	96 95       	lsr	r25
    277e:	88 89       	ldd	r24, Y+16	; 0x10
    2780:	89 0f       	add	r24, r25
    2782:	88 8b       	std	Y+16, r24	; 0x10
    2784:	88 89       	ldd	r24, Y+16	; 0x10
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	80 e1       	ldi	r24, 0x10	; 16
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	ac 01       	movw	r20, r24
    2790:	42 1b       	sub	r20, r18
    2792:	53 0b       	sbc	r21, r19
    2794:	9a 01       	movw	r18, r20
    2796:	89 89       	ldd	r24, Y+17	; 0x11
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	28 17       	cp	r18, r24
    279e:	39 07       	cpc	r19, r25
    27a0:	0c f0       	brlt	.+2      	; 0x27a4 <LCD_VoidZigzag+0x19a>
    27a2:	52 cf       	rjmp	.-348    	; 0x2648 <LCD_VoidZigzag+0x3e>
		_delay_ms(500);
		TOG_BIT(row,BIT_0);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
	}
}
    27a4:	64 96       	adiw	r28, 0x14	; 20
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <main>:
#include "ADC_Interface.h"
#include "LCD_Interface.h"
#include <avr/delay.h>

int main()
{
    27b6:	2f 92       	push	r2
    27b8:	3f 92       	push	r3
    27ba:	4f 92       	push	r4
    27bc:	5f 92       	push	r5
    27be:	6f 92       	push	r6
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	62 97       	sbiw	r28, 0x12	; 18
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61

	ADC_ViodInit();
    27ea:	0e 94 c1 07 	call	0xf82	; 0xf82 <ADC_ViodInit>
	LCD_VoidInit();
    27ee:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_VoidInit>

	u16 DigitalValue,AnalogValue;
	while(1)
	{
		DigitalValue = ADC_U16ReadValue(0);
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	0e 94 07 08 	call	0x100e	; 0x100e <ADC_U16ReadValue>
    27f8:	9a 8b       	std	Y+18, r25	; 0x12
    27fa:	89 8b       	std	Y+17, r24	; 0x11
		AnalogValue = (DigitalValue * (u64)5000)/1024;
    27fc:	89 89       	ldd	r24, Y+17	; 0x11
    27fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2800:	5c 01       	movw	r10, r24
    2802:	cc 24       	eor	r12, r12
    2804:	dd 24       	eor	r13, r13
    2806:	ee 24       	eor	r14, r14
    2808:	ff 24       	eor	r15, r15
    280a:	87 01       	movw	r16, r14
    280c:	2a 2d       	mov	r18, r10
    280e:	3b 2d       	mov	r19, r11
    2810:	4c 2d       	mov	r20, r12
    2812:	5d 2d       	mov	r21, r13
    2814:	6e 2d       	mov	r22, r14
    2816:	7f 2d       	mov	r23, r15
    2818:	80 2f       	mov	r24, r16
    281a:	91 2f       	mov	r25, r17
    281c:	0f 2e       	mov	r0, r31
    281e:	f8 e8       	ldi	r31, 0x88	; 136
    2820:	af 2e       	mov	r10, r31
    2822:	f0 2d       	mov	r31, r0
    2824:	0f 2e       	mov	r0, r31
    2826:	f3 e1       	ldi	r31, 0x13	; 19
    2828:	bf 2e       	mov	r11, r31
    282a:	f0 2d       	mov	r31, r0
    282c:	cc 24       	eor	r12, r12
    282e:	dd 24       	eor	r13, r13
    2830:	ee 24       	eor	r14, r14
    2832:	ff 24       	eor	r15, r15
    2834:	00 e0       	ldi	r16, 0x00	; 0
    2836:	10 e0       	ldi	r17, 0x00	; 0
    2838:	0e 94 41 00 	call	0x82	; 0x82 <__muldi3>
    283c:	22 2e       	mov	r2, r18
    283e:	33 2e       	mov	r3, r19
    2840:	44 2e       	mov	r4, r20
    2842:	55 2e       	mov	r5, r21
    2844:	66 2e       	mov	r6, r22
    2846:	77 2e       	mov	r7, r23
    2848:	88 2e       	mov	r8, r24
    284a:	99 2e       	mov	r9, r25
    284c:	a2 2c       	mov	r10, r2
    284e:	b3 2c       	mov	r11, r3
    2850:	c4 2c       	mov	r12, r4
    2852:	d5 2c       	mov	r13, r5
    2854:	e6 2c       	mov	r14, r6
    2856:	f7 2c       	mov	r15, r7
    2858:	08 2d       	mov	r16, r8
    285a:	19 2d       	mov	r17, r9
    285c:	2a 2d       	mov	r18, r10
    285e:	3b 2d       	mov	r19, r11
    2860:	4c 2d       	mov	r20, r12
    2862:	5d 2d       	mov	r21, r13
    2864:	6e 2d       	mov	r22, r14
    2866:	7f 2d       	mov	r23, r15
    2868:	80 2f       	mov	r24, r16
    286a:	91 2f       	mov	r25, r17
    286c:	0a e0       	ldi	r16, 0x0A	; 10
    286e:	0e 94 3c 01 	call	0x278	; 0x278 <__lshrdi3>
    2872:	a2 2e       	mov	r10, r18
    2874:	b3 2e       	mov	r11, r19
    2876:	c4 2e       	mov	r12, r20
    2878:	d5 2e       	mov	r13, r21
    287a:	e6 2e       	mov	r14, r22
    287c:	f7 2e       	mov	r15, r23
    287e:	08 2f       	mov	r16, r24
    2880:	19 2f       	mov	r17, r25
    2882:	2a 2d       	mov	r18, r10
    2884:	3b 2d       	mov	r19, r11
    2886:	4c 2d       	mov	r20, r12
    2888:	5d 2d       	mov	r21, r13
    288a:	6e 2d       	mov	r22, r14
    288c:	7f 2d       	mov	r23, r15
    288e:	80 2f       	mov	r24, r16
    2890:	91 2f       	mov	r25, r17
    2892:	38 8b       	std	Y+16, r19	; 0x10
    2894:	2f 87       	std	Y+15, r18	; 0x0f
		LCD_VoidSetPositin(0,0);
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_VoidSetPositin>
		LCD_VoidSendNum(AnalogValue/10);
    289e:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a0:	98 89       	ldd	r25, Y+16	; 0x10
    28a2:	2a e0       	ldi	r18, 0x0A	; 10
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	b9 01       	movw	r22, r18
    28a8:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__udivmodhi4>
    28ac:	cb 01       	movw	r24, r22
    28ae:	cc 01       	movw	r24, r24
    28b0:	a0 e0       	ldi	r26, 0x00	; 0
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_VoidSendNum>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	aa e7       	ldi	r26, 0x7A	; 122
    28c2:	b4 e4       	ldi	r27, 0x44	; 68
    28c4:	8b 87       	std	Y+11, r24	; 0x0b
    28c6:	9c 87       	std	Y+12, r25	; 0x0c
    28c8:	ad 87       	std	Y+13, r26	; 0x0d
    28ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8f 83       	std	Y+7, r24	; 0x07
    28e6:	98 87       	std	Y+8, r25	; 0x08
    28e8:	a9 87       	std	Y+9, r26	; 0x09
    28ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <main+0x158>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
    290c:	3f c0       	rjmp	.+126    	; 0x298c <main+0x1d6>
	else if (__tmp > 65535)
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6b 85       	ldd	r22, Y+11	; 0x0b
    2928:	7c 85       	ldd	r23, Y+12	; 0x0c
    292a:	8d 85       	ldd	r24, Y+13	; 0x0d
    292c:	9e 85       	ldd	r25, Y+14	; 0x0e
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
    294e:	0f c0       	rjmp	.+30     	; 0x296e <main+0x1b8>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <main+0x1a6>
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <main+0x19a>
    2976:	3d cf       	rjmp	.-390    	; 0x27f2 <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <main+0x1e2>
    299c:	9a 83       	std	Y+2, r25	; 0x02
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	28 cf       	rjmp	.-432    	; 0x27f2 <main+0x3c>

000029a2 <__mulsi3>:
    29a2:	62 9f       	mul	r22, r18
    29a4:	d0 01       	movw	r26, r0
    29a6:	73 9f       	mul	r23, r19
    29a8:	f0 01       	movw	r30, r0
    29aa:	82 9f       	mul	r24, r18
    29ac:	e0 0d       	add	r30, r0
    29ae:	f1 1d       	adc	r31, r1
    29b0:	64 9f       	mul	r22, r20
    29b2:	e0 0d       	add	r30, r0
    29b4:	f1 1d       	adc	r31, r1
    29b6:	92 9f       	mul	r25, r18
    29b8:	f0 0d       	add	r31, r0
    29ba:	83 9f       	mul	r24, r19
    29bc:	f0 0d       	add	r31, r0
    29be:	74 9f       	mul	r23, r20
    29c0:	f0 0d       	add	r31, r0
    29c2:	65 9f       	mul	r22, r21
    29c4:	f0 0d       	add	r31, r0
    29c6:	99 27       	eor	r25, r25
    29c8:	72 9f       	mul	r23, r18
    29ca:	b0 0d       	add	r27, r0
    29cc:	e1 1d       	adc	r30, r1
    29ce:	f9 1f       	adc	r31, r25
    29d0:	63 9f       	mul	r22, r19
    29d2:	b0 0d       	add	r27, r0
    29d4:	e1 1d       	adc	r30, r1
    29d6:	f9 1f       	adc	r31, r25
    29d8:	bd 01       	movw	r22, r26
    29da:	cf 01       	movw	r24, r30
    29dc:	11 24       	eor	r1, r1
    29de:	08 95       	ret

000029e0 <__udivmodhi4>:
    29e0:	aa 1b       	sub	r26, r26
    29e2:	bb 1b       	sub	r27, r27
    29e4:	51 e1       	ldi	r21, 0x11	; 17
    29e6:	07 c0       	rjmp	.+14     	; 0x29f6 <__udivmodhi4_ep>

000029e8 <__udivmodhi4_loop>:
    29e8:	aa 1f       	adc	r26, r26
    29ea:	bb 1f       	adc	r27, r27
    29ec:	a6 17       	cp	r26, r22
    29ee:	b7 07       	cpc	r27, r23
    29f0:	10 f0       	brcs	.+4      	; 0x29f6 <__udivmodhi4_ep>
    29f2:	a6 1b       	sub	r26, r22
    29f4:	b7 0b       	sbc	r27, r23

000029f6 <__udivmodhi4_ep>:
    29f6:	88 1f       	adc	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	5a 95       	dec	r21
    29fc:	a9 f7       	brne	.-22     	; 0x29e8 <__udivmodhi4_loop>
    29fe:	80 95       	com	r24
    2a00:	90 95       	com	r25
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	08 95       	ret

00002a08 <__udivmodsi4>:
    2a08:	a1 e2       	ldi	r26, 0x21	; 33
    2a0a:	1a 2e       	mov	r1, r26
    2a0c:	aa 1b       	sub	r26, r26
    2a0e:	bb 1b       	sub	r27, r27
    2a10:	fd 01       	movw	r30, r26
    2a12:	0d c0       	rjmp	.+26     	; 0x2a2e <__udivmodsi4_ep>

00002a14 <__udivmodsi4_loop>:
    2a14:	aa 1f       	adc	r26, r26
    2a16:	bb 1f       	adc	r27, r27
    2a18:	ee 1f       	adc	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	a2 17       	cp	r26, r18
    2a1e:	b3 07       	cpc	r27, r19
    2a20:	e4 07       	cpc	r30, r20
    2a22:	f5 07       	cpc	r31, r21
    2a24:	20 f0       	brcs	.+8      	; 0x2a2e <__udivmodsi4_ep>
    2a26:	a2 1b       	sub	r26, r18
    2a28:	b3 0b       	sbc	r27, r19
    2a2a:	e4 0b       	sbc	r30, r20
    2a2c:	f5 0b       	sbc	r31, r21

00002a2e <__udivmodsi4_ep>:
    2a2e:	66 1f       	adc	r22, r22
    2a30:	77 1f       	adc	r23, r23
    2a32:	88 1f       	adc	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	1a 94       	dec	r1
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <__udivmodsi4_loop>
    2a3a:	60 95       	com	r22
    2a3c:	70 95       	com	r23
    2a3e:	80 95       	com	r24
    2a40:	90 95       	com	r25
    2a42:	9b 01       	movw	r18, r22
    2a44:	ac 01       	movw	r20, r24
    2a46:	bd 01       	movw	r22, r26
    2a48:	cf 01       	movw	r24, r30
    2a4a:	08 95       	ret

00002a4c <__prologue_saves__>:
    2a4c:	2f 92       	push	r2
    2a4e:	3f 92       	push	r3
    2a50:	4f 92       	push	r4
    2a52:	5f 92       	push	r5
    2a54:	6f 92       	push	r6
    2a56:	7f 92       	push	r7
    2a58:	8f 92       	push	r8
    2a5a:	9f 92       	push	r9
    2a5c:	af 92       	push	r10
    2a5e:	bf 92       	push	r11
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	ca 1b       	sub	r28, r26
    2a76:	db 0b       	sbc	r29, r27
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	09 94       	ijmp

00002a84 <__epilogue_restores__>:
    2a84:	2a 88       	ldd	r2, Y+18	; 0x12
    2a86:	39 88       	ldd	r3, Y+17	; 0x11
    2a88:	48 88       	ldd	r4, Y+16	; 0x10
    2a8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a90:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a92:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a94:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a96:	b9 84       	ldd	r11, Y+9	; 0x09
    2a98:	c8 84       	ldd	r12, Y+8	; 0x08
    2a9a:	df 80       	ldd	r13, Y+7	; 0x07
    2a9c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a9e:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa0:	0c 81       	ldd	r16, Y+4	; 0x04
    2aa2:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa4:	aa 81       	ldd	r26, Y+2	; 0x02
    2aa6:	b9 81       	ldd	r27, Y+1	; 0x01
    2aa8:	ce 0f       	add	r28, r30
    2aaa:	d1 1d       	adc	r29, r1
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	ed 01       	movw	r28, r26
    2ab8:	08 95       	ret

00002aba <_exit>:
    2aba:	f8 94       	cli

00002abc <__stop_program>:
    2abc:	ff cf       	rjmp	.-2      	; 0x2abc <__stop_program>
