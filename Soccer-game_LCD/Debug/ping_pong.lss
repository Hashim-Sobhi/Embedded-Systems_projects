
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002962  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002962  000029d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b90  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ac9  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005049  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000051a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000737d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000847e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <main>
      7a:	0c 94 af 14 	jmp	0x295e	; 0x295e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_VoidSetPinDirection>:
#include "BIT_MATHS.h"
#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_VoidSetPinDirection(u8 Port,u8 Pin,u8 Direction)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	27 97       	sbiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if (OUTPUT_PIN == Direction)//output
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <DIO_VoidSetPinDirection+0x22>
     cae:	6f c0       	rjmp	.+222    	; 0xd8e <DIO_VoidSetPinDirection+0x100>
	{
		switch(Port)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3f 83       	std	Y+7, r19	; 0x07
     cb8:	2e 83       	std	Y+6, r18	; 0x06
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	49 f1       	breq	.+82     	; 0xd16 <DIO_VoidSetPinDirection+0x88>
     cc4:	2e 81       	ldd	r18, Y+6	; 0x06
     cc6:	3f 81       	ldd	r19, Y+7	; 0x07
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <DIO_VoidSetPinDirection+0x4a>
     cce:	8e 81       	ldd	r24, Y+6	; 0x06
     cd0:	9f 81       	ldd	r25, Y+7	; 0x07
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <DIO_VoidSetPinDirection+0x60>
     cd6:	d2 c0       	rjmp	.+420    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
     cd8:	2e 81       	ldd	r18, Y+6	; 0x06
     cda:	3f 81       	ldd	r19, Y+7	; 0x07
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	71 f1       	breq	.+92     	; 0xd3e <DIO_VoidSetPinDirection+0xb0>
     ce2:	8e 81       	ldd	r24, Y+6	; 0x06
     ce4:	9f 81       	ldd	r25, Y+7	; 0x07
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	e9 f1       	breq	.+122    	; 0xd66 <DIO_VoidSetPinDirection+0xd8>
     cec:	c7 c0       	rjmp	.+398    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
		{
			case PORT_A: SET_BIT(DDRA,Pin); break;
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_VoidSetPinDirection+0x7e>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_VoidSetPinDirection+0x7a>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	b3 c0       	rjmp	.+358    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
			case PORT_B: SET_BIT(DDRB,Pin); break;
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_VoidSetPinDirection+0xa6>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_VoidSetPinDirection+0xa2>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	9f c0       	rjmp	.+318    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
			case PORT_C: SET_BIT(DDRC,Pin); break;
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_VoidSetPinDirection+0xce>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_VoidSetPinDirection+0xca>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	8b c0       	rjmp	.+278    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
			case PORT_D: SET_BIT(DDRD,Pin); break;
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_VoidSetPinDirection+0xf6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_VoidSetPinDirection+0xf2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	77 c0       	rjmp	.+238    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
		}
	}
	else if(INPUT_PIN == Direction) //input
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_VoidSetPinDirection+0x108>
     d94:	73 c0       	rjmp	.+230    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
	{
		switch(Port)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <DIO_VoidSetPinDirection+0x172>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_VoidSetPinDirection+0x130>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <DIO_VoidSetPinDirection+0x148>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <DIO_VoidSetPinDirection+0x19c>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_VoidSetPinDirection+0x146>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <DIO_VoidSetPinDirection+0x1c6>
     dd4:	53 c0       	rjmp	.+166    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
		{
			case PORT_A: CLR_BIT(DDRA,Pin); break;
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_VoidSetPinDirection+0x166>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_VoidSetPinDirection+0x162>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	3e c0       	rjmp	.+124    	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
			case PORT_B: CLR_BIT(DDRB,Pin); break;
     e00:	a7 e3       	ldi	r26, 0x37	; 55
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e7 e3       	ldi	r30, 0x37	; 55
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_VoidSetPinDirection+0x190>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_VoidSetPinDirection+0x18c>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	29 c0       	rjmp	.+82     	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
			case PORT_C: CLR_BIT(DDRC,Pin); break;
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_VoidSetPinDirection+0x1ba>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_VoidSetPinDirection+0x1b6>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <DIO_VoidSetPinDirection+0x1ee>
			case PORT_D: CLR_BIT(DDRD,Pin); break;
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_VoidSetPinDirection+0x1e4>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_VoidSetPinDirection+0x1e0>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
			
		}
	}
}
     e7c:	27 96       	adiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Port,u8 Direction)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_VoidSetPortDirection+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_VoidSetPortDirection+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3c 83       	std	Y+4, r19	; 0x04
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	d1 f0       	breq	.+52     	; 0xee6 <DIO_VoidSetPortDirection+0x58>
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	2c f4       	brge	.+10     	; 0xec6 <DIO_VoidSetPortDirection+0x38>
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	61 f0       	breq	.+24     	; 0xedc <DIO_VoidSetPortDirection+0x4e>
     ec4:	1e c0       	rjmp	.+60     	; 0xf02 <DIO_VoidSetPortDirection+0x74>
     ec6:	2b 81       	ldd	r18, Y+3	; 0x03
     ec8:	3c 81       	ldd	r19, Y+4	; 0x04
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	81 f0       	breq	.+32     	; 0xef0 <DIO_VoidSetPortDirection+0x62>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	81 f0       	breq	.+32     	; 0xefa <DIO_VoidSetPortDirection+0x6c>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <DIO_VoidSetPortDirection+0x74>
	{
		case PORT_A: DDRA=Direction; break;
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	80 83       	st	Z, r24
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <DIO_VoidSetPortDirection+0x74>
		case PORT_B: DDRB=Direction; break;
     ee6:	e7 e3       	ldi	r30, 0x37	; 55
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <DIO_VoidSetPortDirection+0x74>
		case PORT_C: DDRC=Direction; break;
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 83       	st	Z, r24
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <DIO_VoidSetPortDirection+0x74>
		case PORT_D: DDRD=Direction; break;
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	80 83       	st	Z, r24
			
			
	}
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <DIO_VoidSetPinValue>:


void DIO_VoidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	27 97       	sbiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
     f28:	4b 83       	std	Y+3, r20	; 0x03
	if (SET==Value)//set
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <DIO_VoidSetPinValue+0x22>
     f30:	6f c0       	rjmp	.+222    	; 0x1010 <DIO_VoidSetPinValue+0x100>
	{
		switch(Port)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3f 83       	std	Y+7, r19	; 0x07
     f3a:	2e 83       	std	Y+6, r18	; 0x06
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	49 f1       	breq	.+82     	; 0xf98 <DIO_VoidSetPinValue+0x88>
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	3f 81       	ldd	r19, Y+7	; 0x07
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	2c f4       	brge	.+10     	; 0xf5a <DIO_VoidSetPinValue+0x4a>
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	9f 81       	ldd	r25, Y+7	; 0x07
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	61 f0       	breq	.+24     	; 0xf70 <DIO_VoidSetPinValue+0x60>
     f58:	d2 c0       	rjmp	.+420    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
     f5a:	2e 81       	ldd	r18, Y+6	; 0x06
     f5c:	3f 81       	ldd	r19, Y+7	; 0x07
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	71 f1       	breq	.+92     	; 0xfc0 <DIO_VoidSetPinValue+0xb0>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	e9 f1       	breq	.+122    	; 0xfe8 <DIO_VoidSetPinValue+0xd8>
     f6e:	c7 c0       	rjmp	.+398    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
		{
			case PORT_A: SET_BIT(PORTA,Pin); break;
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VoidSetPinValue+0x7e>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VoidSetPinValue+0x7a>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	b3 c0       	rjmp	.+358    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
			case PORT_B: SET_BIT(PORTB,Pin); break;
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_VoidSetPinValue+0xa6>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_VoidSetPinValue+0xa2>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	9f c0       	rjmp	.+318    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
			case PORT_C: SET_BIT(PORTC,Pin); break;
     fc0:	a5 e3       	ldi	r26, 0x35	; 53
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_VoidSetPinValue+0xce>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_VoidSetPinValue+0xca>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	8b c0       	rjmp	.+278    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
			case PORT_D: SET_BIT(PORTD,Pin); break;
     fe8:	a2 e3       	ldi	r26, 0x32	; 50
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_VoidSetPinValue+0xf6>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_VoidSetPinValue+0xf2>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	77 c0       	rjmp	.+238    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
		}
	}
	else if(CLR == Value) //clr
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 23       	and	r24, r24
    1014:	09 f0       	breq	.+2      	; 0x1018 <DIO_VoidSetPinValue+0x108>
    1016:	73 c0       	rjmp	.+230    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
	{
		switch(Port)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	59 f1       	breq	.+86     	; 0x1082 <DIO_VoidSetPinValue+0x172>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	2c f4       	brge	.+10     	; 0x1040 <DIO_VoidSetPinValue+0x130>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	69 f0       	breq	.+26     	; 0x1058 <DIO_VoidSetPinValue+0x148>
    103e:	5f c0       	rjmp	.+190    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
    1040:	2c 81       	ldd	r18, Y+4	; 0x04
    1042:	3d 81       	ldd	r19, Y+5	; 0x05
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	31 05       	cpc	r19, r1
    1048:	89 f1       	breq	.+98     	; 0x10ac <DIO_VoidSetPinValue+0x19c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_VoidSetPinValue+0x146>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <DIO_VoidSetPinValue+0x1c6>
    1056:	53 c0       	rjmp	.+166    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
		{
			case PORT_A: CLR_BIT(PORTA,Pin); break;
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_VoidSetPinValue+0x166>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_VoidSetPinValue+0x162>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	3e c0       	rjmp	.+124    	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
			case PORT_B: CLR_BIT(PORTB,Pin); break;
    1082:	a8 e3       	ldi	r26, 0x38	; 56
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e3       	ldi	r30, 0x38	; 56
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_VoidSetPinValue+0x190>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_VoidSetPinValue+0x18c>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
			case PORT_C: CLR_BIT(PORTC,Pin); break;
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_VoidSetPinValue+0x1ba>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_VoidSetPinValue+0x1b6>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <DIO_VoidSetPinValue+0x1ee>
			case PORT_D: CLR_BIT(PORTD,Pin); break;
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_VoidSetPinValue+0x1e4>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_VoidSetPinValue+0x1e0>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
		}
	}
}
    10fe:	27 96       	adiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Port,u8 Value)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_VoidSetPortValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_VoidSetPortValue+0x8>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <DIO_VoidSetPortValue+0x58>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <DIO_VoidSetPortValue+0x38>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <DIO_VoidSetPortValue+0x4e>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <DIO_VoidSetPortValue+0x74>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <DIO_VoidSetPortValue+0x62>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <DIO_VoidSetPortValue+0x6c>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_VoidSetPortValue+0x74>
	{
		case PORT_A: PORTA=Value; break;
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <DIO_VoidSetPortValue+0x74>
		case PORT_B: PORTB=Value; break;
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <DIO_VoidSetPortValue+0x74>
		case PORT_C: PORTC=Value; break;
    1172:	e5 e3       	ldi	r30, 0x35	; 53
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <DIO_VoidSetPortValue+0x74>
		case PORT_D: PORTD=Value; break;			
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
	}
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Port,u8 Pin)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	27 97       	sbiw	r28, 0x07	; 7
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 x;
	switch(Port)
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3e 83       	std	Y+6, r19	; 0x06
    11b2:	2d 83       	std	Y+5, r18	; 0x05
    11b4:	4d 81       	ldd	r20, Y+5	; 0x05
    11b6:	5e 81       	ldd	r21, Y+6	; 0x06
    11b8:	41 30       	cpi	r20, 0x01	; 1
    11ba:	51 05       	cpc	r21, r1
    11bc:	49 f1       	breq	.+82     	; 0x1210 <DIO_U8GetPinValue+0x7e>
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	91 05       	cpc	r25, r1
    11c6:	34 f4       	brge	.+12     	; 0x11d4 <DIO_U8GetPinValue+0x42>
    11c8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ca:	3e 81       	ldd	r19, Y+6	; 0x06
    11cc:	21 15       	cp	r18, r1
    11ce:	31 05       	cpc	r19, r1
    11d0:	61 f0       	breq	.+24     	; 0x11ea <DIO_U8GetPinValue+0x58>
    11d2:	57 c0       	rjmp	.+174    	; 0x1282 <DIO_U8GetPinValue+0xf0>
    11d4:	4d 81       	ldd	r20, Y+5	; 0x05
    11d6:	5e 81       	ldd	r21, Y+6	; 0x06
    11d8:	42 30       	cpi	r20, 0x02	; 2
    11da:	51 05       	cpc	r21, r1
    11dc:	61 f1       	breq	.+88     	; 0x1236 <DIO_U8GetPinValue+0xa4>
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	d1 f1       	breq	.+116    	; 0x125c <DIO_U8GetPinValue+0xca>
    11e8:	4c c0       	rjmp	.+152    	; 0x1282 <DIO_U8GetPinValue+0xf0>
	{
		case PORT_A: return GET_BIT(PINA,Pin); break;
    11ea:	e9 e3       	ldi	r30, 0x39	; 57
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_U8GetPinValue+0x70>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_U8GetPinValue+0x6c>
    1206:	ca 01       	movw	r24, r20
    1208:	58 2f       	mov	r21, r24
    120a:	51 70       	andi	r21, 0x01	; 1
    120c:	5c 83       	std	Y+4, r21	; 0x04
    120e:	3a c0       	rjmp	.+116    	; 0x1284 <DIO_U8GetPinValue+0xf2>
		case PORT_B: return GET_BIT(PINB,Pin); break;
    1210:	e6 e3       	ldi	r30, 0x36	; 54
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_U8GetPinValue+0x96>
    1224:	55 95       	asr	r21
    1226:	47 95       	ror	r20
    1228:	8a 95       	dec	r24
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_U8GetPinValue+0x92>
    122c:	ca 01       	movw	r24, r20
    122e:	58 2f       	mov	r21, r24
    1230:	51 70       	andi	r21, 0x01	; 1
    1232:	5c 83       	std	Y+4, r21	; 0x04
    1234:	27 c0       	rjmp	.+78     	; 0x1284 <DIO_U8GetPinValue+0xf2>
		case PORT_C: return GET_BIT(PINC,Pin); break;
    1236:	e3 e3       	ldi	r30, 0x33	; 51
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_U8GetPinValue+0xbc>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_U8GetPinValue+0xb8>
    1252:	ca 01       	movw	r24, r20
    1254:	58 2f       	mov	r21, r24
    1256:	51 70       	andi	r21, 0x01	; 1
    1258:	5c 83       	std	Y+4, r21	; 0x04
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <DIO_U8GetPinValue+0xf2>
		case PORT_D: return GET_BIT(PIND,Pin); break;
    125c:	e0 e3       	ldi	r30, 0x30	; 48
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_U8GetPinValue+0xe2>
    1270:	55 95       	asr	r21
    1272:	47 95       	ror	r20
    1274:	8a 95       	dec	r24
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_U8GetPinValue+0xde>
    1278:	ca 01       	movw	r24, r20
    127a:	58 2f       	mov	r21, r24
    127c:	51 70       	andi	r21, 0x01	; 1
    127e:	5c 83       	std	Y+4, r21	; 0x04
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <DIO_U8GetPinValue+0xf2>
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_U8GetPinValue+0xf6>
	}
	
}
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	8f 83       	std	Y+7, r24	; 0x07
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	27 96       	adiw	r28, 0x07	; 7
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <DIO_VoidTogglePin>:
void DIO_VoidTogglePin(u8 Port,u8 Pin)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_VoidTogglePin+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <DIO_VoidTogglePin+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3c 83       	std	Y+4, r19	; 0x04
    12b4:	2b 83       	std	Y+3, r18	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	49 f1       	breq	.+82     	; 0x1312 <DIO_VoidTogglePin+0x76>
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	3c 81       	ldd	r19, Y+4	; 0x04
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <DIO_VoidTogglePin+0x38>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	61 f0       	breq	.+24     	; 0x12ea <DIO_VoidTogglePin+0x4e>
    12d2:	5a c0       	rjmp	.+180    	; 0x1388 <DIO_VoidTogglePin+0xec>
    12d4:	2b 81       	ldd	r18, Y+3	; 0x03
    12d6:	3c 81       	ldd	r19, Y+4	; 0x04
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	71 f1       	breq	.+92     	; 0x133a <DIO_VoidTogglePin+0x9e>
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	e9 f1       	breq	.+122    	; 0x1362 <DIO_VoidTogglePin+0xc6>
    12e8:	4f c0       	rjmp	.+158    	; 0x1388 <DIO_VoidTogglePin+0xec>
	{
		case PORT_A: TOG_BIT(PORTA,Pin); break;
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_VoidTogglePin+0x6c>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_VoidTogglePin+0x68>
    130c:	84 27       	eor	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	3b c0       	rjmp	.+118    	; 0x1388 <DIO_VoidTogglePin+0xec>
		case PORT_B: TOG_BIT(PORTB,Pin); break;
    1312:	a8 e3       	ldi	r26, 0x38	; 56
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_VoidTogglePin+0x94>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_VoidTogglePin+0x90>
    1334:	84 27       	eor	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	27 c0       	rjmp	.+78     	; 0x1388 <DIO_VoidTogglePin+0xec>
		case PORT_C: TOG_BIT(PORTC,Pin); break;
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_VoidTogglePin+0xbc>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_VoidTogglePin+0xb8>
    135c:	84 27       	eor	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	13 c0       	rjmp	.+38     	; 0x1388 <DIO_VoidTogglePin+0xec>
		case PORT_D: TOG_BIT(PORTD,Pin); break;
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_VoidTogglePin+0xe4>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_VoidTogglePin+0xe0>
    1384:	84 27       	eor	r24, r20
    1386:	8c 93       	st	X, r24
	}

    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <LCD_VoidInit>:
#include "LCD_Config.h"
#include <avr/delay.h>
#include "BIT_MATHS.h"

void LCD_VoidInit(void)
{
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	cd 54       	subi	r28, 0x4D	; 77
    13a4:	d0 40       	sbci	r29, 0x00	; 0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
	//POWER ON
	//ENABLE PORT DATA
	DIO_VoidSetPortDirection(DATA_PORT,0xFF);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	6f ef       	ldi	r22, 0xFF	; 255
    13b4:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_VoidSetPortDirection>
	//ENABLE RS 
	DIO_VoidSetPinDirection(CNRL_PORT,PIN_0,OUTPUT_PIN);
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VoidSetPinDirection>
	//ENABLE R/W
	DIO_VoidSetPinDirection(CNRL_PORT,PIN_1,OUTPUT_PIN);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VoidSetPinDirection>
	//ENABLE E
	DIO_VoidSetPinDirection(CNRL_PORT,PIN_2,OUTPUT_PIN);
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VoidSetPinDirection>
    13d6:	fe 01       	movw	r30, r28
    13d8:	e7 5b       	subi	r30, 0xB7	; 183
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e2       	ldi	r26, 0x20	; 32
    13e2:	b2 e4       	ldi	r27, 0x42	; 66
    13e4:	80 83       	st	Z, r24
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	a2 83       	std	Z+2, r26	; 0x02
    13ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	8e 01       	movw	r16, r28
    13ee:	0b 5b       	subi	r16, 0xBB	; 187
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	fe 01       	movw	r30, r28
    13f4:	e7 5b       	subi	r30, 0xB7	; 183
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	4a ef       	ldi	r20, 0xFA	; 250
    1406:	54 e4       	ldi	r21, 0x44	; 68
    1408:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	f8 01       	movw	r30, r16
    1412:	80 83       	st	Z, r24
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	a2 83       	std	Z+2, r26	; 0x02
    1418:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    141a:	fe 01       	movw	r30, r28
    141c:	eb 5b       	subi	r30, 0xBB	; 187
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	44 f4       	brge	.+16     	; 0x1448 <LCD_VoidInit+0xb2>
		__ticks = 1;
    1438:	fe 01       	movw	r30, r28
    143a:	ed 5b       	subi	r30, 0xBD	; 189
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	64 c0       	rjmp	.+200    	; 0x1510 <LCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    1448:	fe 01       	movw	r30, r28
    144a:	eb 5b       	subi	r30, 0xBB	; 187
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	0c f0       	brlt	.+2      	; 0x1468 <LCD_VoidInit+0xd2>
    1466:	43 c0       	rjmp	.+134    	; 0x14ee <LCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1468:	fe 01       	movw	r30, r28
    146a:	e7 5b       	subi	r30, 0xB7	; 183
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	8e 01       	movw	r16, r28
    1488:	0d 5b       	subi	r16, 0xBD	; 189
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	f8 01       	movw	r30, r16
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
    149e:	1f c0       	rjmp	.+62     	; 0x14de <LCD_VoidInit+0x148>
    14a0:	fe 01       	movw	r30, r28
    14a2:	ef 5b       	subi	r30, 0xBF	; 191
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ae:	fe 01       	movw	r30, r28
    14b0:	ef 5b       	subi	r30, 0xBF	; 191
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <LCD_VoidInit+0x122>
    14bc:	fe 01       	movw	r30, r28
    14be:	ef 5b       	subi	r30, 0xBF	; 191
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	91 83       	std	Z+1, r25	; 0x01
    14c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c6:	de 01       	movw	r26, r28
    14c8:	ad 5b       	subi	r26, 0xBD	; 189
    14ca:	bf 4f       	sbci	r27, 0xFF	; 255
    14cc:	fe 01       	movw	r30, r28
    14ce:	ed 5b       	subi	r30, 0xBD	; 189
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	9c 93       	st	X, r25
    14dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	fe 01       	movw	r30, r28
    14e0:	ed 5b       	subi	r30, 0xBD	; 189
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 81       	ld	r24, Z
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	d1 f6       	brne	.-76     	; 0x14a0 <LCD_VoidInit+0x10a>
    14ec:	24 c0       	rjmp	.+72     	; 0x1536 <LCD_VoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ee:	8e 01       	movw	r16, r28
    14f0:	0d 5b       	subi	r16, 0xBD	; 189
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	fe 01       	movw	r30, r28
    14f6:	eb 5b       	subi	r30, 0xBB	; 187
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	f8 01       	movw	r30, r16
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	fe 01       	movw	r30, r28
    1512:	ed 5b       	subi	r30, 0xBD	; 189
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	80 81       	ld	r24, Z
    1518:	91 81       	ldd	r25, Z+1	; 0x01
    151a:	fe 01       	movw	r30, r28
    151c:	ff 96       	adiw	r30, 0x3f	; 63
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	fe 01       	movw	r30, r28
    1524:	ff 96       	adiw	r30, 0x3f	; 63
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <LCD_VoidInit+0x194>
    152e:	fe 01       	movw	r30, r28
    1530:	ff 96       	adiw	r30, 0x3f	; 63
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
	_delay_ms(40);
	// function set 
	LCD_VoidSendCommand(LCD_FUNSET8BIT);
    1536:	88 e3       	ldi	r24, 0x38	; 56
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a8 ec       	ldi	r26, 0xC8	; 200
    1544:	b2 e4       	ldi	r27, 0x42	; 66
    1546:	8b af       	std	Y+59, r24	; 0x3b
    1548:	9c af       	std	Y+60, r25	; 0x3c
    154a:	ad af       	std	Y+61, r26	; 0x3d
    154c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    154e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1550:	7c ad       	ldd	r23, Y+60	; 0x3c
    1552:	8d ad       	ldd	r24, Y+61	; 0x3d
    1554:	9e ad       	ldd	r25, Y+62	; 0x3e
    1556:	2b ea       	ldi	r18, 0xAB	; 171
    1558:	3a ea       	ldi	r19, 0xAA	; 170
    155a:	4a e2       	ldi	r20, 0x2A	; 42
    155c:	50 e4       	ldi	r21, 0x40	; 64
    155e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	8f ab       	std	Y+55, r24	; 0x37
    1568:	98 af       	std	Y+56, r25	; 0x38
    156a:	a9 af       	std	Y+57, r26	; 0x39
    156c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    156e:	6f a9       	ldd	r22, Y+55	; 0x37
    1570:	78 ad       	ldd	r23, Y+56	; 0x38
    1572:	89 ad       	ldd	r24, Y+57	; 0x39
    1574:	9a ad       	ldd	r25, Y+58	; 0x3a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	1c f4       	brge	.+6      	; 0x158c <LCD_VoidInit+0x1f6>
		__ticks = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	8e ab       	std	Y+54, r24	; 0x36
    158a:	91 c0       	rjmp	.+290    	; 0x16ae <LCD_VoidInit+0x318>
	else if (__tmp > 255)
    158c:	6f a9       	ldd	r22, Y+55	; 0x37
    158e:	78 ad       	ldd	r23, Y+56	; 0x38
    1590:	89 ad       	ldd	r24, Y+57	; 0x39
    1592:	9a ad       	ldd	r25, Y+58	; 0x3a
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	53 e4       	ldi	r21, 0x43	; 67
    159c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	0c f0       	brlt	.+2      	; 0x15a6 <LCD_VoidInit+0x210>
    15a4:	7b c0       	rjmp	.+246    	; 0x169c <LCD_VoidInit+0x306>
	{
		_delay_ms(__us / 1000.0);
    15a6:	6b ad       	ldd	r22, Y+59	; 0x3b
    15a8:	7c ad       	ldd	r23, Y+60	; 0x3c
    15aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a e7       	ldi	r20, 0x7A	; 122
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8a ab       	std	Y+50, r24	; 0x32
    15c0:	9b ab       	std	Y+51, r25	; 0x33
    15c2:	ac ab       	std	Y+52, r26	; 0x34
    15c4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6a a9       	ldd	r22, Y+50	; 0x32
    15c8:	7b a9       	ldd	r23, Y+51	; 0x33
    15ca:	8c a9       	ldd	r24, Y+52	; 0x34
    15cc:	9d a9       	ldd	r25, Y+53	; 0x35
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8e a7       	std	Y+46, r24	; 0x2e
    15e0:	9f a7       	std	Y+47, r25	; 0x2f
    15e2:	a8 ab       	std	Y+48, r26	; 0x30
    15e4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    15e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    15e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    15ea:	88 a9       	ldd	r24, Y+48	; 0x30
    15ec:	99 a9       	ldd	r25, Y+49	; 0x31
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <LCD_VoidInit+0x272>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9d a7       	std	Y+45, r25	; 0x2d
    1604:	8c a7       	std	Y+44, r24	; 0x2c
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <LCD_VoidInit+0x2f0>
	else if (__tmp > 65535)
    1608:	6e a5       	ldd	r22, Y+46	; 0x2e
    160a:	7f a5       	ldd	r23, Y+47	; 0x2f
    160c:	88 a9       	ldd	r24, Y+48	; 0x30
    160e:	99 a9       	ldd	r25, Y+49	; 0x31
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <LCD_VoidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6a a9       	ldd	r22, Y+50	; 0x32
    1622:	7b a9       	ldd	r23, Y+51	; 0x33
    1624:	8c a9       	ldd	r24, Y+52	; 0x34
    1626:	9d a9       	ldd	r25, Y+53	; 0x35
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9d a7       	std	Y+45, r25	; 0x2d
    1646:	8c a7       	std	Y+44, r24	; 0x2c
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <LCD_VoidInit+0x2d2>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9b a7       	std	Y+43, r25	; 0x2b
    1650:	8a a7       	std	Y+42, r24	; 0x2a
    1652:	8a a5       	ldd	r24, Y+42	; 0x2a
    1654:	9b a5       	ldd	r25, Y+43	; 0x2b
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_VoidInit+0x2c0>
    165a:	9b a7       	std	Y+43, r25	; 0x2b
    165c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1660:	9d a5       	ldd	r25, Y+45	; 0x2d
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9d a7       	std	Y+45, r25	; 0x2d
    1666:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8c a5       	ldd	r24, Y+44	; 0x2c
    166a:	9d a5       	ldd	r25, Y+45	; 0x2d
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <LCD_VoidInit+0x2b4>
    1670:	24 c0       	rjmp	.+72     	; 0x16ba <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	6e a5       	ldd	r22, Y+46	; 0x2e
    1674:	7f a5       	ldd	r23, Y+47	; 0x2f
    1676:	88 a9       	ldd	r24, Y+48	; 0x30
    1678:	99 a9       	ldd	r25, Y+49	; 0x31
    167a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9d a7       	std	Y+45, r25	; 0x2d
    1684:	8c a7       	std	Y+44, r24	; 0x2c
    1686:	8c a5       	ldd	r24, Y+44	; 0x2c
    1688:	9d a5       	ldd	r25, Y+45	; 0x2d
    168a:	99 a7       	std	Y+41, r25	; 0x29
    168c:	88 a7       	std	Y+40, r24	; 0x28
    168e:	88 a5       	ldd	r24, Y+40	; 0x28
    1690:	99 a5       	ldd	r25, Y+41	; 0x29
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_VoidInit+0x2fc>
    1696:	99 a7       	std	Y+41, r25	; 0x29
    1698:	88 a7       	std	Y+40, r24	; 0x28
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <LCD_VoidInit+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    169c:	6f a9       	ldd	r22, Y+55	; 0x37
    169e:	78 ad       	ldd	r23, Y+56	; 0x38
    16a0:	89 ad       	ldd	r24, Y+57	; 0x39
    16a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8e ab       	std	Y+54, r24	; 0x36
    16ae:	8e a9       	ldd	r24, Y+54	; 0x36
    16b0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16b2:	8f a1       	ldd	r24, Y+39	; 0x27
    16b4:	8a 95       	dec	r24
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_VoidInit+0x31e>
    16b8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	//display On/off control
	u8 Display_Control=LCD_DISPLAYON;
    16ba:	fe 01       	movw	r30, r28
    16bc:	e3 5b       	subi	r30, 0xB3	; 179
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	8c e0       	ldi	r24, 0x0C	; 12
    16c2:	80 83       	st	Z, r24
	//CURSOR DISPLAY 
	#if CURSOR_DISPLAY == ON 
	SET_BIT(Display_Control,BIT_1);
	#elif CURSOR_DISPLAY == OFF
	CLR_BIT(Display_Control,BIT_1);
    16c4:	de 01       	movw	r26, r28
    16c6:	a3 5b       	subi	r26, 0xB3	; 179
    16c8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ca:	fe 01       	movw	r30, r28
    16cc:	e3 5b       	subi	r30, 0xB3	; 179
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	8d 7f       	andi	r24, 0xFD	; 253
    16d4:	8c 93       	st	X, r24
	#endif
	//CURSOR BLINK
	#if CURSOR_BLINK == ON 
	SET_BIT(Display_Control,BIT_0);
	#elif CURSOR_BLINK == OFF
	CLR_BIT(Display_Control,BIT_0);
    16d6:	de 01       	movw	r26, r28
    16d8:	a3 5b       	subi	r26, 0xB3	; 179
    16da:	bf 4f       	sbci	r27, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	e3 5b       	subi	r30, 0xB3	; 179
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	8e 7f       	andi	r24, 0xFE	; 254
    16e6:	8c 93       	st	X, r24
	#endif
	LCD_VoidSendCommand(Display_Control);
    16e8:	fe 01       	movw	r30, r28
    16ea:	e3 5b       	subi	r30, 0xB3	; 179
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a8 ec       	ldi	r26, 0xC8	; 200
    16fe:	b2 e4       	ldi	r27, 0x42	; 66
    1700:	8b a3       	std	Y+35, r24	; 0x23
    1702:	9c a3       	std	Y+36, r25	; 0x24
    1704:	ad a3       	std	Y+37, r26	; 0x25
    1706:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1708:	6b a1       	ldd	r22, Y+35	; 0x23
    170a:	7c a1       	ldd	r23, Y+36	; 0x24
    170c:	8d a1       	ldd	r24, Y+37	; 0x25
    170e:	9e a1       	ldd	r25, Y+38	; 0x26
    1710:	2b ea       	ldi	r18, 0xAB	; 171
    1712:	3a ea       	ldi	r19, 0xAA	; 170
    1714:	4a e2       	ldi	r20, 0x2A	; 42
    1716:	50 e4       	ldi	r21, 0x40	; 64
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8f 8f       	std	Y+31, r24	; 0x1f
    1722:	98 a3       	std	Y+32, r25	; 0x20
    1724:	a9 a3       	std	Y+33, r26	; 0x21
    1726:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1728:	6f 8d       	ldd	r22, Y+31	; 0x1f
    172a:	78 a1       	ldd	r23, Y+32	; 0x20
    172c:	89 a1       	ldd	r24, Y+33	; 0x21
    172e:	9a a1       	ldd	r25, Y+34	; 0x22
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	1c f4       	brge	.+6      	; 0x1746 <LCD_VoidInit+0x3b0>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	8e 8f       	std	Y+30, r24	; 0x1e
    1744:	91 c0       	rjmp	.+290    	; 0x1868 <LCD_VoidInit+0x4d2>
	else if (__tmp > 255)
    1746:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1748:	78 a1       	ldd	r23, Y+32	; 0x20
    174a:	89 a1       	ldd	r24, Y+33	; 0x21
    174c:	9a a1       	ldd	r25, Y+34	; 0x22
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4f e7       	ldi	r20, 0x7F	; 127
    1754:	53 e4       	ldi	r21, 0x43	; 67
    1756:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	0c f0       	brlt	.+2      	; 0x1760 <LCD_VoidInit+0x3ca>
    175e:	7b c0       	rjmp	.+246    	; 0x1856 <LCD_VoidInit+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1760:	6b a1       	ldd	r22, Y+35	; 0x23
    1762:	7c a1       	ldd	r23, Y+36	; 0x24
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a e7       	ldi	r20, 0x7A	; 122
    176e:	54 e4       	ldi	r21, 0x44	; 68
    1770:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8a 8f       	std	Y+26, r24	; 0x1a
    177a:	9b 8f       	std	Y+27, r25	; 0x1b
    177c:	ac 8f       	std	Y+28, r26	; 0x1c
    177e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1782:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1784:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1786:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a ef       	ldi	r20, 0xFA	; 250
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8e 8b       	std	Y+22, r24	; 0x16
    179a:	9f 8b       	std	Y+23, r25	; 0x17
    179c:	a8 8f       	std	Y+24, r26	; 0x18
    179e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    17a0:	6e 89       	ldd	r22, Y+22	; 0x16
    17a2:	7f 89       	ldd	r23, Y+23	; 0x17
    17a4:	88 8d       	ldd	r24, Y+24	; 0x18
    17a6:	99 8d       	ldd	r25, Y+25	; 0x19
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_VoidInit+0x42c>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9d 8b       	std	Y+21, r25	; 0x15
    17be:	8c 8b       	std	Y+20, r24	; 0x14
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_VoidInit+0x4aa>
	else if (__tmp > 65535)
    17c2:	6e 89       	ldd	r22, Y+22	; 0x16
    17c4:	7f 89       	ldd	r23, Y+23	; 0x17
    17c6:	88 8d       	ldd	r24, Y+24	; 0x18
    17c8:	99 8d       	ldd	r25, Y+25	; 0x19
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_VoidInit+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9d 8b       	std	Y+21, r25	; 0x15
    1800:	8c 8b       	std	Y+20, r24	; 0x14
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_VoidInit+0x48c>
    1804:	88 ec       	ldi	r24, 0xC8	; 200
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9b 8b       	std	Y+19, r25	; 0x13
    180a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180c:	8a 89       	ldd	r24, Y+18	; 0x12
    180e:	9b 89       	ldd	r25, Y+19	; 0x13
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_VoidInit+0x47a>
    1814:	9b 8b       	std	Y+19, r25	; 0x13
    1816:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	8c 89       	ldd	r24, Y+20	; 0x14
    181a:	9d 89       	ldd	r25, Y+21	; 0x15
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9d 8b       	std	Y+21, r25	; 0x15
    1820:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	8c 89       	ldd	r24, Y+20	; 0x14
    1824:	9d 89       	ldd	r25, Y+21	; 0x15
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_VoidInit+0x46e>
    182a:	24 c0       	rjmp	.+72     	; 0x1874 <LCD_VoidInit+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6e 89       	ldd	r22, Y+22	; 0x16
    182e:	7f 89       	ldd	r23, Y+23	; 0x17
    1830:	88 8d       	ldd	r24, Y+24	; 0x18
    1832:	99 8d       	ldd	r25, Y+25	; 0x19
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9d 8b       	std	Y+21, r25	; 0x15
    183e:	8c 8b       	std	Y+20, r24	; 0x14
    1840:	8c 89       	ldd	r24, Y+20	; 0x14
    1842:	9d 89       	ldd	r25, Y+21	; 0x15
    1844:	99 8b       	std	Y+17, r25	; 0x11
    1846:	88 8b       	std	Y+16, r24	; 0x10
    1848:	88 89       	ldd	r24, Y+16	; 0x10
    184a:	99 89       	ldd	r25, Y+17	; 0x11
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_VoidInit+0x4b6>
    1850:	99 8b       	std	Y+17, r25	; 0x11
    1852:	88 8b       	std	Y+16, r24	; 0x10
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <LCD_VoidInit+0x4de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1856:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1858:	78 a1       	ldd	r23, Y+32	; 0x20
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8e 8f       	std	Y+30, r24	; 0x1e
    1868:	8e 8d       	ldd	r24, Y+30	; 0x1e
    186a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	8a 95       	dec	r24
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_VoidInit+0x4d8>
    1872:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	// display clear
	LCD_VoidSendCommand(LCD_CLEAR);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b0 e4       	ldi	r27, 0x40	; 64
    1884:	8b 87       	std	Y+11, r24	; 0x0b
    1886:	9c 87       	std	Y+12, r25	; 0x0c
    1888:	ad 87       	std	Y+13, r26	; 0x0d
    188a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188c:	6b 85       	ldd	r22, Y+11	; 0x0b
    188e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1890:	8d 85       	ldd	r24, Y+13	; 0x0d
    1892:	9e 85       	ldd	r25, Y+14	; 0x0e
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	4a ef       	ldi	r20, 0xFA	; 250
    189a:	54 e4       	ldi	r21, 0x44	; 68
    189c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	8f 83       	std	Y+7, r24	; 0x07
    18a6:	98 87       	std	Y+8, r25	; 0x08
    18a8:	a9 87       	std	Y+9, r26	; 0x09
    18aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ac:	6f 81       	ldd	r22, Y+7	; 0x07
    18ae:	78 85       	ldd	r23, Y+8	; 0x08
    18b0:	89 85       	ldd	r24, Y+9	; 0x09
    18b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	5f e3       	ldi	r21, 0x3F	; 63
    18bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	2c f4       	brge	.+10     	; 0x18ce <LCD_VoidInit+0x538>
		__ticks = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	3f c0       	rjmp	.+126    	; 0x194c <LCD_VoidInit+0x5b6>
	else if (__tmp > 65535)
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	3f ef       	ldi	r19, 0xFF	; 255
    18da:	4f e7       	ldi	r20, 0x7F	; 127
    18dc:	57 e4       	ldi	r21, 0x47	; 71
    18de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	4c f5       	brge	.+82     	; 0x1938 <LCD_VoidInit+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e2       	ldi	r20, 0x20	; 32
    18f4:	51 e4       	ldi	r21, 0x41	; 65
    18f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
    190e:	0f c0       	rjmp	.+30     	; 0x192e <LCD_VoidInit+0x598>
    1910:	88 ec       	ldi	r24, 0xC8	; 200
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <LCD_VoidInit+0x586>
    1920:	9c 83       	std	Y+4, r25	; 0x04
    1922:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	69 f7       	brne	.-38     	; 0x1910 <LCD_VoidInit+0x57a>
    1936:	14 c0       	rjmp	.+40     	; 0x1960 <LCD_VoidInit+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	9e 81       	ldd	r25, Y+6	; 0x06
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_VoidInit+0x5c2>
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	
}
    1960:	c3 5b       	subi	r28, 0xB3	; 179
    1962:	df 4f       	sbci	r29, 0xFF	; 255
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Data)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	6d 97       	sbiw	r28, 0x1d	; 29
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	8d 8f       	std	Y+29, r24	; 0x1d
	//  Rs =1 to write data
	DIO_VoidSetPinValue(CNRL_PORT,PIN_0,SET);
    198e:	83 e0       	ldi	r24, 0x03	; 3
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
	// R/W =0 to write
	DIO_VoidSetPinValue(CNRL_PORT,PIN_1,CLR);
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
	// send command to data port
	DIO_VoidSetPortValue(DATA_PORT,Data);
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19a6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VoidSetPortValue>
	//Enable sequence
	DIO_VoidSetPinValue(CNRL_PORT,PIN_2,SET);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	62 e0       	ldi	r22, 0x02	; 2
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e8       	ldi	r26, 0x80	; 128
    19ba:	bf e3       	ldi	r27, 0x3F	; 63
    19bc:	89 8f       	std	Y+25, r24	; 0x19
    19be:	9a 8f       	std	Y+26, r25	; 0x1a
    19c0:	ab 8f       	std	Y+27, r26	; 0x1b
    19c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	69 8d       	ldd	r22, Y+25	; 0x19
    19c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8d 8b       	std	Y+21, r24	; 0x15
    19de:	9e 8b       	std	Y+22, r25	; 0x16
    19e0:	af 8b       	std	Y+23, r26	; 0x17
    19e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e4:	6d 89       	ldd	r22, Y+21	; 0x15
    19e6:	7e 89       	ldd	r23, Y+22	; 0x16
    19e8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ea:	98 8d       	ldd	r25, Y+24	; 0x18
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <LCD_VoidSendData+0x8e>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9c 8b       	std	Y+20, r25	; 0x14
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <LCD_VoidSendData+0xee>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9a 8b       	std	Y+18, r25	; 0x12
    1a4e:	89 8b       	std	Y+17, r24	; 0x11
    1a50:	89 89       	ldd	r24, Y+17	; 0x11
    1a52:	9a 89       	ldd	r25, Y+18	; 0x12
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_VoidSendData+0xdc>
    1a58:	9a 8b       	std	Y+18, r25	; 0x12
    1a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8b 89       	ldd	r24, Y+19	; 0x13
    1a68:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <LCD_VoidSendData+0xd0>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9c 8b       	std	Y+20, r25	; 0x14
    1a82:	8b 8b       	std	Y+19, r24	; 0x13
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	98 8b       	std	Y+16, r25	; 0x10
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f
    1a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8e:	98 89       	ldd	r25, Y+16	; 0x10
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_VoidSendData+0x118>
    1a94:	98 8b       	std	Y+16, r25	; 0x10
    1a96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(CNRL_PORT,PIN_2,CLR);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e4       	ldi	r27, 0x40	; 64
    1aaa:	8b 87       	std	Y+11, r24	; 0x0b
    1aac:	9c 87       	std	Y+12, r25	; 0x0c
    1aae:	ad 87       	std	Y+13, r26	; 0x0d
    1ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a ef       	ldi	r20, 0xFA	; 250
    1ac0:	54 e4       	ldi	r21, 0x44	; 68
    1ac2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	8f 83       	std	Y+7, r24	; 0x07
    1acc:	98 87       	std	Y+8, r25	; 0x08
    1ace:	a9 87       	std	Y+9, r26	; 0x09
    1ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_VoidSendData+0x17c>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_VoidSendData+0x1fa>
	else if (__tmp > 65535)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_VoidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_VoidSendData+0x1dc>
    1b36:	88 ec       	ldi	r24, 0xC8	; 200
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_VoidSendData+0x1ca>
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_VoidSendData+0x1be>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_VoidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_VoidSendData+0x206>
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    1b86:	6d 96       	adiw	r28, 0x1d	; 29
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 Command)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	6d 97       	sbiw	r28, 0x1d	; 29
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	8d 8f       	std	Y+29, r24	; 0x1d
	//  Rs =0 to write command
	DIO_VoidSetPinValue(CNRL_PORT,PIN_0,CLR);
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
	// R/W =0 to write
	DIO_VoidSetPinValue(CNRL_PORT,PIN_1,CLR);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	61 e0       	ldi	r22, 0x01	; 1
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
	// send command to data port
	DIO_VoidSetPortValue(DATA_PORT,Command);
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bc6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VoidSetPortValue>
	//Enable sequence
	DIO_VoidSetPinValue(CNRL_PORT,PIN_2,SET);
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	89 8f       	std	Y+25, r24	; 0x19
    1bde:	9a 8f       	std	Y+26, r25	; 0x1a
    1be0:	ab 8f       	std	Y+27, r26	; 0x1b
    1be2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	69 8d       	ldd	r22, Y+25	; 0x19
    1be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a ef       	ldi	r20, 0xFA	; 250
    1bf2:	54 e4       	ldi	r21, 0x44	; 68
    1bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8d 8b       	std	Y+21, r24	; 0x15
    1bfe:	9e 8b       	std	Y+22, r25	; 0x16
    1c00:	af 8b       	std	Y+23, r26	; 0x17
    1c02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_VoidSendCommand+0xee>
    1c68:	88 ec       	ldi	r24, 0xC8	; 200
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9a 8b       	std	Y+18, r25	; 0x12
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
    1c70:	89 89       	ldd	r24, Y+17	; 0x11
    1c72:	9a 89       	ldd	r25, Y+18	; 0x12
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_VoidSendCommand+0xdc>
    1c78:	9a 8b       	std	Y+18, r25	; 0x12
    1c7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9c 8b       	std	Y+20, r25	; 0x14
    1c84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_VoidSendCommand+0xd0>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6d 89       	ldd	r22, Y+21	; 0x15
    1c92:	7e 89       	ldd	r23, Y+22	; 0x16
    1c94:	8f 89       	ldd	r24, Y+23	; 0x17
    1c96:	98 8d       	ldd	r25, Y+24	; 0x18
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9c 8b       	std	Y+20, r25	; 0x14
    1ca2:	8b 8b       	std	Y+19, r24	; 0x13
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	98 8b       	std	Y+16, r25	; 0x10
    1caa:	8f 87       	std	Y+15, r24	; 0x0f
    1cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cae:	98 89       	ldd	r25, Y+16	; 0x10
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_VoidSendCommand+0x118>
    1cb4:	98 8b       	std	Y+16, r25	; 0x10
    1cb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(CNRL_PORT,PIN_2,CLR);
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VoidSetPinValue>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e4       	ldi	r27, 0x40	; 64
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
    1ccc:	9c 87       	std	Y+12, r25	; 0x0c
    1cce:	ad 87       	std	Y+13, r26	; 0x0d
    1cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	a9 87       	std	Y+9, r26	; 0x09
    1cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_VoidSendCommand+0x17c>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_VoidSendCommand+0x1dc>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_VoidSendCommand+0x1ca>
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_VoidSendCommand+0x1be>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_VoidSendCommand+0x206>
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1da6:	6d 96       	adiw	r28, 0x1d	; 29
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <LCD_VoidSendString>:
void LCD_VoidSendString(u8 *String)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <LCD_VoidSendString+0x6>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1dc8:	19 82       	std	Y+1, r1	; 0x01
    1dca:	0e c0       	rjmp	.+28     	; 0x1de8 <LCD_VoidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_VoidSendData(String[i]);
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e2 0f       	add	r30, r18
    1dda:	f3 1f       	adc	r31, r19
    1ddc:	80 81       	ld	r24, Z
    1dde:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
		i++;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void LCD_VoidSendString(u8 *String)
{
	u8 i=0;
	while(String[i]!='\0')
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 23       	and	r24, r24
    1dfc:	39 f7       	brne	.-50     	; 0x1dcc <LCD_VoidSendString+0x14>
	{
		LCD_VoidSendData(String[i]);
		i++;
	}
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <LCD_VoidSendNum>:
void LCD_VoidSendNum(u32 Num)
{
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	29 97       	sbiw	r28, 0x09	; 9
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	6e 83       	std	Y+6, r22	; 0x06
    1e28:	7f 83       	std	Y+7, r23	; 0x07
    1e2a:	88 87       	std	Y+8, r24	; 0x08
    1e2c:	99 87       	std	Y+9, r25	; 0x09
	u8 x=0;
    1e2e:	1d 82       	std	Y+5, r1	; 0x05
	u32 rev=1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e0       	ldi	r26, 0x00	; 0
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	9a 83       	std	Y+2, r25	; 0x02
    1e3c:	ab 83       	std	Y+3, r26	; 0x03
    1e3e:	bc 83       	std	Y+4, r27	; 0x04
	if (Num ==0)
    1e40:	8e 81       	ldd	r24, Y+6	; 0x06
    1e42:	9f 81       	ldd	r25, Y+7	; 0x07
    1e44:	a8 85       	ldd	r26, Y+8	; 0x08
    1e46:	b9 85       	ldd	r27, Y+9	; 0x09
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	a1 05       	cpc	r26, r1
    1e4c:	b1 05       	cpc	r27, r1
    1e4e:	d1 f5       	brne	.+116    	; 0x1ec4 <LCD_VoidSendNum+0xba>
	{
		LCD_VoidSendData('0');
    1e50:	80 e3       	ldi	r24, 0x30	; 48
    1e52:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
    1e56:	6d c0       	rjmp	.+218    	; 0x1f32 <LCD_VoidSendNum+0x128>
	}
	else
	{
		while(Num!=0)
		{
			rev=(rev*10) + (Num%10);
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e5e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e60:	2a e0       	ldi	r18, 0x0A	; 10
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 37 14 	call	0x286e	; 0x286e <__mulsi3>
    1e70:	7b 01       	movw	r14, r22
    1e72:	8c 01       	movw	r16, r24
    1e74:	8e 81       	ldd	r24, Y+6	; 0x06
    1e76:	9f 81       	ldd	r25, Y+7	; 0x07
    1e78:	a8 85       	ldd	r26, Y+8	; 0x08
    1e7a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e7c:	2a e0       	ldi	r18, 0x0A	; 10
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 56 14 	call	0x28ac	; 0x28ac <__udivmodsi4>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8e 0d       	add	r24, r14
    1e92:	9f 1d       	adc	r25, r15
    1e94:	a0 1f       	adc	r26, r16
    1e96:	b1 1f       	adc	r27, r17
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	ab 83       	std	Y+3, r26	; 0x03
    1e9e:	bc 83       	std	Y+4, r27	; 0x04
			Num/=10;
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ea6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ea8:	2a e0       	ldi	r18, 0x0A	; 10
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 56 14 	call	0x28ac	; 0x28ac <__udivmodsi4>
    1eb8:	da 01       	movw	r26, r20
    1eba:	c9 01       	movw	r24, r18
    1ebc:	8e 83       	std	Y+6, r24	; 0x06
    1ebe:	9f 83       	std	Y+7, r25	; 0x07
    1ec0:	a8 87       	std	Y+8, r26	; 0x08
    1ec2:	b9 87       	std	Y+9, r27	; 0x09
	{
		LCD_VoidSendData('0');
	}
	else
	{
		while(Num!=0)
    1ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec8:	a8 85       	ldd	r26, Y+8	; 0x08
    1eca:	b9 85       	ldd	r27, Y+9	; 0x09
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	a1 05       	cpc	r26, r1
    1ed0:	b1 05       	cpc	r27, r1
    1ed2:	11 f6       	brne	.-124    	; 0x1e58 <LCD_VoidSendNum+0x4e>
    1ed4:	25 c0       	rjmp	.+74     	; 0x1f20 <LCD_VoidSendNum+0x116>
			Num/=10;
		}

		while (rev!=1)
		{
			x= rev%10;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	ab 81       	ldd	r26, Y+3	; 0x03
    1edc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 56 14 	call	0x28ac	; 0x28ac <__udivmodsi4>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
			rev=rev/10;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	ab 81       	ldd	r26, Y+3	; 0x03
    1efa:	bc 81       	ldd	r27, Y+4	; 0x04
    1efc:	2a e0       	ldi	r18, 0x0A	; 10
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 56 14 	call	0x28ac	; 0x28ac <__udivmodsi4>
    1f0c:	da 01       	movw	r26, r20
    1f0e:	c9 01       	movw	r24, r18
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	ab 83       	std	Y+3, r26	; 0x03
    1f16:	bc 83       	std	Y+4, r27	; 0x04
			LCD_VoidSendData(x+48);
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	80 5d       	subi	r24, 0xD0	; 208
    1f1c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
		{
			rev=(rev*10) + (Num%10);
			Num/=10;
		}

		while (rev!=1)
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	ab 81       	ldd	r26, Y+3	; 0x03
    1f26:	bc 81       	ldd	r27, Y+4	; 0x04
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	a1 05       	cpc	r26, r1
    1f2e:	b1 05       	cpc	r27, r1
    1f30:	91 f6       	brne	.-92     	; 0x1ed6 <LCD_VoidSendNum+0xcc>
			x= rev%10;
			rev=rev/10;
			LCD_VoidSendData(x+48);
		}
	}
}
    1f32:	29 96       	adiw	r28, 0x09	; 9
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	08 95       	ret

00001f4c <LCD_VoidShiftRightString>:
void LCD_VoidShiftRightString(u8 *String)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	a3 97       	sbiw	r28, 0x23	; 35
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	9b a3       	std	Y+35, r25	; 0x23
    1f62:	8a a3       	std	Y+34, r24	; 0x22

	u8 size_of_String=0;
    1f64:	19 a2       	std	Y+33, r1	; 0x21
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <LCD_VoidShiftRightString+0x22>
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
    1f68:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	89 a3       	std	Y+33, r24	; 0x21
}
void LCD_VoidShiftRightString(u8 *String)
{

	u8 size_of_String=0;
	while(String[size_of_String]!='\0')
    1f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	8a a1       	ldd	r24, Y+34	; 0x22
    1f76:	9b a1       	ldd	r25, Y+35	; 0x23
    1f78:	fc 01       	movw	r30, r24
    1f7a:	e2 0f       	add	r30, r18
    1f7c:	f3 1f       	adc	r31, r19
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	91 f7       	brne	.-28     	; 0x1f68 <LCD_VoidShiftRightString+0x1c>
	{
		size_of_String++;
	}
	// ShOW CHARS FROM LEFT TO RIGHT
	for (u8 i=size_of_String-1;i>=0;i--)
    1f84:	89 a1       	ldd	r24, Y+33	; 0x21
    1f86:	81 50       	subi	r24, 0x01	; 1
    1f88:	88 a3       	std	Y+32, r24	; 0x20
	{
		for (u8 j=i;String[j]!='\0';j++)
    1f8a:	88 a1       	ldd	r24, Y+32	; 0x20
    1f8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f8e:	0e c0       	rjmp	.+28     	; 0x1fac <LCD_VoidShiftRightString+0x60>
		{
			LCD_VoidSendData(String[j]);
    1f90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a a1       	ldd	r24, Y+34	; 0x22
    1f98:	9b a1       	ldd	r25, Y+35	; 0x23
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	80 81       	ld	r24, Z
    1fa2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
		size_of_String++;
	}
	// ShOW CHARS FROM LEFT TO RIGHT
	for (u8 i=size_of_String-1;i>=0;i--)
	{
		for (u8 j=i;String[j]!='\0';j++)
    1fa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	8f 8f       	std	Y+31, r24	; 0x1f
    1fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	8a a1       	ldd	r24, Y+34	; 0x22
    1fb4:	9b a1       	ldd	r25, Y+35	; 0x23
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f7       	brne	.-50     	; 0x1f90 <LCD_VoidShiftRightString+0x44>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	aa ef       	ldi	r26, 0xFA	; 250
    1fc8:	b3 e4       	ldi	r27, 0x43	; 67
    1fca:	89 8f       	std	Y+25, r24	; 0x19
    1fcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fce:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8d 8b       	std	Y+21, r24	; 0x15
    1fec:	9e 8b       	std	Y+22, r25	; 0x16
    1fee:	af 8b       	std	Y+23, r26	; 0x17
    1ff0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_VoidShiftRightString+0xc8>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_VoidShiftRightString+0x146>
	else if (__tmp > 65535)
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_VoidShiftRightString+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	69 8d       	ldd	r22, Y+25	; 0x19
    202e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_VoidShiftRightString+0x128>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	9a 89       	ldd	r25, Y+18	; 0x12
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_VoidShiftRightString+0x116>
    2066:	9a 8b       	std	Y+18, r25	; 0x12
    2068:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_VoidShiftRightString+0x10a>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_VoidShiftRightString+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	8f 87       	std	Y+15, r24	; 0x0f
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	98 89       	ldd	r25, Y+16	; 0x10
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_VoidShiftRightString+0x152>
    20a2:	98 8b       	std	Y+16, r25	; 0x10
    20a4:	8f 87       	std	Y+15, r24	; 0x0f
		{
			LCD_VoidSendData(String[j]);
		}
		_delay_ms(500);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
		if (0==i)
    20ac:	88 a1       	ldd	r24, Y+32	; 0x20
    20ae:	88 23       	and	r24, r24
    20b0:	21 f0       	breq	.+8      	; 0x20ba <LCD_VoidShiftRightString+0x16e>
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
	}
	// ShOW CHARS FROM LEFT TO RIGHT
	for (u8 i=size_of_String-1;i>=0;i--)
    20b2:	88 a1       	ldd	r24, Y+32	; 0x20
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	88 a3       	std	Y+32, r24	; 0x20
    20b8:	68 cf       	rjmp	.-304    	; 0x1f8a <LCD_VoidShiftRightString+0x3e>
		LCD_VoidSendCommand(LCD_CLEAR);
		if (0==i)
			break;
	}
	// SHIFTING STRING
	for (u8 i=1;i<17;i++)
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	8e 8f       	std	Y+30, r24	; 0x1e
    20be:	9b c0       	rjmp	.+310    	; 0x21f6 <LCD_VoidShiftRightString+0x2aa>
	{
		LCD_VoidSetPositin(ROW_0,i);
    20c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	b9 01       	movw	r22, r18
    20cc:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>

		for (u8 j=0;String[j]!='\0';j++)
    20d0:	1d 8e       	std	Y+29, r1	; 0x1d
    20d2:	0e c0       	rjmp	.+28     	; 0x20f0 <LCD_VoidShiftRightString+0x1a4>
		{
			LCD_VoidSendData(String[j]);
    20d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	8a a1       	ldd	r24, Y+34	; 0x22
    20dc:	9b a1       	ldd	r25, Y+35	; 0x23
    20de:	fc 01       	movw	r30, r24
    20e0:	e2 0f       	add	r30, r18
    20e2:	f3 1f       	adc	r31, r19
    20e4:	80 81       	ld	r24, Z
    20e6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
	// SHIFTING STRING
	for (u8 i=1;i<17;i++)
	{
		LCD_VoidSetPositin(ROW_0,i);

		for (u8 j=0;String[j]!='\0';j++)
    20ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	8d 8f       	std	Y+29, r24	; 0x1d
    20f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	8a a1       	ldd	r24, Y+34	; 0x22
    20f8:	9b a1       	ldd	r25, Y+35	; 0x23
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	80 81       	ld	r24, Z
    2102:	88 23       	and	r24, r24
    2104:	39 f7       	brne	.-50     	; 0x20d4 <LCD_VoidShiftRightString+0x188>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	aa ef       	ldi	r26, 0xFA	; 250
    210c:	b3 e4       	ldi	r27, 0x43	; 67
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	9c 87       	std	Y+12, r25	; 0x0c
    2112:	ad 87       	std	Y+13, r26	; 0x0d
    2114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a ef       	ldi	r20, 0xFA	; 250
    2124:	54 e4       	ldi	r21, 0x44	; 68
    2126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8f 83       	std	Y+7, r24	; 0x07
    2130:	98 87       	std	Y+8, r25	; 0x08
    2132:	a9 87       	std	Y+9, r26	; 0x09
    2134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_VoidShiftRightString+0x20c>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_VoidShiftRightString+0x28a>
	else if (__tmp > 65535)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_VoidShiftRightString+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_VoidShiftRightString+0x26c>
    219a:	88 ec       	ldi	r24, 0xC8	; 200
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_VoidShiftRightString+0x25a>
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_VoidShiftRightString+0x24e>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_VoidShiftRightString+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_VoidShiftRightString+0x296>
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
		{
			LCD_VoidSendData(String[j]);
		}
		_delay_ms(500);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
		LCD_VoidSendCommand(LCD_CLEAR);
		if (0==i)
			break;
	}
	// SHIFTING STRING
	for (u8 i=1;i<17;i++)
    21f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21f2:	8f 5f       	subi	r24, 0xFF	; 255
    21f4:	8e 8f       	std	Y+30, r24	; 0x1e
    21f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21f8:	81 31       	cpi	r24, 0x11	; 17
    21fa:	08 f4       	brcc	.+2      	; 0x21fe <LCD_VoidShiftRightString+0x2b2>
    21fc:	61 cf       	rjmp	.-318    	; 0x20c0 <LCD_VoidShiftRightString+0x174>
		}
		_delay_ms(500);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
	}
}
    21fe:	a3 96       	adiw	r28, 0x23	; 35
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCD_VoidSetPositin>:
void LCD_VoidSetPositin(u8 Row,u8 Col)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <LCD_VoidSetPositin+0x6>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	6a 83       	std	Y+2, r22	; 0x02
	if (ROW_0 == Row)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	88 23       	and	r24, r24
    2222:	29 f4       	brne	.+10     	; 0x222e <LCD_VoidSetPositin+0x1e>
	{
		LCD_VoidSendCommand(128+Col);
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	80 58       	subi	r24, 0x80	; 128
    2228:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
    222c:	07 c0       	rjmp	.+14     	; 0x223c <LCD_VoidSetPositin+0x2c>
	}
	else if(ROW_1 == Row)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	21 f4       	brne	.+8      	; 0x223c <LCD_VoidSetPositin+0x2c>
	{
		LCD_VoidSendCommand(128+64+Col);
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	80 54       	subi	r24, 0x40	; 64
    2238:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
	}
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <LCD_VoidZigzag>:
void LCD_VoidZigzag(u8 *String)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	64 97       	sbiw	r28, 0x14	; 20
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	9c 8b       	std	Y+20, r25	; 0x14
    225c:	8b 8b       	std	Y+19, r24	; 0x13
	u8 row=0;
    225e:	1a 8a       	std	Y+18, r1	; 0x12

	u8 size_of_String=0;
    2260:	19 8a       	std	Y+17, r1	; 0x11
    2262:	03 c0       	rjmp	.+6      	; 0x226a <LCD_VoidZigzag+0x24>
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
    2264:	89 89       	ldd	r24, Y+17	; 0x11
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	89 8b       	std	Y+17, r24	; 0x11
void LCD_VoidZigzag(u8 *String)
{
	u8 row=0;

	u8 size_of_String=0;
	while(String[size_of_String]!='\0')
    226a:	89 89       	ldd	r24, Y+17	; 0x11
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	8b 89       	ldd	r24, Y+19	; 0x13
    2272:	9c 89       	ldd	r25, Y+20	; 0x14
    2274:	fc 01       	movw	r30, r24
    2276:	e2 0f       	add	r30, r18
    2278:	f3 1f       	adc	r31, r19
    227a:	80 81       	ld	r24, Z
    227c:	88 23       	and	r24, r24
    227e:	91 f7       	brne	.-28     	; 0x2264 <LCD_VoidZigzag+0x1e>
	{
		size_of_String++;
	}
	for(u8 i=0;16-i>=size_of_String;i+=(size_of_String/2))
    2280:	18 8a       	std	Y+16, r1	; 0x10
    2282:	9e c0       	rjmp	.+316    	; 0x23c0 <LCD_VoidZigzag+0x17a>
	{
		LCD_VoidSetPositin(row,i);
    2284:	8a 89       	ldd	r24, Y+18	; 0x12
    2286:	68 89       	ldd	r22, Y+16	; 0x10
    2288:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>
		for (u8 j=0;String[j]!='\0';j++)
    228c:	1f 86       	std	Y+15, r1	; 0x0f
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <LCD_VoidZigzag+0x66>
			{
				LCD_VoidSendData(String[j]);
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	fc 01       	movw	r30, r24
    229c:	e2 0f       	add	r30, r18
    229e:	f3 1f       	adc	r31, r19
    22a0:	80 81       	ld	r24, Z
    22a2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
		size_of_String++;
	}
	for(u8 i=0;16-i>=size_of_String;i+=(size_of_String/2))
	{
		LCD_VoidSetPositin(row,i);
		for (u8 j=0;String[j]!='\0';j++)
    22a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a8:	8f 5f       	subi	r24, 0xFF	; 255
    22aa:	8f 87       	std	Y+15, r24	; 0x0f
    22ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	fc 01       	movw	r30, r24
    22b8:	e2 0f       	add	r30, r18
    22ba:	f3 1f       	adc	r31, r19
    22bc:	80 81       	ld	r24, Z
    22be:	88 23       	and	r24, r24
    22c0:	39 f7       	brne	.-50     	; 0x2290 <LCD_VoidZigzag+0x4a>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	aa ef       	ldi	r26, 0xFA	; 250
    22c8:	b3 e4       	ldi	r27, 0x43	; 67
    22ca:	8b 87       	std	Y+11, r24	; 0x0b
    22cc:	9c 87       	std	Y+12, r25	; 0x0c
    22ce:	ad 87       	std	Y+13, r26	; 0x0d
    22d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8f 83       	std	Y+7, r24	; 0x07
    22ec:	98 87       	std	Y+8, r25	; 0x08
    22ee:	a9 87       	std	Y+9, r26	; 0x09
    22f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <LCD_VoidZigzag+0xce>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <LCD_VoidZigzag+0x14c>
	else if (__tmp > 65535)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <LCD_VoidZigzag+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	6b 85       	ldd	r22, Y+11	; 0x0b
    232e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_VoidZigzag+0x12e>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_VoidZigzag+0x11c>
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <LCD_VoidZigzag+0x110>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <LCD_VoidZigzag+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_VoidZigzag+0x158>
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
			{
				LCD_VoidSendData(String[j]);
			}
		_delay_ms(500);
		TOG_BIT(row,BIT_0);
    23a6:	9a 89       	ldd	r25, Y+18	; 0x12
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	89 27       	eor	r24, r25
    23ac:	8a 8b       	std	Y+18, r24	; 0x12
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
	u8 size_of_String=0;
	while(String[size_of_String]!='\0')
	{
		size_of_String++;
	}
	for(u8 i=0;16-i>=size_of_String;i+=(size_of_String/2))
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	98 2f       	mov	r25, r24
    23b8:	96 95       	lsr	r25
    23ba:	88 89       	ldd	r24, Y+16	; 0x10
    23bc:	89 0f       	add	r24, r25
    23be:	88 8b       	std	Y+16, r24	; 0x10
    23c0:	88 89       	ldd	r24, Y+16	; 0x10
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	80 e1       	ldi	r24, 0x10	; 16
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	ac 01       	movw	r20, r24
    23cc:	42 1b       	sub	r20, r18
    23ce:	53 0b       	sbc	r21, r19
    23d0:	9a 01       	movw	r18, r20
    23d2:	89 89       	ldd	r24, Y+17	; 0x11
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	28 17       	cp	r18, r24
    23da:	39 07       	cpc	r19, r25
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <LCD_VoidZigzag+0x19a>
    23de:	52 cf       	rjmp	.-348    	; 0x2284 <LCD_VoidZigzag+0x3e>
		_delay_ms(500);
		TOG_BIT(row,BIT_0);
		//to clean window
		LCD_VoidSendCommand(LCD_CLEAR);
	}
}
    23e0:	64 96       	adiw	r28, 0x14	; 20
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <main>:
#include "STD_TYPES.h"
#include "BIT_MATHS.h"
#include "LCD_Interface.h"
#include <avr/delay.h>
int main()
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	c6 5a       	subi	r28, 0xA6	; 166
    23fc:	d0 40       	sbci	r29, 0x00	; 0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
	LCD_VoidInit();
    2408:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_VoidInit>
	u8 rightweed[8]={0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10};
    240c:	ce 01       	movw	r24, r28
    240e:	45 96       	adiw	r24, 0x15	; 21
    2410:	c3 56       	subi	r28, 0x63	; 99
    2412:	df 4f       	sbci	r29, 0xFF	; 255
    2414:	99 83       	std	Y+1, r25	; 0x01
    2416:	88 83       	st	Y, r24
    2418:	cd 59       	subi	r28, 0x9D	; 157
    241a:	d0 40       	sbci	r29, 0x00	; 0
    241c:	a0 e7       	ldi	r26, 0x70	; 112
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	c1 56       	subi	r28, 0x61	; 97
    2422:	df 4f       	sbci	r29, 0xFF	; 255
    2424:	b9 83       	std	Y+1, r27	; 0x01
    2426:	a8 83       	st	Y, r26
    2428:	cf 59       	subi	r28, 0x9F	; 159
    242a:	d0 40       	sbci	r29, 0x00	; 0
    242c:	b8 e0       	ldi	r27, 0x08	; 8
    242e:	cf 55       	subi	r28, 0x5F	; 95
    2430:	df 4f       	sbci	r29, 0xFF	; 255
    2432:	b8 83       	st	Y, r27
    2434:	c1 5a       	subi	r28, 0xA1	; 161
    2436:	d0 40       	sbci	r29, 0x00	; 0
    2438:	c1 56       	subi	r28, 0x61	; 97
    243a:	df 4f       	sbci	r29, 0xFF	; 255
    243c:	e8 81       	ld	r30, Y
    243e:	f9 81       	ldd	r31, Y+1	; 0x01
    2440:	cf 59       	subi	r28, 0x9F	; 159
    2442:	d0 40       	sbci	r29, 0x00	; 0
    2444:	00 80       	ld	r0, Z
    2446:	c1 56       	subi	r28, 0x61	; 97
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	88 81       	ld	r24, Y
    244c:	99 81       	ldd	r25, Y+1	; 0x01
    244e:	cf 59       	subi	r28, 0x9F	; 159
    2450:	d0 40       	sbci	r29, 0x00	; 0
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	c1 56       	subi	r28, 0x61	; 97
    2456:	df 4f       	sbci	r29, 0xFF	; 255
    2458:	99 83       	std	Y+1, r25	; 0x01
    245a:	88 83       	st	Y, r24
    245c:	cf 59       	subi	r28, 0x9F	; 159
    245e:	d0 40       	sbci	r29, 0x00	; 0
    2460:	c3 56       	subi	r28, 0x63	; 99
    2462:	df 4f       	sbci	r29, 0xFF	; 255
    2464:	a8 81       	ld	r26, Y
    2466:	b9 81       	ldd	r27, Y+1	; 0x01
    2468:	cd 59       	subi	r28, 0x9D	; 157
    246a:	d0 40       	sbci	r29, 0x00	; 0
    246c:	0c 92       	st	X, r0
    246e:	c3 56       	subi	r28, 0x63	; 99
    2470:	df 4f       	sbci	r29, 0xFF	; 255
    2472:	e8 81       	ld	r30, Y
    2474:	f9 81       	ldd	r31, Y+1	; 0x01
    2476:	cd 59       	subi	r28, 0x9D	; 157
    2478:	d0 40       	sbci	r29, 0x00	; 0
    247a:	31 96       	adiw	r30, 0x01	; 1
    247c:	c3 56       	subi	r28, 0x63	; 99
    247e:	df 4f       	sbci	r29, 0xFF	; 255
    2480:	f9 83       	std	Y+1, r31	; 0x01
    2482:	e8 83       	st	Y, r30
    2484:	cd 59       	subi	r28, 0x9D	; 157
    2486:	d0 40       	sbci	r29, 0x00	; 0
    2488:	cf 55       	subi	r28, 0x5F	; 95
    248a:	df 4f       	sbci	r29, 0xFF	; 255
    248c:	f8 81       	ld	r31, Y
    248e:	c1 5a       	subi	r28, 0xA1	; 161
    2490:	d0 40       	sbci	r29, 0x00	; 0
    2492:	f1 50       	subi	r31, 0x01	; 1
    2494:	cf 55       	subi	r28, 0x5F	; 95
    2496:	df 4f       	sbci	r29, 0xFF	; 255
    2498:	f8 83       	st	Y, r31
    249a:	c1 5a       	subi	r28, 0xA1	; 161
    249c:	d0 40       	sbci	r29, 0x00	; 0
    249e:	cf 55       	subi	r28, 0x5F	; 95
    24a0:	df 4f       	sbci	r29, 0xFF	; 255
    24a2:	88 81       	ld	r24, Y
    24a4:	c1 5a       	subi	r28, 0xA1	; 161
    24a6:	d0 40       	sbci	r29, 0x00	; 0
    24a8:	88 23       	and	r24, r24
    24aa:	31 f6       	brne	.-116    	; 0x2438 <main+0x46>
	u8 leftweed[8]={0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};
    24ac:	de 01       	movw	r26, r28
    24ae:	5d 96       	adiw	r26, 0x1d	; 29
    24b0:	ce 55       	subi	r28, 0x5E	; 94
    24b2:	df 4f       	sbci	r29, 0xFF	; 255
    24b4:	b9 83       	std	Y+1, r27	; 0x01
    24b6:	a8 83       	st	Y, r26
    24b8:	c2 5a       	subi	r28, 0xA2	; 162
    24ba:	d0 40       	sbci	r29, 0x00	; 0
    24bc:	e8 e6       	ldi	r30, 0x68	; 104
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	cc 55       	subi	r28, 0x5C	; 92
    24c2:	df 4f       	sbci	r29, 0xFF	; 255
    24c4:	f9 83       	std	Y+1, r31	; 0x01
    24c6:	e8 83       	st	Y, r30
    24c8:	c4 5a       	subi	r28, 0xA4	; 164
    24ca:	d0 40       	sbci	r29, 0x00	; 0
    24cc:	f8 e0       	ldi	r31, 0x08	; 8
    24ce:	ca 55       	subi	r28, 0x5A	; 90
    24d0:	df 4f       	sbci	r29, 0xFF	; 255
    24d2:	f8 83       	st	Y, r31
    24d4:	c6 5a       	subi	r28, 0xA6	; 166
    24d6:	d0 40       	sbci	r29, 0x00	; 0
    24d8:	cc 55       	subi	r28, 0x5C	; 92
    24da:	df 4f       	sbci	r29, 0xFF	; 255
    24dc:	a8 81       	ld	r26, Y
    24de:	b9 81       	ldd	r27, Y+1	; 0x01
    24e0:	c4 5a       	subi	r28, 0xA4	; 164
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	0c 90       	ld	r0, X
    24e6:	cc 55       	subi	r28, 0x5C	; 92
    24e8:	df 4f       	sbci	r29, 0xFF	; 255
    24ea:	e8 81       	ld	r30, Y
    24ec:	f9 81       	ldd	r31, Y+1	; 0x01
    24ee:	c4 5a       	subi	r28, 0xA4	; 164
    24f0:	d0 40       	sbci	r29, 0x00	; 0
    24f2:	31 96       	adiw	r30, 0x01	; 1
    24f4:	cc 55       	subi	r28, 0x5C	; 92
    24f6:	df 4f       	sbci	r29, 0xFF	; 255
    24f8:	f9 83       	std	Y+1, r31	; 0x01
    24fa:	e8 83       	st	Y, r30
    24fc:	c4 5a       	subi	r28, 0xA4	; 164
    24fe:	d0 40       	sbci	r29, 0x00	; 0
    2500:	ce 55       	subi	r28, 0x5E	; 94
    2502:	df 4f       	sbci	r29, 0xFF	; 255
    2504:	a8 81       	ld	r26, Y
    2506:	b9 81       	ldd	r27, Y+1	; 0x01
    2508:	c2 5a       	subi	r28, 0xA2	; 162
    250a:	d0 40       	sbci	r29, 0x00	; 0
    250c:	0c 92       	st	X, r0
    250e:	ce 55       	subi	r28, 0x5E	; 94
    2510:	df 4f       	sbci	r29, 0xFF	; 255
    2512:	e8 81       	ld	r30, Y
    2514:	f9 81       	ldd	r31, Y+1	; 0x01
    2516:	c2 5a       	subi	r28, 0xA2	; 162
    2518:	d0 40       	sbci	r29, 0x00	; 0
    251a:	31 96       	adiw	r30, 0x01	; 1
    251c:	ce 55       	subi	r28, 0x5E	; 94
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	f9 83       	std	Y+1, r31	; 0x01
    2522:	e8 83       	st	Y, r30
    2524:	c2 5a       	subi	r28, 0xA2	; 162
    2526:	d0 40       	sbci	r29, 0x00	; 0
    2528:	ca 55       	subi	r28, 0x5A	; 90
    252a:	df 4f       	sbci	r29, 0xFF	; 255
    252c:	f8 81       	ld	r31, Y
    252e:	c6 5a       	subi	r28, 0xA6	; 166
    2530:	d0 40       	sbci	r29, 0x00	; 0
    2532:	f1 50       	subi	r31, 0x01	; 1
    2534:	ca 55       	subi	r28, 0x5A	; 90
    2536:	df 4f       	sbci	r29, 0xFF	; 255
    2538:	f8 83       	st	Y, r31
    253a:	c6 5a       	subi	r28, 0xA6	; 166
    253c:	d0 40       	sbci	r29, 0x00	; 0
    253e:	ca 55       	subi	r28, 0x5A	; 90
    2540:	df 4f       	sbci	r29, 0xFF	; 255
    2542:	88 81       	ld	r24, Y
    2544:	c6 5a       	subi	r28, 0xA6	; 166
    2546:	d0 40       	sbci	r29, 0x00	; 0
    2548:	88 23       	and	r24, r24
    254a:	31 f6       	brne	.-116    	; 0x24d8 <main+0xe6>
					   0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00, //9
					   0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00, //10
					   0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00, //11
					   0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00, //12
					   0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00, //13
	};
    254c:	80 e7       	ldi	r24, 0x70	; 112
    254e:	fe 01       	movw	r30, r28
    2550:	b5 96       	adiw	r30, 0x25	; 37
    2552:	df 01       	movw	r26, r30
    2554:	98 2f       	mov	r25, r24
    2556:	1d 92       	st	X+, r1
    2558:	9a 95       	dec	r25
    255a:	e9 f7       	brne	.-6      	; 0x2556 <main+0x164>
    255c:	88 e1       	ldi	r24, 0x18	; 24
    255e:	88 a7       	std	Y+40, r24	; 0x28
    2560:	88 e1       	ldi	r24, 0x18	; 24
    2562:	89 a7       	std	Y+41, r24	; 0x29
    2564:	88 e1       	ldi	r24, 0x18	; 24
    2566:	88 ab       	std	Y+48, r24	; 0x30
    2568:	88 e1       	ldi	r24, 0x18	; 24
    256a:	89 ab       	std	Y+49, r24	; 0x31
    256c:	88 e1       	ldi	r24, 0x18	; 24
    256e:	89 af       	std	Y+57, r24	; 0x39
    2570:	88 e1       	ldi	r24, 0x18	; 24
    2572:	8a af       	std	Y+58, r24	; 0x3a
    2574:	fe 01       	movw	r30, r28
    2576:	ef 5b       	subi	r30, 0xBF	; 191
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	88 e1       	ldi	r24, 0x18	; 24
    257c:	80 83       	st	Z, r24
    257e:	fe 01       	movw	r30, r28
    2580:	ee 5b       	subi	r30, 0xBE	; 190
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	88 e1       	ldi	r24, 0x18	; 24
    2586:	80 83       	st	Z, r24
    2588:	fe 01       	movw	r30, r28
    258a:	e7 5b       	subi	r30, 0xB7	; 183
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	88 e1       	ldi	r24, 0x18	; 24
    2590:	80 83       	st	Z, r24
    2592:	fe 01       	movw	r30, r28
    2594:	e6 5b       	subi	r30, 0xB6	; 182
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	88 e1       	ldi	r24, 0x18	; 24
    259a:	80 83       	st	Z, r24
    259c:	fe 01       	movw	r30, r28
    259e:	ee 5a       	subi	r30, 0xAE	; 174
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	88 e1       	ldi	r24, 0x18	; 24
    25a4:	80 83       	st	Z, r24
    25a6:	fe 01       	movw	r30, r28
    25a8:	ed 5a       	subi	r30, 0xAD	; 173
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	88 e1       	ldi	r24, 0x18	; 24
    25ae:	80 83       	st	Z, r24
    25b0:	fe 01       	movw	r30, r28
    25b2:	e5 5a       	subi	r30, 0xA5	; 165
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	88 e1       	ldi	r24, 0x18	; 24
    25b8:	80 83       	st	Z, r24
    25ba:	fe 01       	movw	r30, r28
    25bc:	e4 5a       	subi	r30, 0xA4	; 164
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	88 e1       	ldi	r24, 0x18	; 24
    25c2:	80 83       	st	Z, r24
    25c4:	fe 01       	movw	r30, r28
    25c6:	e3 5a       	subi	r30, 0xA3	; 163
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	88 e1       	ldi	r24, 0x18	; 24
    25cc:	80 83       	st	Z, r24
    25ce:	fe 01       	movw	r30, r28
    25d0:	e2 5a       	subi	r30, 0xA2	; 162
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	88 e1       	ldi	r24, 0x18	; 24
    25d6:	80 83       	st	Z, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	ea 59       	subi	r30, 0x9A	; 154
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	88 e1       	ldi	r24, 0x18	; 24
    25e0:	80 83       	st	Z, r24
    25e2:	fe 01       	movw	r30, r28
    25e4:	e9 59       	subi	r30, 0x99	; 153
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	88 e1       	ldi	r24, 0x18	; 24
    25ea:	80 83       	st	Z, r24
    25ec:	fe 01       	movw	r30, r28
    25ee:	e1 59       	subi	r30, 0x91	; 145
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	88 e1       	ldi	r24, 0x18	; 24
    25f4:	80 83       	st	Z, r24
    25f6:	fe 01       	movw	r30, r28
    25f8:	e0 59       	subi	r30, 0x90	; 144
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	88 e1       	ldi	r24, 0x18	; 24
    25fe:	80 83       	st	Z, r24
    2600:	fe 01       	movw	r30, r28
    2602:	e9 58       	subi	r30, 0x89	; 137
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	88 e1       	ldi	r24, 0x18	; 24
    2608:	80 83       	st	Z, r24
    260a:	fe 01       	movw	r30, r28
    260c:	e8 58       	subi	r30, 0x88	; 136
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	88 e1       	ldi	r24, 0x18	; 24
    2612:	80 83       	st	Z, r24
    2614:	fe 01       	movw	r30, r28
    2616:	e0 58       	subi	r30, 0x80	; 128
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	88 e1       	ldi	r24, 0x18	; 24
    261c:	80 83       	st	Z, r24
    261e:	fe 01       	movw	r30, r28
    2620:	ef 57       	subi	r30, 0x7F	; 127
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	88 e1       	ldi	r24, 0x18	; 24
    2626:	80 83       	st	Z, r24
    2628:	fe 01       	movw	r30, r28
    262a:	e8 57       	subi	r30, 0x78	; 120
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	88 e1       	ldi	r24, 0x18	; 24
    2630:	80 83       	st	Z, r24
    2632:	fe 01       	movw	r30, r28
    2634:	e7 57       	subi	r30, 0x77	; 119
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	88 e1       	ldi	r24, 0x18	; 24
    263a:	80 83       	st	Z, r24
			,0b00000000
			,0b00000000
			,0b00000000
			,0b00000000
			,0b00000000
	};
    263c:	ce 01       	movw	r24, r28
    263e:	8b 56       	subi	r24, 0x6B	; 107
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	28 e0       	ldi	r18, 0x08	; 8
    2644:	fc 01       	movw	r30, r24
    2646:	df 01       	movw	r26, r30
    2648:	82 2f       	mov	r24, r18
    264a:	1d 92       	st	X+, r1
    264c:	8a 95       	dec	r24
    264e:	e9 f7       	brne	.-6      	; 0x264a <main+0x258>
	//set addres CGRAM
	LCD_VoidSendCommand(0x40);
    2650:	80 e4       	ldi	r24, 0x40	; 64
    2652:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
	//0
	for(u8 i=0;i<8;i++)
    2656:	1c 8a       	std	Y+20, r1	; 0x14
    2658:	0e c0       	rjmp	.+28     	; 0x2676 <main+0x284>
	{
		LCD_VoidSendData(rightweed[i]);
    265a:	8c 89       	ldd	r24, Y+20	; 0x14
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	ce 01       	movw	r24, r28
    2662:	45 96       	adiw	r24, 0x15	; 21
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	80 81       	ld	r24, Z
    266c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
			,0b00000000
	};
	//set addres CGRAM
	LCD_VoidSendCommand(0x40);
	//0
	for(u8 i=0;i<8;i++)
    2670:	8c 89       	ldd	r24, Y+20	; 0x14
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	8c 8b       	std	Y+20, r24	; 0x14
    2676:	8c 89       	ldd	r24, Y+20	; 0x14
    2678:	88 30       	cpi	r24, 0x08	; 8
    267a:	78 f3       	brcs	.-34     	; 0x265a <main+0x268>
	{
		LCD_VoidSendData(rightweed[i]);
	}
	//1
	for(u8 i=0;i<8;i++)
    267c:	1b 8a       	std	Y+19, r1	; 0x13
    267e:	0e c0       	rjmp	.+28     	; 0x269c <main+0x2aa>
	{
		LCD_VoidSendData(leftweed[i]);
    2680:	8b 89       	ldd	r24, Y+19	; 0x13
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	ce 01       	movw	r24, r28
    2688:	4d 96       	adiw	r24, 0x1d	; 29
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
	for(u8 i=0;i<8;i++)
	{
		LCD_VoidSendData(rightweed[i]);
	}
	//1
	for(u8 i=0;i<8;i++)
    2696:	8b 89       	ldd	r24, Y+19	; 0x13
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	8b 8b       	std	Y+19, r24	; 0x13
    269c:	8b 89       	ldd	r24, Y+19	; 0x13
    269e:	88 30       	cpi	r24, 0x08	; 8
    26a0:	78 f3       	brcs	.-34     	; 0x2680 <main+0x28e>
	{
		LCD_VoidSendData(leftweed[i]);
	}
	for(u8 i=0;i<8;i++)
    26a2:	1a 8a       	std	Y+18, r1	; 0x12
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <main+0x2d2>
	{
		LCD_VoidSendData(space[i]);
    26a6:	8a 89       	ldd	r24, Y+18	; 0x12
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	ce 01       	movw	r24, r28
    26ae:	8b 56       	subi	r24, 0x6B	; 107
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	fc 01       	movw	r30, r24
    26b4:	e2 0f       	add	r30, r18
    26b6:	f3 1f       	adc	r31, r19
    26b8:	80 81       	ld	r24, Z
    26ba:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
	//1
	for(u8 i=0;i<8;i++)
	{
		LCD_VoidSendData(leftweed[i]);
	}
	for(u8 i=0;i<8;i++)
    26be:	8a 89       	ldd	r24, Y+18	; 0x12
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	8a 8b       	std	Y+18, r24	; 0x12
    26c4:	8a 89       	ldd	r24, Y+18	; 0x12
    26c6:	88 30       	cpi	r24, 0x08	; 8
    26c8:	70 f3       	brcs	.-36     	; 0x26a6 <main+0x2b4>


	while(1)
	{
		//start
		u8 counter=0;
    26ca:	19 8a       	std	Y+17, r1	; 0x11
		LCD_VoidSetPositin(0,0);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>
		LCD_VoidSendData(1);   //leftweed
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>

		LCD_VoidSetPositin(0,15);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	6f e0       	ldi	r22, 0x0F	; 15
    26de:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>
		LCD_VoidSendData(0);   //rightweed
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
		u8 i=0;
    26e8:	18 8a       	std	Y+16, r1	; 0x10
		for (i=0;i<14;i++)
    26ea:	18 8a       	std	Y+16, r1	; 0x10
    26ec:	b5 c0       	rjmp	.+362    	; 0x2858 <main+0x466>
		{
			//set GCRAM
			LCD_VoidSendCommand(0x58);
    26ee:	88 e5       	ldi	r24, 0x58	; 88
    26f0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
			for(u8 j=0; j<8;j++)
    26f4:	1f 86       	std	Y+15, r1	; 0x0f
    26f6:	11 c0       	rjmp	.+34     	; 0x271a <main+0x328>
			{
				LCD_VoidSendData(ball_SRtoL[counter]);
    26f8:	89 89       	ldd	r24, Y+17	; 0x11
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	ce 01       	movw	r24, r28
    2700:	85 96       	adiw	r24, 0x25	; 37
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	80 81       	ld	r24, Z
    270a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
				counter++;
    270e:	89 89       	ldd	r24, Y+17	; 0x11
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 8b       	std	Y+17, r24	; 0x11
		u8 i=0;
		for (i=0;i<14;i++)
		{
			//set GCRAM
			LCD_VoidSendCommand(0x58);
			for(u8 j=0; j<8;j++)
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	8f 87       	std	Y+15, r24	; 0x0f
    271a:	8f 85       	ldd	r24, Y+15	; 0x0f
    271c:	88 30       	cpi	r24, 0x08	; 8
    271e:	60 f3       	brcs	.-40     	; 0x26f8 <main+0x306>
			{
				LCD_VoidSendData(ball_SRtoL[counter]);
				counter++;
			}

			if(i<7)
    2720:	88 89       	ldd	r24, Y+16	; 0x10
    2722:	87 30       	cpi	r24, 0x07	; 7
    2724:	38 f4       	brcc	.+14     	; 0x2734 <main+0x342>
			{
				LCD_VoidSetPositin(0,i+2);
    2726:	88 89       	ldd	r24, Y+16	; 0x10
    2728:	98 2f       	mov	r25, r24
    272a:	9e 5f       	subi	r25, 0xFE	; 254
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	69 2f       	mov	r22, r25
    2730:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>
			}
			if(i==7)
    2734:	88 89       	ldd	r24, Y+16	; 0x10
    2736:	87 30       	cpi	r24, 0x07	; 7
    2738:	39 f4       	brne	.+14     	; 0x2748 <main+0x356>
			{
				LCD_VoidSetPositin(0,8);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	68 e0       	ldi	r22, 0x08	; 8
    273e:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>
				LCD_VoidSendData(2);
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
			}
			if(i>=7)
    2748:	88 89       	ldd	r24, Y+16	; 0x10
    274a:	87 30       	cpi	r24, 0x07	; 7
    274c:	38 f0       	brcs	.+14     	; 0x275c <main+0x36a>
			{
				LCD_VoidSetPositin(1,i+2);
    274e:	88 89       	ldd	r24, Y+16	; 0x10
    2750:	98 2f       	mov	r25, r24
    2752:	9e 5f       	subi	r25, 0xFE	; 254
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	69 2f       	mov	r22, r25
    2758:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_VoidSetPositin>
			}
			//shift to left
			LCD_VoidSendCommand(0b00010000);
    275c:	80 e1       	ldi	r24, 0x10	; 16
    275e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
			//space
			LCD_VoidSendData(2);
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
			LCD_VoidSendData(3);
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	aa ef       	ldi	r26, 0xFA	; 250
    2774:	b3 e4       	ldi	r27, 0x43	; 67
    2776:	8b 87       	std	Y+11, r24	; 0x0b
    2778:	9c 87       	std	Y+12, r25	; 0x0c
    277a:	ad 87       	std	Y+13, r26	; 0x0d
    277c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a ef       	ldi	r20, 0xFA	; 250
    278c:	54 e4       	ldi	r21, 0x44	; 68
    278e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	8f 83       	std	Y+7, r24	; 0x07
    2798:	98 87       	std	Y+8, r25	; 0x08
    279a:	a9 87       	std	Y+9, r26	; 0x09
    279c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <main+0x3ce>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	3f c0       	rjmp	.+126    	; 0x283e <main+0x44c>
	else if (__tmp > 65535)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	4c f5       	brge	.+82     	; 0x282a <main+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27da:	7c 85       	ldd	r23, Y+12	; 0x0c
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e2       	ldi	r20, 0x20	; 32
    27e6:	51 e4       	ldi	r21, 0x41	; 65
    27e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	0f c0       	rjmp	.+30     	; 0x2820 <main+0x42e>
    2802:	88 ec       	ldi	r24, 0xC8	; 200
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <main+0x41c>
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	69 f7       	brne	.-38     	; 0x2802 <main+0x410>
    2828:	14 c0       	rjmp	.+40     	; 0x2852 <main+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x458>
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendData(1);   //leftweed

		LCD_VoidSetPositin(0,15);
		LCD_VoidSendData(0);   //rightweed
		u8 i=0;
		for (i=0;i<14;i++)
    2852:	88 89       	ldd	r24, Y+16	; 0x10
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	88 8b       	std	Y+16, r24	; 0x10
    2858:	88 89       	ldd	r24, Y+16	; 0x10
    285a:	8e 30       	cpi	r24, 0x0E	; 14
    285c:	08 f4       	brcc	.+2      	; 0x2860 <main+0x46e>
    285e:	47 cf       	rjmp	.-370    	; 0x26ee <main+0x2fc>
			LCD_VoidSendData(2);
			LCD_VoidSendData(3);
			_delay_ms(500);
		}
		//shift to left
		LCD_VoidSendCommand(0b00010000);
    2860:	80 e1       	ldi	r24, 0x10	; 16
    2862:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VoidSendCommand>
		//space
		LCD_VoidSendData(2);
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_VoidSendData>
    286c:	2e cf       	rjmp	.-420    	; 0x26ca <main+0x2d8>

0000286e <__mulsi3>:
    286e:	62 9f       	mul	r22, r18
    2870:	d0 01       	movw	r26, r0
    2872:	73 9f       	mul	r23, r19
    2874:	f0 01       	movw	r30, r0
    2876:	82 9f       	mul	r24, r18
    2878:	e0 0d       	add	r30, r0
    287a:	f1 1d       	adc	r31, r1
    287c:	64 9f       	mul	r22, r20
    287e:	e0 0d       	add	r30, r0
    2880:	f1 1d       	adc	r31, r1
    2882:	92 9f       	mul	r25, r18
    2884:	f0 0d       	add	r31, r0
    2886:	83 9f       	mul	r24, r19
    2888:	f0 0d       	add	r31, r0
    288a:	74 9f       	mul	r23, r20
    288c:	f0 0d       	add	r31, r0
    288e:	65 9f       	mul	r22, r21
    2890:	f0 0d       	add	r31, r0
    2892:	99 27       	eor	r25, r25
    2894:	72 9f       	mul	r23, r18
    2896:	b0 0d       	add	r27, r0
    2898:	e1 1d       	adc	r30, r1
    289a:	f9 1f       	adc	r31, r25
    289c:	63 9f       	mul	r22, r19
    289e:	b0 0d       	add	r27, r0
    28a0:	e1 1d       	adc	r30, r1
    28a2:	f9 1f       	adc	r31, r25
    28a4:	bd 01       	movw	r22, r26
    28a6:	cf 01       	movw	r24, r30
    28a8:	11 24       	eor	r1, r1
    28aa:	08 95       	ret

000028ac <__udivmodsi4>:
    28ac:	a1 e2       	ldi	r26, 0x21	; 33
    28ae:	1a 2e       	mov	r1, r26
    28b0:	aa 1b       	sub	r26, r26
    28b2:	bb 1b       	sub	r27, r27
    28b4:	fd 01       	movw	r30, r26
    28b6:	0d c0       	rjmp	.+26     	; 0x28d2 <__udivmodsi4_ep>

000028b8 <__udivmodsi4_loop>:
    28b8:	aa 1f       	adc	r26, r26
    28ba:	bb 1f       	adc	r27, r27
    28bc:	ee 1f       	adc	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	a2 17       	cp	r26, r18
    28c2:	b3 07       	cpc	r27, r19
    28c4:	e4 07       	cpc	r30, r20
    28c6:	f5 07       	cpc	r31, r21
    28c8:	20 f0       	brcs	.+8      	; 0x28d2 <__udivmodsi4_ep>
    28ca:	a2 1b       	sub	r26, r18
    28cc:	b3 0b       	sbc	r27, r19
    28ce:	e4 0b       	sbc	r30, r20
    28d0:	f5 0b       	sbc	r31, r21

000028d2 <__udivmodsi4_ep>:
    28d2:	66 1f       	adc	r22, r22
    28d4:	77 1f       	adc	r23, r23
    28d6:	88 1f       	adc	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	1a 94       	dec	r1
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <__udivmodsi4_loop>
    28de:	60 95       	com	r22
    28e0:	70 95       	com	r23
    28e2:	80 95       	com	r24
    28e4:	90 95       	com	r25
    28e6:	9b 01       	movw	r18, r22
    28e8:	ac 01       	movw	r20, r24
    28ea:	bd 01       	movw	r22, r26
    28ec:	cf 01       	movw	r24, r30
    28ee:	08 95       	ret

000028f0 <__prologue_saves__>:
    28f0:	2f 92       	push	r2
    28f2:	3f 92       	push	r3
    28f4:	4f 92       	push	r4
    28f6:	5f 92       	push	r5
    28f8:	6f 92       	push	r6
    28fa:	7f 92       	push	r7
    28fc:	8f 92       	push	r8
    28fe:	9f 92       	push	r9
    2900:	af 92       	push	r10
    2902:	bf 92       	push	r11
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	ca 1b       	sub	r28, r26
    291a:	db 0b       	sbc	r29, r27
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	09 94       	ijmp

00002928 <__epilogue_restores__>:
    2928:	2a 88       	ldd	r2, Y+18	; 0x12
    292a:	39 88       	ldd	r3, Y+17	; 0x11
    292c:	48 88       	ldd	r4, Y+16	; 0x10
    292e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2930:	6e 84       	ldd	r6, Y+14	; 0x0e
    2932:	7d 84       	ldd	r7, Y+13	; 0x0d
    2934:	8c 84       	ldd	r8, Y+12	; 0x0c
    2936:	9b 84       	ldd	r9, Y+11	; 0x0b
    2938:	aa 84       	ldd	r10, Y+10	; 0x0a
    293a:	b9 84       	ldd	r11, Y+9	; 0x09
    293c:	c8 84       	ldd	r12, Y+8	; 0x08
    293e:	df 80       	ldd	r13, Y+7	; 0x07
    2940:	ee 80       	ldd	r14, Y+6	; 0x06
    2942:	fd 80       	ldd	r15, Y+5	; 0x05
    2944:	0c 81       	ldd	r16, Y+4	; 0x04
    2946:	1b 81       	ldd	r17, Y+3	; 0x03
    2948:	aa 81       	ldd	r26, Y+2	; 0x02
    294a:	b9 81       	ldd	r27, Y+1	; 0x01
    294c:	ce 0f       	add	r28, r30
    294e:	d1 1d       	adc	r29, r1
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	ed 01       	movw	r28, r26
    295c:	08 95       	ret

0000295e <_exit>:
    295e:	f8 94       	cli

00002960 <__stop_program>:
    2960:	ff cf       	rjmp	.-2      	; 0x2960 <__stop_program>
